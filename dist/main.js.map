{"version":3,"file":"main.js","mappings":"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","sources":["webpack://odin-wheres-waldo/webpack/runtime/global","webpack://odin-wheres-waldo/./src/GoalContainer.js","webpack://odin-wheres-waldo/./src/IspyImage.js","webpack://odin-wheres-waldo/./src/Selector.js","webpack://odin-wheres-waldo/./src/Answer.js","webpack://odin-wheres-waldo/./src/Styles.js","webpack://odin-wheres-waldo/./src/GuessingBox.js","webpack://odin-wheres-waldo/./src/GuessingItem.js","webpack://odin-wheres-waldo/./firestore.config.js","webpack://odin-wheres-waldo/./node_modules/@firebase/util/dist/index.esm2017.js","webpack://odin-wheres-waldo/./node_modules/@firebase/component/dist/esm/index.esm2017.js","webpack://odin-wheres-waldo/./node_modules/@firebase/logger/dist/esm/index.esm2017.js","webpack://odin-wheres-waldo/./node_modules/idb/build/wrap-idb-value.js","webpack://odin-wheres-waldo/./node_modules/idb/build/index.js","webpack://odin-wheres-waldo/./node_modules/@firebase/app/dist/esm/index.esm2017.js","webpack://odin-wheres-waldo/./node_modules/firebase/app/dist/index.esm.js","webpack://odin-wheres-waldo/./node_modules/@firebase/firestore/dist/lite/index.browser.esm2017.js","webpack://odin-wheres-waldo/./src/Modal.js","webpack://odin-wheres-waldo/./src/EndScreen.js","webpack://odin-wheres-waldo/./src/ScoreContainer.js","webpack://odin-wheres-waldo/./src/ScoreItem.js","webpack://odin-wheres-waldo/./src/Game.js","webpack://odin-wheres-waldo/./src/WelcomeScreen.js","webpack://odin-wheres-waldo/./src/Timer.js","webpack://odin-wheres-waldo/./src/index.js"],"sourcesContent":["__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","const GoalContainer = (ipsyImageImagePath) => {\n  const BORDER_SIZE = 5;\n  const IMAGE_QUERY_SELECTOR_STRING = '#ispy-image';\n  let element;\n\n  const getElement = () => {\n    if (!element) {\n      element = generateElement();\n    }\n    return element;\n  }\n\n  const getBorderSize = () => BORDER_SIZE;\n\n  const generateElement = () => {\n    const goalContainer = document.createElement('div');\n    const ispyImageElement = document.querySelector(IMAGE_QUERY_SELECTOR_STRING);\n    const ispyImageWidth = ispyImageElement.style.width.split('p')[0];\n    const ispyImageHeight = ispyImageElement.style.height.split('p')[0];\n    goalContainer.id = 'goal-container';\n    goalContainer.style.width = `${ispyImageWidth}px`;\n    goalContainer.style.height = `${ispyImageHeight / 5}px`;\n    goalContainer.style.border = `${BORDER_SIZE}px solid black`;\n    goalContainer.style.boxSizing = 'border-box';\n    goalContainer.style.display = 'flex';\n    ispyImageElement.after(goalContainer);\n    return goalContainer;\n  }\n\n  const generateGoals = (goalArray) => {\n    const ispyImageElement = document.querySelector(IMAGE_QUERY_SELECTOR_STRING);\n    const backgroundImage = ispyImageElement.style.backgroundImage;\n    goalArray.forEach((goal) => {\n      goal.setImage(ipsyImageImagePath)\n      goal.generateGoal(getElement());\n    })\n  }\n\n  return {\n    getElement,\n    generateGoals,\n    generateElement,\n    getBorderSize,\n  }\n}\n\nexport default GoalContainer;","import GoalContainer from './GoalContainer';\nconst IspyImage = (correctAnswers, SelectorFactoryFunction, GuessingBoxFactoryFunction, stopGame) => {\n  const WIDTH = 1200;\n  const HEIGHT = 700;\n  const getWidth = () => WIDTH;\n  const getHeight = () => HEIGHT;\n  let currentCorrectAnswer = null;\n  const getCurrentCorrectAnswer = () => currentCorrectAnswer;\n\n  const imagePathChoices = ['./assets/games.jpeg'];\n  const imagePath = imagePathChoices[0];\n  const getImagePath = () => imagePath;\n\n  const createImageElement = () => {\n    const imageElement = document.createElement('div');\n    imageElement.style.backgroundSize = '100% 100%';\n    imageElement.style.backgroundRepeat = 'no-repeat';\n    imageElement.style.backgroundImage = `url('${imagePath}')`;\n    imageElement.style.boxSizing = 'border-box';\n    imageElement.style.position = 'relative';\n    imageElement.classList.add('open-guessing-box');\n\n    imageElement.style.width = `${WIDTH}px`;\n    imageElement.style.height = `${HEIGHT}px`;\n    imageElement.id = 'ispy-image';\n\n    document.querySelector('#left-pane').appendChild(imageElement);\n    return imageElement;\n  }\n\n\n\n\n  const element = createImageElement();\n  const goalContainer = GoalContainer(getImagePath());\n  const selector = SelectorFactoryFunction();\n  const guessingBox = GuessingBoxFactoryFunction(correctAnswers, getCurrentCorrectAnswer, stopGame);\n\n  goalContainer.generateElement();\n  goalContainer.generateGoals(correctAnswers);\n  correctAnswers.forEach((answer) => {\n    answer.generateAnswerSpace(element);\n  });\n\n\n  document.body.addEventListener('click', (e) => {\n    if (e.target.classList.contains('open-guessing-box')) {\n      currentCorrectAnswer = e.target.getAttribute('data-character-name');\n      guessingBox.open(selector.getTop(), selector.getLeft());\n    } else {\n      guessingBox.close();\n    }\n  })\n\n  const toggleCursor = (e) => {\n    const cursor = e.target.style.cursor;\n    e.target.style.cursor = 'pointer';\n  }\n\n  element.addEventListener('mouseenter', toggleCursor);\n\n\n\n  element.style.backgroundColor = 'red'\n  //element.addEventListener('click', startAnswering);\n\n  return {\n    imagePath,\n    getHeight,\n    getWidth,\n    getCurrentCorrectAnswer,\n  }\n}\n\nexport default IspyImage;","const Selector = (querySelector) => {\n  const WIDTH = 100;\n  const HEIGHT = 100;\n  const ZOOM = 1;\n\n  let isUpdatingPosition = true;\n\n\n  let top;\n  let left;\n\n  const getTop = () => top;\n  const getLeft = () => left;\n\n\n  const setUpdatingPosition = (newBool) => {\n    isUpdatingPosition = newBool;\n  }\n\n  const getIsUpdatingPosition = () => isUpdatingPosition;\n\n\n\n\n  const BORDER = '4px solid black';\n  const BORDER_RADIUS = '100%';\n  const ISPY_ELEMENT = document.querySelector(querySelector)\n\n  const element = document.createElement('div');\n  element.classList.add('selector');\n  element.style.width = `${WIDTH}px`;\n  element.style.height = `${HEIGHT}px`;\n  element.style.border = BORDER;\n  element.style.borderRadius = BORDER_RADIUS;\n  element.style.position = 'absolute';\n  //document.body.appendChild(element);\n\n  const updateSelectorPosition = (e) => {\n    if (!isUpdatingPosition) { return }\n\n    const x = e.clientX;\n    const y = e.clientY;\n    const offset = 1;\n    left = x - (WIDTH / 2);\n    top = y - (HEIGHT / 2);\n    element.style.left = `${left}px`;\n    element.style.top = `${top}px`;\n    //console.log(left, top)\n  }\n\n\n\n  document.addEventListener('mousemove', updateSelectorPosition)\n\n\n  return {\n    getLeft,\n    getTop,\n    setUpdatingPosition,\n  }\n\n}\n\nexport default Selector;","const Answer = (answerObject) => {\n\n  const { name, coords, preview } = answerObject;\n  let image = null;\n  let ipsyImageObject = null;\n  let goalElement;\n  let hasAnsweredCorrectly = false;\n\n  const getHasAnsweredCorrectly = () => hasAnsweredCorrectly;\n\n  const getGoalElement = () => goalElement;\n\n  const reset = () => {\n    console.log('should reset')\n    hasAnsweredCorrectly = false;\n    console.log(getGoalElement())\n    getGoalElement().style.opacity = 1;\n  }\n\n  const getName = () => name;\n  const getCoords = () => coords;\n  const getImage = () => image;\n  const setImage = (imageToSet) => {\n    image = imageToSet;\n  }\n\n  const width = () => coords[1][0] - coords[0][0];\n  const height = () => coords[2][1] - coords[0][1];\n\n  const setIpsyImageObject = (newIpsyImageObject) => {\n    ipsyImageObject = newIpsyImageObject\n  }\n\n\n  const generateGoal = (goalContainerElement) => {\n    const goalElementDiv = document.createElement('div');\n    goalElementDiv.classList.add('goal-item')\n    const goalContainerWidth = goalContainerElement.style.width.split('p')[0];\n    const goalContainerHeight = goalContainerElement.style.height.split('p')[0];\n    const goalWidth = goalContainerWidth / 5;\n    const goalHeight = goalContainerHeight - 5;\n    goalElementDiv.style.width = `${goalWidth}px`;\n    goalElementDiv.style.height = `${goalHeight}px`;\n    goalElementDiv.style.border = '1px solid black';\n    goalElementDiv.style.boxSizing = 'border-box';\n    goalElementDiv.style.backgroundSize = `${preview.backgroundSize}% ${preview.backgroundSize}%`;\n    goalElementDiv.style.backgroundRepeat = 'no-repeat';\n    goalElementDiv.style.backgroundImage = `url('${image}')`;\n    const backgroundPositionX = preview.coords[0];\n    const backgroundPositionY = preview.coords[1];\n\n    goalElementDiv.style.backgroundPosition = `${backgroundPositionX}px ${backgroundPositionY}px`;\n    goalContainerElement.appendChild(goalElementDiv);\n    goalElement = goalElementDiv;\n  }\n\n  const generateAnswerSpace = (ipsyImageElement) => {\n    const answerElement = document.createElement('div');\n    answerElement.classList.add('answer');\n    answerElement.style.position = 'absolute';\n    answerElement.style.top = '0px';\n    answerElement.style.left = '0px';\n    answerElement.style.width = `${width()}px`;\n    answerElement.style.height = `${height()}px`;\n    answerElement.style.top = `${getCoords()[0][1]}px`;\n    answerElement.style.left = `${getCoords()[0][0]}px`\n    answerElement.dataset.characterName = name;\n    //answerElement.style.border = '5px solid red';\n    answerElement.classList.add('open-guessing-box');\n\n    ipsyImageElement.appendChild(answerElement);\n  }\n\n\n  const attemptAnswer = (correctAnswer, guessChoice) => {\n\n    const isAnswerRight = (correctAnswer === guessChoice);\n    if (isAnswerRight) {\n      console.log('you got it correct')\n      getGoalElement().style.opacity = .20;\n      hasAnsweredCorrectly = true;\n    } else {\n      console.log('wrong')\n    }\n\n\n    return isAnswerRight;\n  }\n\n  return {\n    getName,\n    getCoords,\n    width,\n    height,\n    setImage,\n    getImage,\n    generateGoal,\n    generateAnswerSpace,\n    setIpsyImageObject,\n    attemptAnswer,\n    getHasAnsweredCorrectly,\n    reset,\n  }\n}\n\nexport default Answer;","export const darkGray = '#34495e';\nexport const lightGrey = '#7f8c8d';\nexport const sansFont = \"Verdana, sans-serif\";\nexport const white = '#ecf0f1';","import GuessingItem from \"./GuessingItem\";\nimport { darkGray, white } from './Styles';\n\nconst GuessingBox = (answerArray, getCurrentCorrectAnswer, stopGame) => {\n  let element = 'koj';\n\n  const open = (top, left) => {\n    const offset = 40;\n    element.style.top = `${top + offset}px`;\n    element.style.left = `${left + offset}px`;\n    element.style.visibility = 'visible';\n  }\n\n  const close = () => {\n    element.style.visibility = 'hidden';\n  }\n\n  const checkForGameEnd = () => {\n\n    let allAnsweredCorrectly = answerArray.every((answer) => {\n      return answer.getHasAnsweredCorrectly();\n    });\n\n    if (allAnsweredCorrectly) {\n      stopGame();\n    }\n  }\n\n  const createElement = () => {\n    const boxElement = document.createElement('div');\n    boxElement.id = 'guessing-box';\n    boxElement.style.backgroundColor = darkGray;\n    boxElement.style.color = white;\n    boxElement.style.width = '200px';\n    boxElement.style.height = '300px';\n    boxElement.style.position = 'fixed';\n    boxElement.style.top = '0px';\n    boxElement.style.left = '0px';\n    boxElement.style.display = 'grid';\n    boxElement.style.rowGap = '2px';\n\n    boxElement.style.visibility = 'hidden';\n\n    document.body.appendChild(boxElement);\n    return boxElement\n  }\n\n  const createAnswerChoices = () => {\n    answerArray.forEach((answer) => {\n      const item = GuessingItem(answer, element, getCurrentCorrectAnswer, checkForGameEnd);\n      const itemElement = item.createElement();\n      element.appendChild(itemElement);\n    })\n\n  }\n\n  element = createElement();\n  createAnswerChoices();\n\n\n  return {\n    open,\n    close,\n  }\n}\n\nexport default GuessingBox;","import { lightGrey, darkGray, sansFont } from './Styles';\n\nconst GuessingItem = (answerObject, guessingBoxElement, getCurrentCorrectAnswer, checkForGameEnd) => {\n\n  const createElement = () => {\n    const guessingElement = document.createElement('div');\n    guessingElement.classList.add('guessing-item');\n    guessingElement.textContent = answerObject.getName();\n    guessingElement.style.fontFamily = sansFont;\n    const originalBackgroundColor = darkGray;\n    guessingElement.style.backgroundColor = originalBackgroundColor;\n    guessingElement.style.padding = \"20px\"\n\n\n    guessingElement.addEventListener('mouseenter', () => {\n      guessingElement.style.backgroundColor = lightGrey;\n      guessingElement.style.cursor = \"pointer\";\n    });\n\n    guessingElement.addEventListener('mouseleave', () => {\n      guessingElement.style.backgroundColor = originalBackgroundColor;\n      guessingElement.style.cursor = \"default\";\n    });\n\n    guessingElement.addEventListener('click', () => {\n      const correctAnswer = getCurrentCorrectAnswer();\n      const guess = answerObject.getName()\n      answerObject.attemptAnswer(correctAnswer, guess);\n      guessingBoxElement.style.visibility = 'hidden';\n      checkForGameEnd();\n    })\n\n    const answeredCorrectly = () => {\n\n\n      return true;\n    }\n    return guessingElement;\n  }\n\n  return {\n    createElement,\n  }\n}\n\nexport default GuessingItem; ","\n\nconst config = {\n  apiKey: \"AIzaSyDbyNu-slyDK1O_dMrNYJ90EzkgXFAHMQY\",\n  authDomain: \"where-s-waldo-d001d.firebaseapp.com\",\n  databaseURL: \"https://where-s-waldo-d001d-default-rtdb.firebaseio.com\",\n  projectId: \"where-s-waldo-d001d\",\n  storageBucket: \"where-s-waldo-d001d.appspot.com\",\n  messagingSenderId: \"392362816100\",\n  appId: \"1:392362816100:web:e2c5dcea7cf2fc1f25a571\"\n}\n\nexport default config;","/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.\r\n */\r\nconst CONSTANTS = {\r\n    /**\r\n     * @define {boolean} Whether this is the client Node.js SDK.\r\n     */\r\n    NODE_CLIENT: false,\r\n    /**\r\n     * @define {boolean} Whether this is the Admin Node.js SDK.\r\n     */\r\n    NODE_ADMIN: false,\r\n    /**\r\n     * Firebase SDK Version\r\n     */\r\n    SDK_VERSION: '${JSCORE_VERSION}'\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Throws an error if the provided assertion is falsy\r\n */\r\nconst assert = function (assertion, message) {\r\n    if (!assertion) {\r\n        throw assertionError(message);\r\n    }\r\n};\r\n/**\r\n * Returns an Error object suitable for throwing.\r\n */\r\nconst assertionError = function (message) {\r\n    return new Error('Firebase Database (' +\r\n        CONSTANTS.SDK_VERSION +\r\n        ') INTERNAL ASSERT FAILED: ' +\r\n        message);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst stringToByteArray$1 = function (str) {\r\n    // TODO(user): Use native implementations if/when available\r\n    const out = [];\r\n    let p = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        let c = str.charCodeAt(i);\r\n        if (c < 128) {\r\n            out[p++] = c;\r\n        }\r\n        else if (c < 2048) {\r\n            out[p++] = (c >> 6) | 192;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else if ((c & 0xfc00) === 0xd800 &&\r\n            i + 1 < str.length &&\r\n            (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {\r\n            // Surrogate Pair\r\n            c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);\r\n            out[p++] = (c >> 18) | 240;\r\n            out[p++] = ((c >> 12) & 63) | 128;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else {\r\n            out[p++] = (c >> 12) | 224;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n    }\r\n    return out;\r\n};\r\n/**\r\n * Turns an array of numbers into the string given by the concatenation of the\r\n * characters to which the numbers correspond.\r\n * @param bytes Array of numbers representing characters.\r\n * @return Stringification of the array.\r\n */\r\nconst byteArrayToString = function (bytes) {\r\n    // TODO(user): Use native implementations if/when available\r\n    const out = [];\r\n    let pos = 0, c = 0;\r\n    while (pos < bytes.length) {\r\n        const c1 = bytes[pos++];\r\n        if (c1 < 128) {\r\n            out[c++] = String.fromCharCode(c1);\r\n        }\r\n        else if (c1 > 191 && c1 < 224) {\r\n            const c2 = bytes[pos++];\r\n            out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));\r\n        }\r\n        else if (c1 > 239 && c1 < 365) {\r\n            // Surrogate Pair\r\n            const c2 = bytes[pos++];\r\n            const c3 = bytes[pos++];\r\n            const c4 = bytes[pos++];\r\n            const u = (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -\r\n                0x10000;\r\n            out[c++] = String.fromCharCode(0xd800 + (u >> 10));\r\n            out[c++] = String.fromCharCode(0xdc00 + (u & 1023));\r\n        }\r\n        else {\r\n            const c2 = bytes[pos++];\r\n            const c3 = bytes[pos++];\r\n            out[c++] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\r\n        }\r\n    }\r\n    return out.join('');\r\n};\r\n// We define it as an object literal instead of a class because a class compiled down to es5 can't\r\n// be treeshaked. https://github.com/rollup/rollup/issues/1691\r\n// Static lookup maps, lazily populated by init_()\r\nconst base64 = {\r\n    /**\r\n     * Maps bytes to characters.\r\n     */\r\n    byteToCharMap_: null,\r\n    /**\r\n     * Maps characters to bytes.\r\n     */\r\n    charToByteMap_: null,\r\n    /**\r\n     * Maps bytes to websafe characters.\r\n     * @private\r\n     */\r\n    byteToCharMapWebSafe_: null,\r\n    /**\r\n     * Maps websafe characters to bytes.\r\n     * @private\r\n     */\r\n    charToByteMapWebSafe_: null,\r\n    /**\r\n     * Our default alphabet, shared between\r\n     * ENCODED_VALS and ENCODED_VALS_WEBSAFE\r\n     */\r\n    ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',\r\n    /**\r\n     * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\r\n     */\r\n    get ENCODED_VALS() {\r\n        return this.ENCODED_VALS_BASE + '+/=';\r\n    },\r\n    /**\r\n     * Our websafe alphabet.\r\n     */\r\n    get ENCODED_VALS_WEBSAFE() {\r\n        return this.ENCODED_VALS_BASE + '-_.';\r\n    },\r\n    /**\r\n     * Whether this browser supports the atob and btoa functions. This extension\r\n     * started at Mozilla but is now implemented by many browsers. We use the\r\n     * ASSUME_* variables to avoid pulling in the full useragent detection library\r\n     * but still allowing the standard per-browser compilations.\r\n     *\r\n     */\r\n    HAS_NATIVE_SUPPORT: typeof atob === 'function',\r\n    /**\r\n     * Base64-encode an array of bytes.\r\n     *\r\n     * @param input An array of bytes (numbers with\r\n     *     value in [0, 255]) to encode.\r\n     * @param webSafe Boolean indicating we should use the\r\n     *     alternative alphabet.\r\n     * @return The base64 encoded string.\r\n     */\r\n    encodeByteArray(input, webSafe) {\r\n        if (!Array.isArray(input)) {\r\n            throw Error('encodeByteArray takes an array as a parameter');\r\n        }\r\n        this.init_();\r\n        const byteToCharMap = webSafe\r\n            ? this.byteToCharMapWebSafe_\r\n            : this.byteToCharMap_;\r\n        const output = [];\r\n        for (let i = 0; i < input.length; i += 3) {\r\n            const byte1 = input[i];\r\n            const haveByte2 = i + 1 < input.length;\r\n            const byte2 = haveByte2 ? input[i + 1] : 0;\r\n            const haveByte3 = i + 2 < input.length;\r\n            const byte3 = haveByte3 ? input[i + 2] : 0;\r\n            const outByte1 = byte1 >> 2;\r\n            const outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);\r\n            let outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);\r\n            let outByte4 = byte3 & 0x3f;\r\n            if (!haveByte3) {\r\n                outByte4 = 64;\r\n                if (!haveByte2) {\r\n                    outByte3 = 64;\r\n                }\r\n            }\r\n            output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);\r\n        }\r\n        return output.join('');\r\n    },\r\n    /**\r\n     * Base64-encode a string.\r\n     *\r\n     * @param input A string to encode.\r\n     * @param webSafe If true, we should use the\r\n     *     alternative alphabet.\r\n     * @return The base64 encoded string.\r\n     */\r\n    encodeString(input, webSafe) {\r\n        // Shortcut for Mozilla browsers that implement\r\n        // a native base64 encoder in the form of \"btoa/atob\"\r\n        if (this.HAS_NATIVE_SUPPORT && !webSafe) {\r\n            return btoa(input);\r\n        }\r\n        return this.encodeByteArray(stringToByteArray$1(input), webSafe);\r\n    },\r\n    /**\r\n     * Base64-decode a string.\r\n     *\r\n     * @param input to decode.\r\n     * @param webSafe True if we should use the\r\n     *     alternative alphabet.\r\n     * @return string representing the decoded value.\r\n     */\r\n    decodeString(input, webSafe) {\r\n        // Shortcut for Mozilla browsers that implement\r\n        // a native base64 encoder in the form of \"btoa/atob\"\r\n        if (this.HAS_NATIVE_SUPPORT && !webSafe) {\r\n            return atob(input);\r\n        }\r\n        return byteArrayToString(this.decodeStringToByteArray(input, webSafe));\r\n    },\r\n    /**\r\n     * Base64-decode a string.\r\n     *\r\n     * In base-64 decoding, groups of four characters are converted into three\r\n     * bytes.  If the encoder did not apply padding, the input length may not\r\n     * be a multiple of 4.\r\n     *\r\n     * In this case, the last group will have fewer than 4 characters, and\r\n     * padding will be inferred.  If the group has one or two characters, it decodes\r\n     * to one byte.  If the group has three characters, it decodes to two bytes.\r\n     *\r\n     * @param input Input to decode.\r\n     * @param webSafe True if we should use the web-safe alphabet.\r\n     * @return bytes representing the decoded value.\r\n     */\r\n    decodeStringToByteArray(input, webSafe) {\r\n        this.init_();\r\n        const charToByteMap = webSafe\r\n            ? this.charToByteMapWebSafe_\r\n            : this.charToByteMap_;\r\n        const output = [];\r\n        for (let i = 0; i < input.length;) {\r\n            const byte1 = charToByteMap[input.charAt(i++)];\r\n            const haveByte2 = i < input.length;\r\n            const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\r\n            ++i;\r\n            const haveByte3 = i < input.length;\r\n            const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\r\n            ++i;\r\n            const haveByte4 = i < input.length;\r\n            const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\r\n            ++i;\r\n            if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {\r\n                throw Error();\r\n            }\r\n            const outByte1 = (byte1 << 2) | (byte2 >> 4);\r\n            output.push(outByte1);\r\n            if (byte3 !== 64) {\r\n                const outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);\r\n                output.push(outByte2);\r\n                if (byte4 !== 64) {\r\n                    const outByte3 = ((byte3 << 6) & 0xc0) | byte4;\r\n                    output.push(outByte3);\r\n                }\r\n            }\r\n        }\r\n        return output;\r\n    },\r\n    /**\r\n     * Lazy static initialization function. Called before\r\n     * accessing any of the static map variables.\r\n     * @private\r\n     */\r\n    init_() {\r\n        if (!this.byteToCharMap_) {\r\n            this.byteToCharMap_ = {};\r\n            this.charToByteMap_ = {};\r\n            this.byteToCharMapWebSafe_ = {};\r\n            this.charToByteMapWebSafe_ = {};\r\n            // We want quick mappings back and forth, so we precompute two maps.\r\n            for (let i = 0; i < this.ENCODED_VALS.length; i++) {\r\n                this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\r\n                this.charToByteMap_[this.byteToCharMap_[i]] = i;\r\n                this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\r\n                this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;\r\n                // Be forgiving when decoding and correctly decode both encodings.\r\n                if (i >= this.ENCODED_VALS_BASE.length) {\r\n                    this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\r\n                    this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n/**\r\n * URL-safe base64 encoding\r\n */\r\nconst base64Encode = function (str) {\r\n    const utf8Bytes = stringToByteArray$1(str);\r\n    return base64.encodeByteArray(utf8Bytes, true);\r\n};\r\n/**\r\n * URL-safe base64 encoding (without \".\" padding in the end).\r\n * e.g. Used in JSON Web Token (JWT) parts.\r\n */\r\nconst base64urlEncodeWithoutPadding = function (str) {\r\n    // Use base64url encoding and remove padding in the end (dot characters).\r\n    return base64Encode(str).replace(/\\./g, '');\r\n};\r\n/**\r\n * URL-safe base64 decoding\r\n *\r\n * NOTE: DO NOT use the global atob() function - it does NOT support the\r\n * base64Url variant encoding.\r\n *\r\n * @param str To be decoded\r\n * @return Decoded result, if possible\r\n */\r\nconst base64Decode = function (str) {\r\n    try {\r\n        return base64.decodeString(str, true);\r\n    }\r\n    catch (e) {\r\n        console.error('base64Decode failed: ', e);\r\n    }\r\n    return null;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Do a deep-copy of basic JavaScript Objects or Arrays.\r\n */\r\nfunction deepCopy(value) {\r\n    return deepExtend(undefined, value);\r\n}\r\n/**\r\n * Copy properties from source to target (recursively allows extension\r\n * of Objects and Arrays).  Scalar values in the target are over-written.\r\n * If target is undefined, an object of the appropriate type will be created\r\n * (and returned).\r\n *\r\n * We recursively copy all child properties of plain Objects in the source- so\r\n * that namespace- like dictionaries are merged.\r\n *\r\n * Note that the target can be a function, in which case the properties in\r\n * the source Object are copied onto it as static properties of the Function.\r\n *\r\n * Note: we don't merge __proto__ to prevent prototype pollution\r\n */\r\nfunction deepExtend(target, source) {\r\n    if (!(source instanceof Object)) {\r\n        return source;\r\n    }\r\n    switch (source.constructor) {\r\n        case Date:\r\n            // Treat Dates like scalars; if the target date object had any child\r\n            // properties - they will be lost!\r\n            const dateValue = source;\r\n            return new Date(dateValue.getTime());\r\n        case Object:\r\n            if (target === undefined) {\r\n                target = {};\r\n            }\r\n            break;\r\n        case Array:\r\n            // Always copy the array source and overwrite the target.\r\n            target = [];\r\n            break;\r\n        default:\r\n            // Not a plain Object - treat it as a scalar.\r\n            return source;\r\n    }\r\n    for (const prop in source) {\r\n        // use isValidKey to guard against prototype pollution. See https://snyk.io/vuln/SNYK-JS-LODASH-450202\r\n        if (!source.hasOwnProperty(prop) || !isValidKey(prop)) {\r\n            continue;\r\n        }\r\n        target[prop] = deepExtend(target[prop], source[prop]);\r\n    }\r\n    return target;\r\n}\r\nfunction isValidKey(key) {\r\n    return key !== '__proto__';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Deferred {\r\n    constructor() {\r\n        this.reject = () => { };\r\n        this.resolve = () => { };\r\n        this.promise = new Promise((resolve, reject) => {\r\n            this.resolve = resolve;\r\n            this.reject = reject;\r\n        });\r\n    }\r\n    /**\r\n     * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around\r\n     * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback\r\n     * and returns a node-style callback which will resolve or reject the Deferred's promise.\r\n     */\r\n    wrapCallback(callback) {\r\n        return (error, value) => {\r\n            if (error) {\r\n                this.reject(error);\r\n            }\r\n            else {\r\n                this.resolve(value);\r\n            }\r\n            if (typeof callback === 'function') {\r\n                // Attaching noop handler just in case developer wasn't expecting\r\n                // promises\r\n                this.promise.catch(() => { });\r\n                // Some of our callbacks don't expect a value and our own tests\r\n                // assert that the parameter length is 1\r\n                if (callback.length === 1) {\r\n                    callback(error);\r\n                }\r\n                else {\r\n                    callback(error, value);\r\n                }\r\n            }\r\n        };\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction createMockUserToken(token, projectId) {\r\n    if (token.uid) {\r\n        throw new Error('The \"uid\" field is no longer supported by mockUserToken. Please use \"sub\" instead for Firebase Auth User ID.');\r\n    }\r\n    // Unsecured JWTs use \"none\" as the algorithm.\r\n    const header = {\r\n        alg: 'none',\r\n        type: 'JWT'\r\n    };\r\n    const project = projectId || 'demo-project';\r\n    const iat = token.iat || 0;\r\n    const sub = token.sub || token.user_id;\r\n    if (!sub) {\r\n        throw new Error(\"mockUserToken must contain 'sub' or 'user_id' field!\");\r\n    }\r\n    const payload = Object.assign({ \r\n        // Set all required fields to decent defaults\r\n        iss: `https://securetoken.google.com/${project}`, aud: project, iat, exp: iat + 3600, auth_time: iat, sub, user_id: sub, firebase: {\r\n            sign_in_provider: 'custom',\r\n            identities: {}\r\n        } }, token);\r\n    // Unsecured JWTs use the empty string as a signature.\r\n    const signature = '';\r\n    return [\r\n        base64urlEncodeWithoutPadding(JSON.stringify(header)),\r\n        base64urlEncodeWithoutPadding(JSON.stringify(payload)),\r\n        signature\r\n    ].join('.');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns navigator.userAgent string or '' if it's not defined.\r\n * @return user agent string\r\n */\r\nfunction getUA() {\r\n    if (typeof navigator !== 'undefined' &&\r\n        typeof navigator['userAgent'] === 'string') {\r\n        return navigator['userAgent'];\r\n    }\r\n    else {\r\n        return '';\r\n    }\r\n}\r\n/**\r\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\r\n *\r\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap\r\n * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally\r\n * wait for a callback.\r\n */\r\nfunction isMobileCordova() {\r\n    return (typeof window !== 'undefined' &&\r\n        // @ts-ignore Setting up an broadly applicable index signature for Window\r\n        // just to deal with this case would probably be a bad idea.\r\n        !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&\r\n        /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA()));\r\n}\r\n/**\r\n * Detect Node.js.\r\n *\r\n * @return true if Node.js environment is detected.\r\n */\r\n// Node detection logic from: https://github.com/iliakan/detect-node/\r\nfunction isNode() {\r\n    try {\r\n        return (Object.prototype.toString.call(global.process) === '[object process]');\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Detect Browser Environment\r\n */\r\nfunction isBrowser() {\r\n    return typeof self === 'object' && self.self === self;\r\n}\r\nfunction isBrowserExtension() {\r\n    const runtime = typeof chrome === 'object'\r\n        ? chrome.runtime\r\n        : typeof browser === 'object'\r\n            ? browser.runtime\r\n            : undefined;\r\n    return typeof runtime === 'object' && runtime.id !== undefined;\r\n}\r\n/**\r\n * Detect React Native.\r\n *\r\n * @return true if ReactNative environment is detected.\r\n */\r\nfunction isReactNative() {\r\n    return (typeof navigator === 'object' && navigator['product'] === 'ReactNative');\r\n}\r\n/** Detects Electron apps. */\r\nfunction isElectron() {\r\n    return getUA().indexOf('Electron/') >= 0;\r\n}\r\n/** Detects Internet Explorer. */\r\nfunction isIE() {\r\n    const ua = getUA();\r\n    return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;\r\n}\r\n/** Detects Universal Windows Platform apps. */\r\nfunction isUWP() {\r\n    return getUA().indexOf('MSAppHost/') >= 0;\r\n}\r\n/**\r\n * Detect whether the current SDK build is the Node version.\r\n *\r\n * @return true if it's the Node SDK build.\r\n */\r\nfunction isNodeSdk() {\r\n    return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;\r\n}\r\n/** Returns true if we are running in Safari. */\r\nfunction isSafari() {\r\n    return (!isNode() &&\r\n        navigator.userAgent.includes('Safari') &&\r\n        !navigator.userAgent.includes('Chrome'));\r\n}\r\n/**\r\n * This method checks if indexedDB is supported by current browser/service worker context\r\n * @return true if indexedDB is supported by current browser/service worker context\r\n */\r\nfunction isIndexedDBAvailable() {\r\n    return typeof indexedDB === 'object';\r\n}\r\n/**\r\n * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject\r\n * if errors occur during the database open operation.\r\n *\r\n * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox\r\n * private browsing)\r\n */\r\nfunction validateIndexedDBOpenable() {\r\n    return new Promise((resolve, reject) => {\r\n        try {\r\n            let preExist = true;\r\n            const DB_CHECK_NAME = 'validate-browser-context-for-indexeddb-analytics-module';\r\n            const request = self.indexedDB.open(DB_CHECK_NAME);\r\n            request.onsuccess = () => {\r\n                request.result.close();\r\n                // delete database only when it doesn't pre-exist\r\n                if (!preExist) {\r\n                    self.indexedDB.deleteDatabase(DB_CHECK_NAME);\r\n                }\r\n                resolve(true);\r\n            };\r\n            request.onupgradeneeded = () => {\r\n                preExist = false;\r\n            };\r\n            request.onerror = () => {\r\n                var _a;\r\n                reject(((_a = request.error) === null || _a === void 0 ? void 0 : _a.message) || '');\r\n            };\r\n        }\r\n        catch (error) {\r\n            reject(error);\r\n        }\r\n    });\r\n}\r\n/**\r\n *\r\n * This method checks whether cookie is enabled within current browser\r\n * @return true if cookie is enabled within current browser\r\n */\r\nfunction areCookiesEnabled() {\r\n    if (typeof navigator === 'undefined' || !navigator.cookieEnabled) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Polyfill for `globalThis` object.\r\n * @returns the `globalThis` object for the given environment.\r\n */\r\nfunction getGlobal() {\r\n    if (typeof self !== 'undefined') {\r\n        return self;\r\n    }\r\n    if (typeof window !== 'undefined') {\r\n        return window;\r\n    }\r\n    if (typeof global !== 'undefined') {\r\n        return global;\r\n    }\r\n    throw new Error('Unable to locate global object.');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Standardized Firebase Error.\r\n *\r\n * Usage:\r\n *\r\n *   // Typescript string literals for type-safe codes\r\n *   type Err =\r\n *     'unknown' |\r\n *     'object-not-found'\r\n *     ;\r\n *\r\n *   // Closure enum for type-safe error codes\r\n *   // at-enum {string}\r\n *   var Err = {\r\n *     UNKNOWN: 'unknown',\r\n *     OBJECT_NOT_FOUND: 'object-not-found',\r\n *   }\r\n *\r\n *   let errors: Map<Err, string> = {\r\n *     'generic-error': \"Unknown error\",\r\n *     'file-not-found': \"Could not find file: {$file}\",\r\n *   };\r\n *\r\n *   // Type-safe function - must pass a valid error code as param.\r\n *   let error = new ErrorFactory<Err>('service', 'Service', errors);\r\n *\r\n *   ...\r\n *   throw error.create(Err.GENERIC);\r\n *   ...\r\n *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});\r\n *   ...\r\n *   // Service: Could not file file: foo.txt (service/file-not-found).\r\n *\r\n *   catch (e) {\r\n *     assert(e.message === \"Could not find file: foo.txt.\");\r\n *     if ((e as FirebaseError)?.code === 'service/file-not-found') {\r\n *       console.log(\"Could not read file: \" + e['file']);\r\n *     }\r\n *   }\r\n */\r\nconst ERROR_NAME = 'FirebaseError';\r\n// Based on code from:\r\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\r\nclass FirebaseError extends Error {\r\n    constructor(\r\n    /** The error code for this error. */\r\n    code, message, \r\n    /** Custom data for this error. */\r\n    customData) {\r\n        super(message);\r\n        this.code = code;\r\n        this.customData = customData;\r\n        /** The custom name for all FirebaseErrors. */\r\n        this.name = ERROR_NAME;\r\n        // Fix For ES5\r\n        // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\n        Object.setPrototypeOf(this, FirebaseError.prototype);\r\n        // Maintains proper stack trace for where our error was thrown.\r\n        // Only available on V8.\r\n        if (Error.captureStackTrace) {\r\n            Error.captureStackTrace(this, ErrorFactory.prototype.create);\r\n        }\r\n    }\r\n}\r\nclass ErrorFactory {\r\n    constructor(service, serviceName, errors) {\r\n        this.service = service;\r\n        this.serviceName = serviceName;\r\n        this.errors = errors;\r\n    }\r\n    create(code, ...data) {\r\n        const customData = data[0] || {};\r\n        const fullCode = `${this.service}/${code}`;\r\n        const template = this.errors[code];\r\n        const message = template ? replaceTemplate(template, customData) : 'Error';\r\n        // Service Name: Error message (service/code).\r\n        const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;\r\n        const error = new FirebaseError(fullCode, fullMessage, customData);\r\n        return error;\r\n    }\r\n}\r\nfunction replaceTemplate(template, data) {\r\n    return template.replace(PATTERN, (_, key) => {\r\n        const value = data[key];\r\n        return value != null ? String(value) : `<${key}?>`;\r\n    });\r\n}\r\nconst PATTERN = /\\{\\$([^}]+)}/g;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Evaluates a JSON string into a javascript object.\r\n *\r\n * @param {string} str A string containing JSON.\r\n * @return {*} The javascript object representing the specified JSON.\r\n */\r\nfunction jsonEval(str) {\r\n    return JSON.parse(str);\r\n}\r\n/**\r\n * Returns JSON representing a javascript object.\r\n * @param {*} data Javascript object to be stringified.\r\n * @return {string} The JSON contents of the object.\r\n */\r\nfunction stringify(data) {\r\n    return JSON.stringify(data);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Decodes a Firebase auth. token into constituent parts.\r\n *\r\n * Notes:\r\n * - May return with invalid / incomplete claims if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst decode = function (token) {\r\n    let header = {}, claims = {}, data = {}, signature = '';\r\n    try {\r\n        const parts = token.split('.');\r\n        header = jsonEval(base64Decode(parts[0]) || '');\r\n        claims = jsonEval(base64Decode(parts[1]) || '');\r\n        signature = parts[2];\r\n        data = claims['d'] || {};\r\n        delete claims['d'];\r\n    }\r\n    catch (e) { }\r\n    return {\r\n        header,\r\n        claims,\r\n        data,\r\n        signature\r\n    };\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the\r\n * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst isValidTimestamp = function (token) {\r\n    const claims = decode(token).claims;\r\n    const now = Math.floor(new Date().getTime() / 1000);\r\n    let validSince = 0, validUntil = 0;\r\n    if (typeof claims === 'object') {\r\n        if (claims.hasOwnProperty('nbf')) {\r\n            validSince = claims['nbf'];\r\n        }\r\n        else if (claims.hasOwnProperty('iat')) {\r\n            validSince = claims['iat'];\r\n        }\r\n        if (claims.hasOwnProperty('exp')) {\r\n            validUntil = claims['exp'];\r\n        }\r\n        else {\r\n            // token will expire after 24h by default\r\n            validUntil = validSince + 86400;\r\n        }\r\n    }\r\n    return (!!now &&\r\n        !!validSince &&\r\n        !!validUntil &&\r\n        now >= validSince &&\r\n        now <= validUntil);\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.\r\n *\r\n * Notes:\r\n * - May return null if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst issuedAtTime = function (token) {\r\n    const claims = decode(token).claims;\r\n    if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {\r\n        return claims['iat'];\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst isValidFormat = function (token) {\r\n    const decoded = decode(token), claims = decoded.claims;\r\n    return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');\r\n};\r\n/**\r\n * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst isAdmin = function (token) {\r\n    const claims = decode(token).claims;\r\n    return typeof claims === 'object' && claims['admin'] === true;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction contains(obj, key) {\r\n    return Object.prototype.hasOwnProperty.call(obj, key);\r\n}\r\nfunction safeGet(obj, key) {\r\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n        return obj[key];\r\n    }\r\n    else {\r\n        return undefined;\r\n    }\r\n}\r\nfunction isEmpty(obj) {\r\n    for (const key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction map(obj, fn, contextObj) {\r\n    const res = {};\r\n    for (const key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            res[key] = fn.call(contextObj, obj[key], key, obj);\r\n        }\r\n    }\r\n    return res;\r\n}\r\n/**\r\n * Deep equal two objects. Support Arrays and Objects.\r\n */\r\nfunction deepEqual(a, b) {\r\n    if (a === b) {\r\n        return true;\r\n    }\r\n    const aKeys = Object.keys(a);\r\n    const bKeys = Object.keys(b);\r\n    for (const k of aKeys) {\r\n        if (!bKeys.includes(k)) {\r\n            return false;\r\n        }\r\n        const aProp = a[k];\r\n        const bProp = b[k];\r\n        if (isObject(aProp) && isObject(bProp)) {\r\n            if (!deepEqual(aProp, bProp)) {\r\n                return false;\r\n            }\r\n        }\r\n        else if (aProp !== bProp) {\r\n            return false;\r\n        }\r\n    }\r\n    for (const k of bKeys) {\r\n        if (!aKeys.includes(k)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction isObject(thing) {\r\n    return thing !== null && typeof thing === 'object';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Rejects if the given promise doesn't resolve in timeInMS milliseconds.\r\n * @internal\r\n */\r\nfunction promiseWithTimeout(promise, timeInMS = 2000) {\r\n    const deferredPromise = new Deferred();\r\n    setTimeout(() => deferredPromise.reject('timeout!'), timeInMS);\r\n    promise.then(deferredPromise.resolve, deferredPromise.reject);\r\n    return deferredPromise.promise;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a\r\n * params object (e.g. {arg: 'val', arg2: 'val2'})\r\n * Note: You must prepend it with ? when adding it to a URL.\r\n */\r\nfunction querystring(querystringParams) {\r\n    const params = [];\r\n    for (const [key, value] of Object.entries(querystringParams)) {\r\n        if (Array.isArray(value)) {\r\n            value.forEach(arrayVal => {\r\n                params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));\r\n            });\r\n        }\r\n        else {\r\n            params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\r\n        }\r\n    }\r\n    return params.length ? '&' + params.join('&') : '';\r\n}\r\n/**\r\n * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object\r\n * (e.g. {arg: 'val', arg2: 'val2'})\r\n */\r\nfunction querystringDecode(querystring) {\r\n    const obj = {};\r\n    const tokens = querystring.replace(/^\\?/, '').split('&');\r\n    tokens.forEach(token => {\r\n        if (token) {\r\n            const [key, value] = token.split('=');\r\n            obj[decodeURIComponent(key)] = decodeURIComponent(value);\r\n        }\r\n    });\r\n    return obj;\r\n}\r\n/**\r\n * Extract the query string part of a URL, including the leading question mark (if present).\r\n */\r\nfunction extractQuerystring(url) {\r\n    const queryStart = url.indexOf('?');\r\n    if (!queryStart) {\r\n        return '';\r\n    }\r\n    const fragmentStart = url.indexOf('#', queryStart);\r\n    return url.substring(queryStart, fragmentStart > 0 ? fragmentStart : undefined);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview SHA-1 cryptographic hash.\r\n * Variable names follow the notation in FIPS PUB 180-3:\r\n * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.\r\n *\r\n * Usage:\r\n *   var sha1 = new sha1();\r\n *   sha1.update(bytes);\r\n *   var hash = sha1.digest();\r\n *\r\n * Performance:\r\n *   Chrome 23:   ~400 Mbit/s\r\n *   Firefox 16:  ~250 Mbit/s\r\n *\r\n */\r\n/**\r\n * SHA-1 cryptographic hash constructor.\r\n *\r\n * The properties declared here are discussed in the above algorithm document.\r\n * @constructor\r\n * @final\r\n * @struct\r\n */\r\nclass Sha1 {\r\n    constructor() {\r\n        /**\r\n         * Holds the previous values of accumulated variables a-e in the compress_\r\n         * function.\r\n         * @private\r\n         */\r\n        this.chain_ = [];\r\n        /**\r\n         * A buffer holding the partially computed hash result.\r\n         * @private\r\n         */\r\n        this.buf_ = [];\r\n        /**\r\n         * An array of 80 bytes, each a part of the message to be hashed.  Referred to\r\n         * as the message schedule in the docs.\r\n         * @private\r\n         */\r\n        this.W_ = [];\r\n        /**\r\n         * Contains data needed to pad messages less than 64 bytes.\r\n         * @private\r\n         */\r\n        this.pad_ = [];\r\n        /**\r\n         * @private {number}\r\n         */\r\n        this.inbuf_ = 0;\r\n        /**\r\n         * @private {number}\r\n         */\r\n        this.total_ = 0;\r\n        this.blockSize = 512 / 8;\r\n        this.pad_[0] = 128;\r\n        for (let i = 1; i < this.blockSize; ++i) {\r\n            this.pad_[i] = 0;\r\n        }\r\n        this.reset();\r\n    }\r\n    reset() {\r\n        this.chain_[0] = 0x67452301;\r\n        this.chain_[1] = 0xefcdab89;\r\n        this.chain_[2] = 0x98badcfe;\r\n        this.chain_[3] = 0x10325476;\r\n        this.chain_[4] = 0xc3d2e1f0;\r\n        this.inbuf_ = 0;\r\n        this.total_ = 0;\r\n    }\r\n    /**\r\n     * Internal compress helper function.\r\n     * @param buf Block to compress.\r\n     * @param offset Offset of the block in the buffer.\r\n     * @private\r\n     */\r\n    compress_(buf, offset) {\r\n        if (!offset) {\r\n            offset = 0;\r\n        }\r\n        const W = this.W_;\r\n        // get 16 big endian words\r\n        if (typeof buf === 'string') {\r\n            for (let i = 0; i < 16; i++) {\r\n                // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS\r\n                // have a bug that turns the post-increment ++ operator into pre-increment\r\n                // during JIT compilation.  We have code that depends heavily on SHA-1 for\r\n                // correctness and which is affected by this bug, so I've removed all uses\r\n                // of post-increment ++ in which the result value is used.  We can revert\r\n                // this change once the Safari bug\r\n                // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and\r\n                // most clients have been updated.\r\n                W[i] =\r\n                    (buf.charCodeAt(offset) << 24) |\r\n                        (buf.charCodeAt(offset + 1) << 16) |\r\n                        (buf.charCodeAt(offset + 2) << 8) |\r\n                        buf.charCodeAt(offset + 3);\r\n                offset += 4;\r\n            }\r\n        }\r\n        else {\r\n            for (let i = 0; i < 16; i++) {\r\n                W[i] =\r\n                    (buf[offset] << 24) |\r\n                        (buf[offset + 1] << 16) |\r\n                        (buf[offset + 2] << 8) |\r\n                        buf[offset + 3];\r\n                offset += 4;\r\n            }\r\n        }\r\n        // expand to 80 words\r\n        for (let i = 16; i < 80; i++) {\r\n            const t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\r\n            W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;\r\n        }\r\n        let a = this.chain_[0];\r\n        let b = this.chain_[1];\r\n        let c = this.chain_[2];\r\n        let d = this.chain_[3];\r\n        let e = this.chain_[4];\r\n        let f, k;\r\n        // TODO(user): Try to unroll this loop to speed up the computation.\r\n        for (let i = 0; i < 80; i++) {\r\n            if (i < 40) {\r\n                if (i < 20) {\r\n                    f = d ^ (b & (c ^ d));\r\n                    k = 0x5a827999;\r\n                }\r\n                else {\r\n                    f = b ^ c ^ d;\r\n                    k = 0x6ed9eba1;\r\n                }\r\n            }\r\n            else {\r\n                if (i < 60) {\r\n                    f = (b & c) | (d & (b | c));\r\n                    k = 0x8f1bbcdc;\r\n                }\r\n                else {\r\n                    f = b ^ c ^ d;\r\n                    k = 0xca62c1d6;\r\n                }\r\n            }\r\n            const t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;\r\n            e = d;\r\n            d = c;\r\n            c = ((b << 30) | (b >>> 2)) & 0xffffffff;\r\n            b = a;\r\n            a = t;\r\n        }\r\n        this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;\r\n        this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;\r\n        this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;\r\n        this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;\r\n        this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;\r\n    }\r\n    update(bytes, length) {\r\n        // TODO(johnlenz): tighten the function signature and remove this check\r\n        if (bytes == null) {\r\n            return;\r\n        }\r\n        if (length === undefined) {\r\n            length = bytes.length;\r\n        }\r\n        const lengthMinusBlock = length - this.blockSize;\r\n        let n = 0;\r\n        // Using local instead of member variables gives ~5% speedup on Firefox 16.\r\n        const buf = this.buf_;\r\n        let inbuf = this.inbuf_;\r\n        // The outer while loop should execute at most twice.\r\n        while (n < length) {\r\n            // When we have no data in the block to top up, we can directly process the\r\n            // input buffer (assuming it contains sufficient data). This gives ~25%\r\n            // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that\r\n            // the data is provided in large chunks (or in multiples of 64 bytes).\r\n            if (inbuf === 0) {\r\n                while (n <= lengthMinusBlock) {\r\n                    this.compress_(bytes, n);\r\n                    n += this.blockSize;\r\n                }\r\n            }\r\n            if (typeof bytes === 'string') {\r\n                while (n < length) {\r\n                    buf[inbuf] = bytes.charCodeAt(n);\r\n                    ++inbuf;\r\n                    ++n;\r\n                    if (inbuf === this.blockSize) {\r\n                        this.compress_(buf);\r\n                        inbuf = 0;\r\n                        // Jump to the outer loop so we use the full-block optimization.\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                while (n < length) {\r\n                    buf[inbuf] = bytes[n];\r\n                    ++inbuf;\r\n                    ++n;\r\n                    if (inbuf === this.blockSize) {\r\n                        this.compress_(buf);\r\n                        inbuf = 0;\r\n                        // Jump to the outer loop so we use the full-block optimization.\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.inbuf_ = inbuf;\r\n        this.total_ += length;\r\n    }\r\n    /** @override */\r\n    digest() {\r\n        const digest = [];\r\n        let totalBits = this.total_ * 8;\r\n        // Add pad 0x80 0x00*.\r\n        if (this.inbuf_ < 56) {\r\n            this.update(this.pad_, 56 - this.inbuf_);\r\n        }\r\n        else {\r\n            this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));\r\n        }\r\n        // Add # bits.\r\n        for (let i = this.blockSize - 1; i >= 56; i--) {\r\n            this.buf_[i] = totalBits & 255;\r\n            totalBits /= 256; // Don't use bit-shifting here!\r\n        }\r\n        this.compress_(this.buf_);\r\n        let n = 0;\r\n        for (let i = 0; i < 5; i++) {\r\n            for (let j = 24; j >= 0; j -= 8) {\r\n                digest[n] = (this.chain_[i] >> j) & 255;\r\n                ++n;\r\n            }\r\n        }\r\n        return digest;\r\n    }\r\n}\n\n/**\r\n * Helper to make a Subscribe function (just like Promise helps make a\r\n * Thenable).\r\n *\r\n * @param executor Function which can make calls to a single Observer\r\n *     as a proxy.\r\n * @param onNoObservers Callback when count of Observers goes to zero.\r\n */\r\nfunction createSubscribe(executor, onNoObservers) {\r\n    const proxy = new ObserverProxy(executor, onNoObservers);\r\n    return proxy.subscribe.bind(proxy);\r\n}\r\n/**\r\n * Implement fan-out for any number of Observers attached via a subscribe\r\n * function.\r\n */\r\nclass ObserverProxy {\r\n    /**\r\n     * @param executor Function which can make calls to a single Observer\r\n     *     as a proxy.\r\n     * @param onNoObservers Callback when count of Observers goes to zero.\r\n     */\r\n    constructor(executor, onNoObservers) {\r\n        this.observers = [];\r\n        this.unsubscribes = [];\r\n        this.observerCount = 0;\r\n        // Micro-task scheduling by calling task.then().\r\n        this.task = Promise.resolve();\r\n        this.finalized = false;\r\n        this.onNoObservers = onNoObservers;\r\n        // Call the executor asynchronously so subscribers that are called\r\n        // synchronously after the creation of the subscribe function\r\n        // can still receive the very first value generated in the executor.\r\n        this.task\r\n            .then(() => {\r\n            executor(this);\r\n        })\r\n            .catch(e => {\r\n            this.error(e);\r\n        });\r\n    }\r\n    next(value) {\r\n        this.forEachObserver((observer) => {\r\n            observer.next(value);\r\n        });\r\n    }\r\n    error(error) {\r\n        this.forEachObserver((observer) => {\r\n            observer.error(error);\r\n        });\r\n        this.close(error);\r\n    }\r\n    complete() {\r\n        this.forEachObserver((observer) => {\r\n            observer.complete();\r\n        });\r\n        this.close();\r\n    }\r\n    /**\r\n     * Subscribe function that can be used to add an Observer to the fan-out list.\r\n     *\r\n     * - We require that no event is sent to a subscriber sychronously to their\r\n     *   call to subscribe().\r\n     */\r\n    subscribe(nextOrObserver, error, complete) {\r\n        let observer;\r\n        if (nextOrObserver === undefined &&\r\n            error === undefined &&\r\n            complete === undefined) {\r\n            throw new Error('Missing Observer.');\r\n        }\r\n        // Assemble an Observer object when passed as callback functions.\r\n        if (implementsAnyMethods(nextOrObserver, [\r\n            'next',\r\n            'error',\r\n            'complete'\r\n        ])) {\r\n            observer = nextOrObserver;\r\n        }\r\n        else {\r\n            observer = {\r\n                next: nextOrObserver,\r\n                error,\r\n                complete\r\n            };\r\n        }\r\n        if (observer.next === undefined) {\r\n            observer.next = noop;\r\n        }\r\n        if (observer.error === undefined) {\r\n            observer.error = noop;\r\n        }\r\n        if (observer.complete === undefined) {\r\n            observer.complete = noop;\r\n        }\r\n        const unsub = this.unsubscribeOne.bind(this, this.observers.length);\r\n        // Attempt to subscribe to a terminated Observable - we\r\n        // just respond to the Observer with the final error or complete\r\n        // event.\r\n        if (this.finalized) {\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            this.task.then(() => {\r\n                try {\r\n                    if (this.finalError) {\r\n                        observer.error(this.finalError);\r\n                    }\r\n                    else {\r\n                        observer.complete();\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // nothing\r\n                }\r\n                return;\r\n            });\r\n        }\r\n        this.observers.push(observer);\r\n        return unsub;\r\n    }\r\n    // Unsubscribe is synchronous - we guarantee that no events are sent to\r\n    // any unsubscribed Observer.\r\n    unsubscribeOne(i) {\r\n        if (this.observers === undefined || this.observers[i] === undefined) {\r\n            return;\r\n        }\r\n        delete this.observers[i];\r\n        this.observerCount -= 1;\r\n        if (this.observerCount === 0 && this.onNoObservers !== undefined) {\r\n            this.onNoObservers(this);\r\n        }\r\n    }\r\n    forEachObserver(fn) {\r\n        if (this.finalized) {\r\n            // Already closed by previous event....just eat the additional values.\r\n            return;\r\n        }\r\n        // Since sendOne calls asynchronously - there is no chance that\r\n        // this.observers will become undefined.\r\n        for (let i = 0; i < this.observers.length; i++) {\r\n            this.sendOne(i, fn);\r\n        }\r\n    }\r\n    // Call the Observer via one of it's callback function. We are careful to\r\n    // confirm that the observe has not been unsubscribed since this asynchronous\r\n    // function had been queued.\r\n    sendOne(i, fn) {\r\n        // Execute the callback asynchronously\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.task.then(() => {\r\n            if (this.observers !== undefined && this.observers[i] !== undefined) {\r\n                try {\r\n                    fn(this.observers[i]);\r\n                }\r\n                catch (e) {\r\n                    // Ignore exceptions raised in Observers or missing methods of an\r\n                    // Observer.\r\n                    // Log error to console. b/31404806\r\n                    if (typeof console !== 'undefined' && console.error) {\r\n                        console.error(e);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    close(err) {\r\n        if (this.finalized) {\r\n            return;\r\n        }\r\n        this.finalized = true;\r\n        if (err !== undefined) {\r\n            this.finalError = err;\r\n        }\r\n        // Proxy is no longer needed - garbage collect references\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.task.then(() => {\r\n            this.observers = undefined;\r\n            this.onNoObservers = undefined;\r\n        });\r\n    }\r\n}\r\n/** Turn synchronous function into one called asynchronously. */\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nfunction async(fn, onError) {\r\n    return (...args) => {\r\n        Promise.resolve(true)\r\n            .then(() => {\r\n            fn(...args);\r\n        })\r\n            .catch((error) => {\r\n            if (onError) {\r\n                onError(error);\r\n            }\r\n        });\r\n    };\r\n}\r\n/**\r\n * Return true if the object passed in implements any of the named methods.\r\n */\r\nfunction implementsAnyMethods(obj, methods) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return false;\r\n    }\r\n    for (const method of methods) {\r\n        if (method in obj && typeof obj[method] === 'function') {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction noop() {\r\n    // do nothing\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Check to make sure the appropriate number of arguments are provided for a public function.\r\n * Throws an error if it fails.\r\n *\r\n * @param fnName The function name\r\n * @param minCount The minimum number of arguments to allow for the function call\r\n * @param maxCount The maximum number of argument to allow for the function call\r\n * @param argCount The actual number of arguments provided.\r\n */\r\nconst validateArgCount = function (fnName, minCount, maxCount, argCount) {\r\n    let argError;\r\n    if (argCount < minCount) {\r\n        argError = 'at least ' + minCount;\r\n    }\r\n    else if (argCount > maxCount) {\r\n        argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;\r\n    }\r\n    if (argError) {\r\n        const error = fnName +\r\n            ' failed: Was called with ' +\r\n            argCount +\r\n            (argCount === 1 ? ' argument.' : ' arguments.') +\r\n            ' Expects ' +\r\n            argError +\r\n            '.';\r\n        throw new Error(error);\r\n    }\r\n};\r\n/**\r\n * Generates a string to prefix an error message about failed argument validation\r\n *\r\n * @param fnName The function name\r\n * @param argName The name of the argument\r\n * @return The prefix to add to the error thrown for validation.\r\n */\r\nfunction errorPrefix(fnName, argName) {\r\n    return `${fnName} failed: ${argName} argument `;\r\n}\r\n/**\r\n * @param fnName\r\n * @param argumentNumber\r\n * @param namespace\r\n * @param optional\r\n */\r\nfunction validateNamespace(fnName, namespace, optional) {\r\n    if (optional && !namespace) {\r\n        return;\r\n    }\r\n    if (typeof namespace !== 'string') {\r\n        //TODO: I should do more validation here. We only allow certain chars in namespaces.\r\n        throw new Error(errorPrefix(fnName, 'namespace') + 'must be a valid firebase namespace.');\r\n    }\r\n}\r\nfunction validateCallback(fnName, argumentName, \r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\ncallback, optional) {\r\n    if (optional && !callback) {\r\n        return;\r\n    }\r\n    if (typeof callback !== 'function') {\r\n        throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid function.');\r\n    }\r\n}\r\nfunction validateContextObject(fnName, argumentName, context, optional) {\r\n    if (optional && !context) {\r\n        return;\r\n    }\r\n    if (typeof context !== 'object' || context === null) {\r\n        throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid context object.');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they\r\n// automatically replaced '\\r\\n' with '\\n', and they didn't handle surrogate pairs,\r\n// so it's been modified.\r\n// Note that not all Unicode characters appear as single characters in JavaScript strings.\r\n// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters\r\n// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first\r\n// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate\r\n// pair).\r\n// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3\r\n/**\r\n * @param {string} str\r\n * @return {Array}\r\n */\r\nconst stringToByteArray = function (str) {\r\n    const out = [];\r\n    let p = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        let c = str.charCodeAt(i);\r\n        // Is this the lead surrogate in a surrogate pair?\r\n        if (c >= 0xd800 && c <= 0xdbff) {\r\n            const high = c - 0xd800; // the high 10 bits.\r\n            i++;\r\n            assert(i < str.length, 'Surrogate pair missing trail surrogate.');\r\n            const low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.\r\n            c = 0x10000 + (high << 10) + low;\r\n        }\r\n        if (c < 128) {\r\n            out[p++] = c;\r\n        }\r\n        else if (c < 2048) {\r\n            out[p++] = (c >> 6) | 192;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else if (c < 65536) {\r\n            out[p++] = (c >> 12) | 224;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else {\r\n            out[p++] = (c >> 18) | 240;\r\n            out[p++] = ((c >> 12) & 63) | 128;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n    }\r\n    return out;\r\n};\r\n/**\r\n * Calculate length without actually converting; useful for doing cheaper validation.\r\n * @param {string} str\r\n * @return {number}\r\n */\r\nconst stringLength = function (str) {\r\n    let p = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        const c = str.charCodeAt(i);\r\n        if (c < 128) {\r\n            p++;\r\n        }\r\n        else if (c < 2048) {\r\n            p += 2;\r\n        }\r\n        else if (c >= 0xd800 && c <= 0xdbff) {\r\n            // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.\r\n            p += 4;\r\n            i++; // skip trail surrogate.\r\n        }\r\n        else {\r\n            p += 3;\r\n        }\r\n    }\r\n    return p;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Copied from https://stackoverflow.com/a/2117523\r\n * Generates a new uuid.\r\n * @public\r\n */\r\nconst uuidv4 = function () {\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\r\n        const r = (Math.random() * 16) | 0, v = c === 'x' ? r : (r & 0x3) | 0x8;\r\n        return v.toString(16);\r\n    });\r\n};\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The amount of milliseconds to exponentially increase.\r\n */\r\nconst DEFAULT_INTERVAL_MILLIS = 1000;\r\n/**\r\n * The factor to backoff by.\r\n * Should be a number greater than 1.\r\n */\r\nconst DEFAULT_BACKOFF_FACTOR = 2;\r\n/**\r\n * The maximum milliseconds to increase to.\r\n *\r\n * <p>Visible for testing\r\n */\r\nconst MAX_VALUE_MILLIS = 4 * 60 * 60 * 1000; // Four hours, like iOS and Android.\r\n/**\r\n * The percentage of backoff time to randomize by.\r\n * See\r\n * http://go/safe-client-behavior#step-1-determine-the-appropriate-retry-interval-to-handle-spike-traffic\r\n * for context.\r\n *\r\n * <p>Visible for testing\r\n */\r\nconst RANDOM_FACTOR = 0.5;\r\n/**\r\n * Based on the backoff method from\r\n * https://github.com/google/closure-library/blob/master/closure/goog/math/exponentialbackoff.js.\r\n * Extracted here so we don't need to pass metadata and a stateful ExponentialBackoff object around.\r\n */\r\nfunction calculateBackoffMillis(backoffCount, intervalMillis = DEFAULT_INTERVAL_MILLIS, backoffFactor = DEFAULT_BACKOFF_FACTOR) {\r\n    // Calculates an exponentially increasing value.\r\n    // Deviation: calculates value from count and a constant interval, so we only need to save value\r\n    // and count to restore state.\r\n    const currBaseValue = intervalMillis * Math.pow(backoffFactor, backoffCount);\r\n    // A random \"fuzz\" to avoid waves of retries.\r\n    // Deviation: randomFactor is required.\r\n    const randomWait = Math.round(\r\n    // A fraction of the backoff value to add/subtract.\r\n    // Deviation: changes multiplication order to improve readability.\r\n    RANDOM_FACTOR *\r\n        currBaseValue *\r\n        // A random float (rounded to int by Math.round above) in the range [-1, 1]. Determines\r\n        // if we add or subtract.\r\n        (Math.random() - 0.5) *\r\n        2);\r\n    // Limits backoff to max to avoid effectively permanent backoff.\r\n    return Math.min(MAX_VALUE_MILLIS, currBaseValue + randomWait);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provide English ordinal letters after a number\r\n */\r\nfunction ordinal(i) {\r\n    if (!Number.isFinite(i)) {\r\n        return `${i}`;\r\n    }\r\n    return i + indicator(i);\r\n}\r\nfunction indicator(i) {\r\n    i = Math.abs(i);\r\n    const cent = i % 100;\r\n    if (cent >= 10 && cent <= 20) {\r\n        return 'th';\r\n    }\r\n    const dec = i % 10;\r\n    if (dec === 1) {\r\n        return 'st';\r\n    }\r\n    if (dec === 2) {\r\n        return 'nd';\r\n    }\r\n    if (dec === 3) {\r\n        return 'rd';\r\n    }\r\n    return 'th';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction getModularInstance(service) {\r\n    if (service && service._delegate) {\r\n        return service._delegate;\r\n    }\r\n    else {\r\n        return service;\r\n    }\r\n}\n\nexport { CONSTANTS, Deferred, ErrorFactory, FirebaseError, MAX_VALUE_MILLIS, RANDOM_FACTOR, Sha1, areCookiesEnabled, assert, assertionError, async, base64, base64Decode, base64Encode, base64urlEncodeWithoutPadding, calculateBackoffMillis, contains, createMockUserToken, createSubscribe, decode, deepCopy, deepEqual, deepExtend, errorPrefix, extractQuerystring, getGlobal, getModularInstance, getUA, isAdmin, isBrowser, isBrowserExtension, isElectron, isEmpty, isIE, isIndexedDBAvailable, isMobileCordova, isNode, isNodeSdk, isReactNative, isSafari, isUWP, isValidFormat, isValidTimestamp, issuedAtTime, jsonEval, map, ordinal, promiseWithTimeout, querystring, querystringDecode, safeGet, stringLength, stringToByteArray, stringify, uuidv4, validateArgCount, validateCallback, validateContextObject, validateIndexedDBOpenable, validateNamespace };\n//# sourceMappingURL=index.esm2017.js.map\n","import { Deferred } from '@firebase/util';\n\n/**\r\n * Component for service name T, e.g. `auth`, `auth-internal`\r\n */\r\nclass Component {\r\n    /**\r\n     *\r\n     * @param name The public service name, e.g. app, auth, firestore, database\r\n     * @param instanceFactory Service factory responsible for creating the public interface\r\n     * @param type whether the service provided by the component is public or private\r\n     */\r\n    constructor(name, instanceFactory, type) {\r\n        this.name = name;\r\n        this.instanceFactory = instanceFactory;\r\n        this.type = type;\r\n        this.multipleInstances = false;\r\n        /**\r\n         * Properties to be added to the service namespace\r\n         */\r\n        this.serviceProps = {};\r\n        this.instantiationMode = \"LAZY\" /* LAZY */;\r\n        this.onInstanceCreated = null;\r\n    }\r\n    setInstantiationMode(mode) {\r\n        this.instantiationMode = mode;\r\n        return this;\r\n    }\r\n    setMultipleInstances(multipleInstances) {\r\n        this.multipleInstances = multipleInstances;\r\n        return this;\r\n    }\r\n    setServiceProps(props) {\r\n        this.serviceProps = props;\r\n        return this;\r\n    }\r\n    setInstanceCreatedCallback(callback) {\r\n        this.onInstanceCreated = callback;\r\n        return this;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\r\n * NameServiceMapping[T] is an alias for the type of the instance\r\n */\r\nclass Provider {\r\n    constructor(name, container) {\r\n        this.name = name;\r\n        this.container = container;\r\n        this.component = null;\r\n        this.instances = new Map();\r\n        this.instancesDeferred = new Map();\r\n        this.instancesOptions = new Map();\r\n        this.onInitCallbacks = new Map();\r\n    }\r\n    /**\r\n     * @param identifier A provider can provide mulitple instances of a service\r\n     * if this.component.multipleInstances is true.\r\n     */\r\n    get(identifier) {\r\n        // if multipleInstances is not supported, use the default name\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\r\n        if (!this.instancesDeferred.has(normalizedIdentifier)) {\r\n            const deferred = new Deferred();\r\n            this.instancesDeferred.set(normalizedIdentifier, deferred);\r\n            if (this.isInitialized(normalizedIdentifier) ||\r\n                this.shouldAutoInitialize()) {\r\n                // initialize the service if it can be auto-initialized\r\n                try {\r\n                    const instance = this.getOrInitializeService({\r\n                        instanceIdentifier: normalizedIdentifier\r\n                    });\r\n                    if (instance) {\r\n                        deferred.resolve(instance);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // when the instance factory throws an exception during get(), it should not cause\r\n                    // a fatal error. We just return the unresolved promise in this case.\r\n                }\r\n            }\r\n        }\r\n        return this.instancesDeferred.get(normalizedIdentifier).promise;\r\n    }\r\n    getImmediate(options) {\r\n        var _a;\r\n        // if multipleInstances is not supported, use the default name\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(options === null || options === void 0 ? void 0 : options.identifier);\r\n        const optional = (_a = options === null || options === void 0 ? void 0 : options.optional) !== null && _a !== void 0 ? _a : false;\r\n        if (this.isInitialized(normalizedIdentifier) ||\r\n            this.shouldAutoInitialize()) {\r\n            try {\r\n                return this.getOrInitializeService({\r\n                    instanceIdentifier: normalizedIdentifier\r\n                });\r\n            }\r\n            catch (e) {\r\n                if (optional) {\r\n                    return null;\r\n                }\r\n                else {\r\n                    throw e;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw\r\n            if (optional) {\r\n                return null;\r\n            }\r\n            else {\r\n                throw Error(`Service ${this.name} is not available`);\r\n            }\r\n        }\r\n    }\r\n    getComponent() {\r\n        return this.component;\r\n    }\r\n    setComponent(component) {\r\n        if (component.name !== this.name) {\r\n            throw Error(`Mismatching Component ${component.name} for Provider ${this.name}.`);\r\n        }\r\n        if (this.component) {\r\n            throw Error(`Component for ${this.name} has already been provided`);\r\n        }\r\n        this.component = component;\r\n        // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\r\n        if (!this.shouldAutoInitialize()) {\r\n            return;\r\n        }\r\n        // if the service is eager, initialize the default instance\r\n        if (isComponentEager(component)) {\r\n            try {\r\n                this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });\r\n            }\r\n            catch (e) {\r\n                // when the instance factory for an eager Component throws an exception during the eager\r\n                // initialization, it should not cause a fatal error.\r\n                // TODO: Investigate if we need to make it configurable, because some component may want to cause\r\n                // a fatal error in this case?\r\n            }\r\n        }\r\n        // Create service instances for the pending promises and resolve them\r\n        // NOTE: if this.multipleInstances is false, only the default instance will be created\r\n        // and all promises with resolve with it regardless of the identifier.\r\n        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {\r\n            const normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\r\n            try {\r\n                // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\r\n                const instance = this.getOrInitializeService({\r\n                    instanceIdentifier: normalizedIdentifier\r\n                });\r\n                instanceDeferred.resolve(instance);\r\n            }\r\n            catch (e) {\r\n                // when the instance factory throws an exception, it should not cause\r\n                // a fatal error. We just leave the promise unresolved.\r\n            }\r\n        }\r\n    }\r\n    clearInstance(identifier = DEFAULT_ENTRY_NAME) {\r\n        this.instancesDeferred.delete(identifier);\r\n        this.instancesOptions.delete(identifier);\r\n        this.instances.delete(identifier);\r\n    }\r\n    // app.delete() will call this method on every provider to delete the services\r\n    // TODO: should we mark the provider as deleted?\r\n    async delete() {\r\n        const services = Array.from(this.instances.values());\r\n        await Promise.all([\r\n            ...services\r\n                .filter(service => 'INTERNAL' in service) // legacy services\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                .map(service => service.INTERNAL.delete()),\r\n            ...services\r\n                .filter(service => '_delete' in service) // modularized services\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                .map(service => service._delete())\r\n        ]);\r\n    }\r\n    isComponentSet() {\r\n        return this.component != null;\r\n    }\r\n    isInitialized(identifier = DEFAULT_ENTRY_NAME) {\r\n        return this.instances.has(identifier);\r\n    }\r\n    getOptions(identifier = DEFAULT_ENTRY_NAME) {\r\n        return this.instancesOptions.get(identifier) || {};\r\n    }\r\n    initialize(opts = {}) {\r\n        const { options = {} } = opts;\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);\r\n        if (this.isInitialized(normalizedIdentifier)) {\r\n            throw Error(`${this.name}(${normalizedIdentifier}) has already been initialized`);\r\n        }\r\n        if (!this.isComponentSet()) {\r\n            throw Error(`Component ${this.name} has not been registered yet`);\r\n        }\r\n        const instance = this.getOrInitializeService({\r\n            instanceIdentifier: normalizedIdentifier,\r\n            options\r\n        });\r\n        // resolve any pending promise waiting for the service instance\r\n        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {\r\n            const normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\r\n            if (normalizedIdentifier === normalizedDeferredIdentifier) {\r\n                instanceDeferred.resolve(instance);\r\n            }\r\n        }\r\n        return instance;\r\n    }\r\n    /**\r\n     *\r\n     * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\r\n     * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\r\n     *\r\n     * @param identifier An optional instance identifier\r\n     * @returns a function to unregister the callback\r\n     */\r\n    onInit(callback, identifier) {\r\n        var _a;\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\r\n        const existingCallbacks = (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null && _a !== void 0 ? _a : new Set();\r\n        existingCallbacks.add(callback);\r\n        this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\r\n        const existingInstance = this.instances.get(normalizedIdentifier);\r\n        if (existingInstance) {\r\n            callback(existingInstance, normalizedIdentifier);\r\n        }\r\n        return () => {\r\n            existingCallbacks.delete(callback);\r\n        };\r\n    }\r\n    /**\r\n     * Invoke onInit callbacks synchronously\r\n     * @param instance the service instance`\r\n     */\r\n    invokeOnInitCallbacks(instance, identifier) {\r\n        const callbacks = this.onInitCallbacks.get(identifier);\r\n        if (!callbacks) {\r\n            return;\r\n        }\r\n        for (const callback of callbacks) {\r\n            try {\r\n                callback(instance, identifier);\r\n            }\r\n            catch (_a) {\r\n                // ignore errors in the onInit callback\r\n            }\r\n        }\r\n    }\r\n    getOrInitializeService({ instanceIdentifier, options = {} }) {\r\n        let instance = this.instances.get(instanceIdentifier);\r\n        if (!instance && this.component) {\r\n            instance = this.component.instanceFactory(this.container, {\r\n                instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\r\n                options\r\n            });\r\n            this.instances.set(instanceIdentifier, instance);\r\n            this.instancesOptions.set(instanceIdentifier, options);\r\n            /**\r\n             * Invoke onInit listeners.\r\n             * Note this.component.onInstanceCreated is different, which is used by the component creator,\r\n             * while onInit listeners are registered by consumers of the provider.\r\n             */\r\n            this.invokeOnInitCallbacks(instance, instanceIdentifier);\r\n            /**\r\n             * Order is important\r\n             * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\r\n             * makes `isInitialized()` return true.\r\n             */\r\n            if (this.component.onInstanceCreated) {\r\n                try {\r\n                    this.component.onInstanceCreated(this.container, instanceIdentifier, instance);\r\n                }\r\n                catch (_a) {\r\n                    // ignore errors in the onInstanceCreatedCallback\r\n                }\r\n            }\r\n        }\r\n        return instance || null;\r\n    }\r\n    normalizeInstanceIdentifier(identifier = DEFAULT_ENTRY_NAME) {\r\n        if (this.component) {\r\n            return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\r\n        }\r\n        else {\r\n            return identifier; // assume multiple instances are supported before the component is provided.\r\n        }\r\n    }\r\n    shouldAutoInitialize() {\r\n        return (!!this.component &&\r\n            this.component.instantiationMode !== \"EXPLICIT\" /* EXPLICIT */);\r\n    }\r\n}\r\n// undefined should be passed to the service factory for the default instance\r\nfunction normalizeIdentifierForFactory(identifier) {\r\n    return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\r\n}\r\nfunction isComponentEager(component) {\r\n    return component.instantiationMode === \"EAGER\" /* EAGER */;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\r\n */\r\nclass ComponentContainer {\r\n    constructor(name) {\r\n        this.name = name;\r\n        this.providers = new Map();\r\n    }\r\n    /**\r\n     *\r\n     * @param component Component being added\r\n     * @param overwrite When a component with the same name has already been registered,\r\n     * if overwrite is true: overwrite the existing component with the new component and create a new\r\n     * provider with the new component. It can be useful in tests where you want to use different mocks\r\n     * for different tests.\r\n     * if overwrite is false: throw an exception\r\n     */\r\n    addComponent(component) {\r\n        const provider = this.getProvider(component.name);\r\n        if (provider.isComponentSet()) {\r\n            throw new Error(`Component ${component.name} has already been registered with ${this.name}`);\r\n        }\r\n        provider.setComponent(component);\r\n    }\r\n    addOrOverwriteComponent(component) {\r\n        const provider = this.getProvider(component.name);\r\n        if (provider.isComponentSet()) {\r\n            // delete the existing provider from the container, so we can register the new component\r\n            this.providers.delete(component.name);\r\n        }\r\n        this.addComponent(component);\r\n    }\r\n    /**\r\n     * getProvider provides a type safe interface where it can only be called with a field name\r\n     * present in NameServiceMapping interface.\r\n     *\r\n     * Firebase SDKs providing services should extend NameServiceMapping interface to register\r\n     * themselves.\r\n     */\r\n    getProvider(name) {\r\n        if (this.providers.has(name)) {\r\n            return this.providers.get(name);\r\n        }\r\n        // create a Provider for a service that hasn't registered with Firebase\r\n        const provider = new Provider(name, this);\r\n        this.providers.set(name, provider);\r\n        return provider;\r\n    }\r\n    getProviders() {\r\n        return Array.from(this.providers.values());\r\n    }\r\n}\n\nexport { Component, ComponentContainer, Provider };\n//# sourceMappingURL=index.esm2017.js.map\n","/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A container for all of the Logger instances\r\n */\r\nconst instances = [];\r\n/**\r\n * The JS SDK supports 5 log levels and also allows a user the ability to\r\n * silence the logs altogether.\r\n *\r\n * The order is a follows:\r\n * DEBUG < VERBOSE < INFO < WARN < ERROR\r\n *\r\n * All of the log types above the current log level will be captured (i.e. if\r\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\r\n * `VERBOSE` logs will not)\r\n */\r\nvar LogLevel;\r\n(function (LogLevel) {\r\n    LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\r\n    LogLevel[LogLevel[\"VERBOSE\"] = 1] = \"VERBOSE\";\r\n    LogLevel[LogLevel[\"INFO\"] = 2] = \"INFO\";\r\n    LogLevel[LogLevel[\"WARN\"] = 3] = \"WARN\";\r\n    LogLevel[LogLevel[\"ERROR\"] = 4] = \"ERROR\";\r\n    LogLevel[LogLevel[\"SILENT\"] = 5] = \"SILENT\";\r\n})(LogLevel || (LogLevel = {}));\r\nconst levelStringToEnum = {\r\n    'debug': LogLevel.DEBUG,\r\n    'verbose': LogLevel.VERBOSE,\r\n    'info': LogLevel.INFO,\r\n    'warn': LogLevel.WARN,\r\n    'error': LogLevel.ERROR,\r\n    'silent': LogLevel.SILENT\r\n};\r\n/**\r\n * The default log level\r\n */\r\nconst defaultLogLevel = LogLevel.INFO;\r\n/**\r\n * By default, `console.debug` is not displayed in the developer console (in\r\n * chrome). To avoid forcing users to have to opt-in to these logs twice\r\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\r\n * logs to the `console.log` function.\r\n */\r\nconst ConsoleMethod = {\r\n    [LogLevel.DEBUG]: 'log',\r\n    [LogLevel.VERBOSE]: 'log',\r\n    [LogLevel.INFO]: 'info',\r\n    [LogLevel.WARN]: 'warn',\r\n    [LogLevel.ERROR]: 'error'\r\n};\r\n/**\r\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\r\n * messages on to their corresponding console counterparts (if the log method\r\n * is supported by the current log level)\r\n */\r\nconst defaultLogHandler = (instance, logType, ...args) => {\r\n    if (logType < instance.logLevel) {\r\n        return;\r\n    }\r\n    const now = new Date().toISOString();\r\n    const method = ConsoleMethod[logType];\r\n    if (method) {\r\n        console[method](`[${now}]  ${instance.name}:`, ...args);\r\n    }\r\n    else {\r\n        throw new Error(`Attempted to log a message with an invalid logType (value: ${logType})`);\r\n    }\r\n};\r\nclass Logger {\r\n    /**\r\n     * Gives you an instance of a Logger to capture messages according to\r\n     * Firebase's logging scheme.\r\n     *\r\n     * @param name The name that the logs will be associated with\r\n     */\r\n    constructor(name) {\r\n        this.name = name;\r\n        /**\r\n         * The log level of the given Logger instance.\r\n         */\r\n        this._logLevel = defaultLogLevel;\r\n        /**\r\n         * The main (internal) log handler for the Logger instance.\r\n         * Can be set to a new function in internal package code but not by user.\r\n         */\r\n        this._logHandler = defaultLogHandler;\r\n        /**\r\n         * The optional, additional, user-defined log handler for the Logger instance.\r\n         */\r\n        this._userLogHandler = null;\r\n        /**\r\n         * Capture the current instance for later use\r\n         */\r\n        instances.push(this);\r\n    }\r\n    get logLevel() {\r\n        return this._logLevel;\r\n    }\r\n    set logLevel(val) {\r\n        if (!(val in LogLevel)) {\r\n            throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\r\n        }\r\n        this._logLevel = val;\r\n    }\r\n    // Workaround for setter/getter having to be the same type.\r\n    setLogLevel(val) {\r\n        this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\r\n    }\r\n    get logHandler() {\r\n        return this._logHandler;\r\n    }\r\n    set logHandler(val) {\r\n        if (typeof val !== 'function') {\r\n            throw new TypeError('Value assigned to `logHandler` must be a function');\r\n        }\r\n        this._logHandler = val;\r\n    }\r\n    get userLogHandler() {\r\n        return this._userLogHandler;\r\n    }\r\n    set userLogHandler(val) {\r\n        this._userLogHandler = val;\r\n    }\r\n    /**\r\n     * The functions below are all based on the `console` interface\r\n     */\r\n    debug(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\r\n        this._logHandler(this, LogLevel.DEBUG, ...args);\r\n    }\r\n    log(...args) {\r\n        this._userLogHandler &&\r\n            this._userLogHandler(this, LogLevel.VERBOSE, ...args);\r\n        this._logHandler(this, LogLevel.VERBOSE, ...args);\r\n    }\r\n    info(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\r\n        this._logHandler(this, LogLevel.INFO, ...args);\r\n    }\r\n    warn(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\r\n        this._logHandler(this, LogLevel.WARN, ...args);\r\n    }\r\n    error(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\r\n        this._logHandler(this, LogLevel.ERROR, ...args);\r\n    }\r\n}\r\nfunction setLogLevel(level) {\r\n    instances.forEach(inst => {\r\n        inst.setLogLevel(level);\r\n    });\r\n}\r\nfunction setUserLogHandler(logCallback, options) {\r\n    for (const instance of instances) {\r\n        let customLogLevel = null;\r\n        if (options && options.level) {\r\n            customLogLevel = levelStringToEnum[options.level];\r\n        }\r\n        if (logCallback === null) {\r\n            instance.userLogHandler = null;\r\n        }\r\n        else {\r\n            instance.userLogHandler = (instance, level, ...args) => {\r\n                const message = args\r\n                    .map(arg => {\r\n                    if (arg == null) {\r\n                        return null;\r\n                    }\r\n                    else if (typeof arg === 'string') {\r\n                        return arg;\r\n                    }\r\n                    else if (typeof arg === 'number' || typeof arg === 'boolean') {\r\n                        return arg.toString();\r\n                    }\r\n                    else if (arg instanceof Error) {\r\n                        return arg.message;\r\n                    }\r\n                    else {\r\n                        try {\r\n                            return JSON.stringify(arg);\r\n                        }\r\n                        catch (ignored) {\r\n                            return null;\r\n                        }\r\n                    }\r\n                })\r\n                    .filter(arg => arg)\r\n                    .join(' ');\r\n                if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance.logLevel)) {\r\n                    logCallback({\r\n                        level: LogLevel[level].toLowerCase(),\r\n                        message,\r\n                        args,\r\n                        type: instance.name\r\n                    });\r\n                }\r\n            };\r\n        }\r\n    }\r\n}\n\nexport { LogLevel, Logger, setLogLevel, setUserLogHandler };\n//# sourceMappingURL=index.esm2017.js.map\n","const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    promise\n        .then((value) => {\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) {\n            cursorRequestMap.set(value, request);\n        }\n        // Catching to avoid \"Uncaught Promise exceptions\"\n    })\n        .catch(() => { });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') {\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n            }\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) {\n        return function (storeNames, ...args) {\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n        };\n    }\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexport { reverseTransformCache as a, instanceOfAny as i, replaceTraps as r, unwrap as u, wrap as w };\n","import { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction));\n        });\n    }\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking)\n            db.addEventListener('versionchange', () => blocking());\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexport { deleteDB, openDB };\n","import { Component, ComponentContainer } from '@firebase/component';\nimport { Logger, setUserLogHandler, setLogLevel as setLogLevel$1 } from '@firebase/logger';\nimport { ErrorFactory, deepEqual, FirebaseError, base64urlEncodeWithoutPadding, isIndexedDBAvailable, validateIndexedDBOpenable } from '@firebase/util';\nexport { FirebaseError } from '@firebase/util';\nimport { openDB } from 'idb';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass PlatformLoggerServiceImpl {\r\n    constructor(container) {\r\n        this.container = container;\r\n    }\r\n    // In initial implementation, this will be called by installations on\r\n    // auth token refresh, and installations will send this string.\r\n    getPlatformInfoString() {\r\n        const providers = this.container.getProviders();\r\n        // Loop through providers and get library/version pairs from any that are\r\n        // version components.\r\n        return providers\r\n            .map(provider => {\r\n            if (isVersionServiceProvider(provider)) {\r\n                const service = provider.getImmediate();\r\n                return `${service.library}/${service.version}`;\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        })\r\n            .filter(logString => logString)\r\n            .join(' ');\r\n    }\r\n}\r\n/**\r\n *\r\n * @param provider check if this provider provides a VersionService\r\n *\r\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\r\n * provides VersionService. The provider is not necessarily a 'app-version'\r\n * provider.\r\n */\r\nfunction isVersionServiceProvider(provider) {\r\n    const component = provider.getComponent();\r\n    return (component === null || component === void 0 ? void 0 : component.type) === \"VERSION\" /* VERSION */;\r\n}\n\nconst name$o = \"@firebase/app\";\nconst version$1 = \"0.7.31\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logger = new Logger('@firebase/app');\n\nconst name$n = \"@firebase/app-compat\";\n\nconst name$m = \"@firebase/analytics-compat\";\n\nconst name$l = \"@firebase/analytics\";\n\nconst name$k = \"@firebase/app-check-compat\";\n\nconst name$j = \"@firebase/app-check\";\n\nconst name$i = \"@firebase/auth\";\n\nconst name$h = \"@firebase/auth-compat\";\n\nconst name$g = \"@firebase/database\";\n\nconst name$f = \"@firebase/database-compat\";\n\nconst name$e = \"@firebase/functions\";\n\nconst name$d = \"@firebase/functions-compat\";\n\nconst name$c = \"@firebase/installations\";\n\nconst name$b = \"@firebase/installations-compat\";\n\nconst name$a = \"@firebase/messaging\";\n\nconst name$9 = \"@firebase/messaging-compat\";\n\nconst name$8 = \"@firebase/performance\";\n\nconst name$7 = \"@firebase/performance-compat\";\n\nconst name$6 = \"@firebase/remote-config\";\n\nconst name$5 = \"@firebase/remote-config-compat\";\n\nconst name$4 = \"@firebase/storage\";\n\nconst name$3 = \"@firebase/storage-compat\";\n\nconst name$2 = \"@firebase/firestore\";\n\nconst name$1 = \"@firebase/firestore-compat\";\n\nconst name = \"firebase\";\nconst version = \"9.9.3\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The default app name\r\n *\r\n * @internal\r\n */\r\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\r\nconst PLATFORM_LOG_STRING = {\r\n    [name$o]: 'fire-core',\r\n    [name$n]: 'fire-core-compat',\r\n    [name$l]: 'fire-analytics',\r\n    [name$m]: 'fire-analytics-compat',\r\n    [name$j]: 'fire-app-check',\r\n    [name$k]: 'fire-app-check-compat',\r\n    [name$i]: 'fire-auth',\r\n    [name$h]: 'fire-auth-compat',\r\n    [name$g]: 'fire-rtdb',\r\n    [name$f]: 'fire-rtdb-compat',\r\n    [name$e]: 'fire-fn',\r\n    [name$d]: 'fire-fn-compat',\r\n    [name$c]: 'fire-iid',\r\n    [name$b]: 'fire-iid-compat',\r\n    [name$a]: 'fire-fcm',\r\n    [name$9]: 'fire-fcm-compat',\r\n    [name$8]: 'fire-perf',\r\n    [name$7]: 'fire-perf-compat',\r\n    [name$6]: 'fire-rc',\r\n    [name$5]: 'fire-rc-compat',\r\n    [name$4]: 'fire-gcs',\r\n    [name$3]: 'fire-gcs-compat',\r\n    [name$2]: 'fire-fst',\r\n    [name$1]: 'fire-fst-compat',\r\n    'fire-js': 'fire-js',\r\n    [name]: 'fire-js-all'\r\n};\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @internal\r\n */\r\nconst _apps = new Map();\r\n/**\r\n * Registered components.\r\n *\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nconst _components = new Map();\r\n/**\r\n * @param component - the component being added to this app's container\r\n *\r\n * @internal\r\n */\r\nfunction _addComponent(app, component) {\r\n    try {\r\n        app.container.addComponent(component);\r\n    }\r\n    catch (e) {\r\n        logger.debug(`Component ${component.name} failed to register with FirebaseApp ${app.name}`, e);\r\n    }\r\n}\r\n/**\r\n *\r\n * @internal\r\n */\r\nfunction _addOrOverwriteComponent(app, component) {\r\n    app.container.addOrOverwriteComponent(component);\r\n}\r\n/**\r\n *\r\n * @param component - the component to register\r\n * @returns whether or not the component is registered successfully\r\n *\r\n * @internal\r\n */\r\nfunction _registerComponent(component) {\r\n    const componentName = component.name;\r\n    if (_components.has(componentName)) {\r\n        logger.debug(`There were multiple attempts to register component ${componentName}.`);\r\n        return false;\r\n    }\r\n    _components.set(componentName, component);\r\n    // add the component to existing app instances\r\n    for (const app of _apps.values()) {\r\n        _addComponent(app, component);\r\n    }\r\n    return true;\r\n}\r\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n *\r\n * @returns the provider for the service with the matching name\r\n *\r\n * @internal\r\n */\r\nfunction _getProvider(app, name) {\r\n    const heartbeatController = app.container\r\n        .getProvider('heartbeat')\r\n        .getImmediate({ optional: true });\r\n    if (heartbeatController) {\r\n        void heartbeatController.triggerHeartbeat();\r\n    }\r\n    return app.container.getProvider(name);\r\n}\r\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\r\n *\r\n * @internal\r\n */\r\nfunction _removeServiceInstance(app, name, instanceIdentifier = DEFAULT_ENTRY_NAME) {\r\n    _getProvider(app, name).clearInstance(instanceIdentifier);\r\n}\r\n/**\r\n * Test only\r\n *\r\n * @internal\r\n */\r\nfunction _clearComponents() {\r\n    _components.clear();\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst ERRORS = {\r\n    [\"no-app\" /* NO_APP */]: \"No Firebase App '{$appName}' has been created - \" +\r\n        'call Firebase App.initializeApp()',\r\n    [\"bad-app-name\" /* BAD_APP_NAME */]: \"Illegal App name: '{$appName}\",\r\n    [\"duplicate-app\" /* DUPLICATE_APP */]: \"Firebase App named '{$appName}' already exists with different options or config\",\r\n    [\"app-deleted\" /* APP_DELETED */]: \"Firebase App named '{$appName}' already deleted\",\r\n    [\"invalid-app-argument\" /* INVALID_APP_ARGUMENT */]: 'firebase.{$appName}() takes either no argument or a ' +\r\n        'Firebase App instance.',\r\n    [\"invalid-log-argument\" /* INVALID_LOG_ARGUMENT */]: 'First argument to `onLog` must be null or a function.',\r\n    [\"idb-open\" /* IDB_OPEN */]: 'Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.',\r\n    [\"idb-get\" /* IDB_GET */]: 'Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.',\r\n    [\"idb-set\" /* IDB_WRITE */]: 'Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.',\r\n    [\"idb-delete\" /* IDB_DELETE */]: 'Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.'\r\n};\r\nconst ERROR_FACTORY = new ErrorFactory('app', 'Firebase', ERRORS);\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass FirebaseAppImpl {\r\n    constructor(options, config, container) {\r\n        this._isDeleted = false;\r\n        this._options = Object.assign({}, options);\r\n        this._config = Object.assign({}, config);\r\n        this._name = config.name;\r\n        this._automaticDataCollectionEnabled =\r\n            config.automaticDataCollectionEnabled;\r\n        this._container = container;\r\n        this.container.addComponent(new Component('app', () => this, \"PUBLIC\" /* PUBLIC */));\r\n    }\r\n    get automaticDataCollectionEnabled() {\r\n        this.checkDestroyed();\r\n        return this._automaticDataCollectionEnabled;\r\n    }\r\n    set automaticDataCollectionEnabled(val) {\r\n        this.checkDestroyed();\r\n        this._automaticDataCollectionEnabled = val;\r\n    }\r\n    get name() {\r\n        this.checkDestroyed();\r\n        return this._name;\r\n    }\r\n    get options() {\r\n        this.checkDestroyed();\r\n        return this._options;\r\n    }\r\n    get config() {\r\n        this.checkDestroyed();\r\n        return this._config;\r\n    }\r\n    get container() {\r\n        return this._container;\r\n    }\r\n    get isDeleted() {\r\n        return this._isDeleted;\r\n    }\r\n    set isDeleted(val) {\r\n        this._isDeleted = val;\r\n    }\r\n    /**\r\n     * This function will throw an Error if the App has already been deleted -\r\n     * use before performing API actions on the App.\r\n     */\r\n    checkDestroyed() {\r\n        if (this.isDeleted) {\r\n            throw ERROR_FACTORY.create(\"app-deleted\" /* APP_DELETED */, { appName: this._name });\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The current SDK version.\r\n *\r\n * @public\r\n */\r\nconst SDK_VERSION = version;\r\nfunction initializeApp(options, rawConfig = {}) {\r\n    if (typeof rawConfig !== 'object') {\r\n        const name = rawConfig;\r\n        rawConfig = { name };\r\n    }\r\n    const config = Object.assign({ name: DEFAULT_ENTRY_NAME, automaticDataCollectionEnabled: false }, rawConfig);\r\n    const name = config.name;\r\n    if (typeof name !== 'string' || !name) {\r\n        throw ERROR_FACTORY.create(\"bad-app-name\" /* BAD_APP_NAME */, {\r\n            appName: String(name)\r\n        });\r\n    }\r\n    const existingApp = _apps.get(name);\r\n    if (existingApp) {\r\n        // return the existing app if options and config deep equal the ones in the existing app.\r\n        if (deepEqual(options, existingApp.options) &&\r\n            deepEqual(config, existingApp.config)) {\r\n            return existingApp;\r\n        }\r\n        else {\r\n            throw ERROR_FACTORY.create(\"duplicate-app\" /* DUPLICATE_APP */, { appName: name });\r\n        }\r\n    }\r\n    const container = new ComponentContainer(name);\r\n    for (const component of _components.values()) {\r\n        container.addComponent(component);\r\n    }\r\n    const newApp = new FirebaseAppImpl(options, config, container);\r\n    _apps.set(name, newApp);\r\n    return newApp;\r\n}\r\n/**\r\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\r\n *\r\n * When called with no arguments, the default app is returned. When an app name\r\n * is provided, the app corresponding to that name is returned.\r\n *\r\n * An exception is thrown if the app being retrieved has not yet been\r\n * initialized.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return the default app\r\n * const app = getApp();\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return a named app\r\n * const otherApp = getApp(\"otherApp\");\r\n * ```\r\n *\r\n * @param name - Optional name of the app to return. If no name is\r\n *   provided, the default is `\"[DEFAULT]\"`.\r\n *\r\n * @returns The app corresponding to the provided app name.\r\n *   If no app name is provided, the default app is returned.\r\n *\r\n * @public\r\n */\r\nfunction getApp(name = DEFAULT_ENTRY_NAME) {\r\n    const app = _apps.get(name);\r\n    if (!app) {\r\n        throw ERROR_FACTORY.create(\"no-app\" /* NO_APP */, { appName: name });\r\n    }\r\n    return app;\r\n}\r\n/**\r\n * A (read-only) array of all initialized apps.\r\n * @public\r\n */\r\nfunction getApps() {\r\n    return Array.from(_apps.values());\r\n}\r\n/**\r\n * Renders this app unusable and frees the resources of all associated\r\n * services.\r\n *\r\n * @example\r\n * ```javascript\r\n * deleteApp(app)\r\n *   .then(function() {\r\n *     console.log(\"App deleted successfully\");\r\n *   })\r\n *   .catch(function(error) {\r\n *     console.log(\"Error deleting app:\", error);\r\n *   });\r\n * ```\r\n *\r\n * @public\r\n */\r\nasync function deleteApp(app) {\r\n    const name = app.name;\r\n    if (_apps.has(name)) {\r\n        _apps.delete(name);\r\n        await Promise.all(app.container\r\n            .getProviders()\r\n            .map(provider => provider.delete()));\r\n        app.isDeleted = true;\r\n    }\r\n}\r\n/**\r\n * Registers a library's name and version for platform logging purposes.\r\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\r\n * @param version - Current version of that library.\r\n * @param variant - Bundle variant, e.g., node, rn, etc.\r\n *\r\n * @public\r\n */\r\nfunction registerVersion(libraryKeyOrName, version, variant) {\r\n    var _a;\r\n    // TODO: We can use this check to whitelist strings when/if we set up\r\n    // a good whitelist system.\r\n    let library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;\r\n    if (variant) {\r\n        library += `-${variant}`;\r\n    }\r\n    const libraryMismatch = library.match(/\\s|\\//);\r\n    const versionMismatch = version.match(/\\s|\\//);\r\n    if (libraryMismatch || versionMismatch) {\r\n        const warning = [\r\n            `Unable to register library \"${library}\" with version \"${version}\":`\r\n        ];\r\n        if (libraryMismatch) {\r\n            warning.push(`library name \"${library}\" contains illegal characters (whitespace or \"/\")`);\r\n        }\r\n        if (libraryMismatch && versionMismatch) {\r\n            warning.push('and');\r\n        }\r\n        if (versionMismatch) {\r\n            warning.push(`version name \"${version}\" contains illegal characters (whitespace or \"/\")`);\r\n        }\r\n        logger.warn(warning.join(' '));\r\n        return;\r\n    }\r\n    _registerComponent(new Component(`${library}-version`, () => ({ library, version }), \"VERSION\" /* VERSION */));\r\n}\r\n/**\r\n * Sets log handler for all Firebase SDKs.\r\n * @param logCallback - An optional custom log handler that executes user code whenever\r\n * the Firebase SDK makes a logging call.\r\n *\r\n * @public\r\n */\r\nfunction onLog(logCallback, options) {\r\n    if (logCallback !== null && typeof logCallback !== 'function') {\r\n        throw ERROR_FACTORY.create(\"invalid-log-argument\" /* INVALID_LOG_ARGUMENT */);\r\n    }\r\n    setUserLogHandler(logCallback, options);\r\n}\r\n/**\r\n * Sets log level for all Firebase SDKs.\r\n *\r\n * All of the log types above the current log level are captured (i.e. if\r\n * you set the log level to `info`, errors are logged, but `debug` and\r\n * `verbose` logs are not).\r\n *\r\n * @public\r\n */\r\nfunction setLogLevel(logLevel) {\r\n    setLogLevel$1(logLevel);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DB_NAME = 'firebase-heartbeat-database';\r\nconst DB_VERSION = 1;\r\nconst STORE_NAME = 'firebase-heartbeat-store';\r\nlet dbPromise = null;\r\nfunction getDbPromise() {\r\n    if (!dbPromise) {\r\n        dbPromise = openDB(DB_NAME, DB_VERSION, {\r\n            upgrade: (db, oldVersion) => {\r\n                // We don't use 'break' in this switch statement, the fall-through\r\n                // behavior is what we want, because if there are multiple versions between\r\n                // the old version and the current version, we want ALL the migrations\r\n                // that correspond to those versions to run, not only the last one.\r\n                // eslint-disable-next-line default-case\r\n                switch (oldVersion) {\r\n                    case 0:\r\n                        db.createObjectStore(STORE_NAME);\r\n                }\r\n            }\r\n        }).catch(e => {\r\n            throw ERROR_FACTORY.create(\"idb-open\" /* IDB_OPEN */, {\r\n                originalErrorMessage: e.message\r\n            });\r\n        });\r\n    }\r\n    return dbPromise;\r\n}\r\nasync function readHeartbeatsFromIndexedDB(app) {\r\n    var _a;\r\n    try {\r\n        const db = await getDbPromise();\r\n        return db\r\n            .transaction(STORE_NAME)\r\n            .objectStore(STORE_NAME)\r\n            .get(computeKey(app));\r\n    }\r\n    catch (e) {\r\n        if (e instanceof FirebaseError) {\r\n            logger.warn(e.message);\r\n        }\r\n        else {\r\n            const idbGetError = ERROR_FACTORY.create(\"idb-get\" /* IDB_GET */, {\r\n                originalErrorMessage: (_a = e) === null || _a === void 0 ? void 0 : _a.message\r\n            });\r\n            logger.warn(idbGetError.message);\r\n        }\r\n    }\r\n}\r\nasync function writeHeartbeatsToIndexedDB(app, heartbeatObject) {\r\n    var _a;\r\n    try {\r\n        const db = await getDbPromise();\r\n        const tx = db.transaction(STORE_NAME, 'readwrite');\r\n        const objectStore = tx.objectStore(STORE_NAME);\r\n        await objectStore.put(heartbeatObject, computeKey(app));\r\n        return tx.done;\r\n    }\r\n    catch (e) {\r\n        if (e instanceof FirebaseError) {\r\n            logger.warn(e.message);\r\n        }\r\n        else {\r\n            const idbGetError = ERROR_FACTORY.create(\"idb-set\" /* IDB_WRITE */, {\r\n                originalErrorMessage: (_a = e) === null || _a === void 0 ? void 0 : _a.message\r\n            });\r\n            logger.warn(idbGetError.message);\r\n        }\r\n    }\r\n}\r\nfunction computeKey(app) {\r\n    return `${app.name}!${app.options.appId}`;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst MAX_HEADER_BYTES = 1024;\r\n// 30 days\r\nconst STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1000;\r\nclass HeartbeatServiceImpl {\r\n    constructor(container) {\r\n        this.container = container;\r\n        /**\r\n         * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate\r\n         * the header string.\r\n         * Stores one record per date. This will be consolidated into the standard\r\n         * format of one record per user agent string before being sent as a header.\r\n         * Populated from indexedDB when the controller is instantiated and should\r\n         * be kept in sync with indexedDB.\r\n         * Leave public for easier testing.\r\n         */\r\n        this._heartbeatsCache = null;\r\n        const app = this.container.getProvider('app').getImmediate();\r\n        this._storage = new HeartbeatStorageImpl(app);\r\n        this._heartbeatsCachePromise = this._storage.read().then(result => {\r\n            this._heartbeatsCache = result;\r\n            return result;\r\n        });\r\n    }\r\n    /**\r\n     * Called to report a heartbeat. The function will generate\r\n     * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it\r\n     * to IndexedDB.\r\n     * Note that we only store one heartbeat per day. So if a heartbeat for today is\r\n     * already logged, subsequent calls to this function in the same day will be ignored.\r\n     */\r\n    async triggerHeartbeat() {\r\n        const platformLogger = this.container\r\n            .getProvider('platform-logger')\r\n            .getImmediate();\r\n        // This is the \"Firebase user agent\" string from the platform logger\r\n        // service, not the browser user agent.\r\n        const agent = platformLogger.getPlatformInfoString();\r\n        const date = getUTCDateString();\r\n        if (this._heartbeatsCache === null) {\r\n            this._heartbeatsCache = await this._heartbeatsCachePromise;\r\n        }\r\n        // Do not store a heartbeat if one is already stored for this day\r\n        // or if a header has already been sent today.\r\n        if (this._heartbeatsCache.lastSentHeartbeatDate === date ||\r\n            this._heartbeatsCache.heartbeats.some(singleDateHeartbeat => singleDateHeartbeat.date === date)) {\r\n            return;\r\n        }\r\n        else {\r\n            // There is no entry for this date. Create one.\r\n            this._heartbeatsCache.heartbeats.push({ date, agent });\r\n        }\r\n        // Remove entries older than 30 days.\r\n        this._heartbeatsCache.heartbeats = this._heartbeatsCache.heartbeats.filter(singleDateHeartbeat => {\r\n            const hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();\r\n            const now = Date.now();\r\n            return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;\r\n        });\r\n        return this._storage.overwrite(this._heartbeatsCache);\r\n    }\r\n    /**\r\n     * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.\r\n     * It also clears all heartbeats from memory as well as in IndexedDB.\r\n     *\r\n     * NOTE: Consuming product SDKs should not send the header if this method\r\n     * returns an empty string.\r\n     */\r\n    async getHeartbeatsHeader() {\r\n        if (this._heartbeatsCache === null) {\r\n            await this._heartbeatsCachePromise;\r\n        }\r\n        // If it's still null or the array is empty, there is no data to send.\r\n        if (this._heartbeatsCache === null ||\r\n            this._heartbeatsCache.heartbeats.length === 0) {\r\n            return '';\r\n        }\r\n        const date = getUTCDateString();\r\n        // Extract as many heartbeats from the cache as will fit under the size limit.\r\n        const { heartbeatsToSend, unsentEntries } = extractHeartbeatsForHeader(this._heartbeatsCache.heartbeats);\r\n        const headerString = base64urlEncodeWithoutPadding(JSON.stringify({ version: 2, heartbeats: heartbeatsToSend }));\r\n        // Store last sent date to prevent another being logged/sent for the same day.\r\n        this._heartbeatsCache.lastSentHeartbeatDate = date;\r\n        if (unsentEntries.length > 0) {\r\n            // Store any unsent entries if they exist.\r\n            this._heartbeatsCache.heartbeats = unsentEntries;\r\n            // This seems more likely than emptying the array (below) to lead to some odd state\r\n            // since the cache isn't empty and this will be called again on the next request,\r\n            // and is probably safest if we await it.\r\n            await this._storage.overwrite(this._heartbeatsCache);\r\n        }\r\n        else {\r\n            this._heartbeatsCache.heartbeats = [];\r\n            // Do not wait for this, to reduce latency.\r\n            void this._storage.overwrite(this._heartbeatsCache);\r\n        }\r\n        return headerString;\r\n    }\r\n}\r\nfunction getUTCDateString() {\r\n    const today = new Date();\r\n    // Returns date format 'YYYY-MM-DD'\r\n    return today.toISOString().substring(0, 10);\r\n}\r\nfunction extractHeartbeatsForHeader(heartbeatsCache, maxSize = MAX_HEADER_BYTES) {\r\n    // Heartbeats grouped by user agent in the standard format to be sent in\r\n    // the header.\r\n    const heartbeatsToSend = [];\r\n    // Single date format heartbeats that are not sent.\r\n    let unsentEntries = heartbeatsCache.slice();\r\n    for (const singleDateHeartbeat of heartbeatsCache) {\r\n        // Look for an existing entry with the same user agent.\r\n        const heartbeatEntry = heartbeatsToSend.find(hb => hb.agent === singleDateHeartbeat.agent);\r\n        if (!heartbeatEntry) {\r\n            // If no entry for this user agent exists, create one.\r\n            heartbeatsToSend.push({\r\n                agent: singleDateHeartbeat.agent,\r\n                dates: [singleDateHeartbeat.date]\r\n            });\r\n            if (countBytes(heartbeatsToSend) > maxSize) {\r\n                // If the header would exceed max size, remove the added heartbeat\r\n                // entry and stop adding to the header.\r\n                heartbeatsToSend.pop();\r\n                break;\r\n            }\r\n        }\r\n        else {\r\n            heartbeatEntry.dates.push(singleDateHeartbeat.date);\r\n            // If the header would exceed max size, remove the added date\r\n            // and stop adding to the header.\r\n            if (countBytes(heartbeatsToSend) > maxSize) {\r\n                heartbeatEntry.dates.pop();\r\n                break;\r\n            }\r\n        }\r\n        // Pop unsent entry from queue. (Skipped if adding the entry exceeded\r\n        // quota and the loop breaks early.)\r\n        unsentEntries = unsentEntries.slice(1);\r\n    }\r\n    return {\r\n        heartbeatsToSend,\r\n        unsentEntries\r\n    };\r\n}\r\nclass HeartbeatStorageImpl {\r\n    constructor(app) {\r\n        this.app = app;\r\n        this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();\r\n    }\r\n    async runIndexedDBEnvironmentCheck() {\r\n        if (!isIndexedDBAvailable()) {\r\n            return false;\r\n        }\r\n        else {\r\n            return validateIndexedDBOpenable()\r\n                .then(() => true)\r\n                .catch(() => false);\r\n        }\r\n    }\r\n    /**\r\n     * Read all heartbeats.\r\n     */\r\n    async read() {\r\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\r\n        if (!canUseIndexedDB) {\r\n            return { heartbeats: [] };\r\n        }\r\n        else {\r\n            const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);\r\n            return idbHeartbeatObject || { heartbeats: [] };\r\n        }\r\n    }\r\n    // overwrite the storage with the provided heartbeats\r\n    async overwrite(heartbeatsObject) {\r\n        var _a;\r\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\r\n        if (!canUseIndexedDB) {\r\n            return;\r\n        }\r\n        else {\r\n            const existingHeartbeatsObject = await this.read();\r\n            return writeHeartbeatsToIndexedDB(this.app, {\r\n                lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,\r\n                heartbeats: heartbeatsObject.heartbeats\r\n            });\r\n        }\r\n    }\r\n    // add heartbeats\r\n    async add(heartbeatsObject) {\r\n        var _a;\r\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\r\n        if (!canUseIndexedDB) {\r\n            return;\r\n        }\r\n        else {\r\n            const existingHeartbeatsObject = await this.read();\r\n            return writeHeartbeatsToIndexedDB(this.app, {\r\n                lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,\r\n                heartbeats: [\r\n                    ...existingHeartbeatsObject.heartbeats,\r\n                    ...heartbeatsObject.heartbeats\r\n                ]\r\n            });\r\n        }\r\n    }\r\n}\r\n/**\r\n * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped\r\n * in a platform logging header JSON object, stringified, and converted\r\n * to base 64.\r\n */\r\nfunction countBytes(heartbeatsCache) {\r\n    // base64 has a restricted set of characters, all of which should be 1 byte.\r\n    return base64urlEncodeWithoutPadding(\r\n    // heartbeatsCache wrapper properties\r\n    JSON.stringify({ version: 2, heartbeats: heartbeatsCache })).length;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction registerCoreComponents(variant) {\r\n    _registerComponent(new Component('platform-logger', container => new PlatformLoggerServiceImpl(container), \"PRIVATE\" /* PRIVATE */));\r\n    _registerComponent(new Component('heartbeat', container => new HeartbeatServiceImpl(container), \"PRIVATE\" /* PRIVATE */));\r\n    // Register `app` package.\r\n    registerVersion(name$o, version$1, variant);\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name$o, version$1, 'esm2017');\r\n    // Register platform SDK identifier (no version).\r\n    registerVersion('fire-js', '');\r\n}\n\n/**\r\n * Firebase App\r\n *\r\n * @remarks This package coordinates the communication between the different Firebase components\r\n * @packageDocumentation\r\n */\r\nregisterCoreComponents('');\n\nexport { SDK_VERSION, DEFAULT_ENTRY_NAME as _DEFAULT_ENTRY_NAME, _addComponent, _addOrOverwriteComponent, _apps, _clearComponents, _components, _getProvider, _registerComponent, _removeServiceInstance, deleteApp, getApp, getApps, initializeApp, onLog, registerVersion, setLogLevel };\n//# sourceMappingURL=index.esm2017.js.map\n","import { registerVersion } from '@firebase/app';\nexport * from '@firebase/app';\n\nvar name = \"firebase\";\nvar version = \"9.9.3\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nregisterVersion(name, version, 'app');\n//# sourceMappingURL=index.esm.js.map\n","import { _registerComponent, registerVersion, _getProvider, getApp, _removeServiceInstance, SDK_VERSION } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { Logger, LogLevel } from '@firebase/logger';\nimport { FirebaseError, createMockUserToken, getModularInstance } from '@firebase/util';\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Simple wrapper around a nullable UID. Mostly exists to make code more\n * readable.\n */\nclass l {\n    constructor(t) {\n        this.uid = t;\n    }\n    isAuthenticated() {\n        return null != this.uid;\n    }\n    /**\n     * Returns a key representing this user, suitable for inclusion in a\n     * dictionary.\n     */    toKey() {\n        return this.isAuthenticated() ? \"uid:\" + this.uid : \"anonymous-user\";\n    }\n    isEqual(t) {\n        return t.uid === this.uid;\n    }\n}\n\n/** A user with a null UID. */ l.UNAUTHENTICATED = new l(null), \n// TODO(mikelehen): Look into getting a proper uid-equivalent for\n// non-FirebaseAuth providers.\nl.GOOGLE_CREDENTIALS = new l(\"google-credentials-uid\"), l.FIRST_PARTY = new l(\"first-party-uid\"), \nl.MOCK_USER = new l(\"mock-user\");\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nlet f = \"9.9.2\";\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst d = new Logger(\"@firebase/firestore\");\n\n/**\n * Sets the verbosity of Cloud Firestore logs (debug, error, or silent).\n *\n * @param logLevel - The verbosity you set for activity and error logging. Can\n *   be any of the following values:\n *\n *   <ul>\n *     <li>`debug` for the most verbose logging level, primarily for\n *     debugging.</li>\n *     <li>`error` to log errors only.</li>\n *     <li><code>`silent` to turn off logging.</li>\n *   </ul>\n */ function w(t) {\n    d.setLogLevel(t);\n}\n\nfunction m(t, ...e) {\n    if (d.logLevel <= LogLevel.DEBUG) {\n        const n = e.map(_);\n        d.debug(`Firestore (${f}): ${t}`, ...n);\n    }\n}\n\nfunction p(t, ...e) {\n    if (d.logLevel <= LogLevel.ERROR) {\n        const n = e.map(_);\n        d.error(`Firestore (${f}): ${t}`, ...n);\n    }\n}\n\n/**\n * @internal\n */ function y(t, ...e) {\n    if (d.logLevel <= LogLevel.WARN) {\n        const n = e.map(_);\n        d.warn(`Firestore (${f}): ${t}`, ...n);\n    }\n}\n\n/**\n * Converts an additional log parameter to a string representation.\n */ function _(t) {\n    if (\"string\" == typeof t) return t;\n    try {\n        return e = t, JSON.stringify(e);\n    } catch (e) {\n        // Converting to JSON failed, just log the object directly\n        return t;\n    }\n    /**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n    /** Formats an object as a JSON string, suitable for logging. */\n    var e;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Unconditionally fails, throwing an Error with the given message.\n * Messages are stripped in production builds.\n *\n * Returns `never` and can be used in expressions:\n * @example\n * let futureVar = fail('not implemented yet');\n */ function g(t = \"Unexpected state\") {\n    // Log the failure in addition to throw an exception, just in case the\n    // exception is swallowed.\n    const e = `FIRESTORE (${f}) INTERNAL ASSERTION FAILED: ` + t;\n    // NOTE: We don't use FirestoreError here because these are internal failures\n    // that cannot be handled by the user. (Also it would create a circular\n    // dependency between the error and assert modules which doesn't work.)\n    throw p(e), new Error(e);\n}\n\n/**\n * Fails if the given assertion condition is false, throwing an Error with the\n * given message if it did.\n *\n * Messages are stripped in production builds.\n */ function v(t, e) {\n    t || g();\n}\n\n/**\n * Casts `obj` to `T`. In non-production builds, verifies that `obj` is an\n * instance of `T` before casting.\n */ function b(t, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ne) {\n    return t;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ const E = \"ok\", T = \"cancelled\", I = \"unknown\", A = \"invalid-argument\", R = \"deadline-exceeded\", P = \"not-found\", V = \"already-exists\", N = \"permission-denied\", D = \"unauthenticated\", $ = \"resource-exhausted\", x = \"failed-precondition\", F = \"aborted\", S = \"out-of-range\", q = \"unimplemented\", O = \"internal\", k = \"unavailable\", C = \"data-loss\";\n\n/** An error returned by a Firestore operation. */ class L extends FirebaseError {\n    /** @hideconstructor */\n    constructor(\n    /**\n     * The backend error code associated with this error.\n     */\n    t, \n    /**\n     * A custom error description.\n     */\n    e) {\n        super(t, e), this.code = t, this.message = e, \n        // HACK: We write a toString property directly because Error is not a real\n        // class and so inheritance does not work correctly. We could alternatively\n        // do the same \"back-door inheritance\" trick that FirebaseError does.\n        this.toString = () => `${this.name}: [code=${this.code}]: ${this.message}`;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ class M {\n    constructor() {\n        this.promise = new Promise(((t, e) => {\n            this.resolve = t, this.reject = e;\n        }));\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ class U {\n    constructor(t, e) {\n        this.user = e, this.type = \"OAuth\", this.headers = new Map, this.headers.set(\"Authorization\", `Bearer ${t}`);\n    }\n}\n\n/**\n * A CredentialsProvider that always yields an empty token.\n * @internal\n */ class j {\n    getToken() {\n        return Promise.resolve(null);\n    }\n    invalidateToken() {}\n    start(t, e) {\n        // Fire with initial user.\n        t.enqueueRetryable((() => e(l.UNAUTHENTICATED)));\n    }\n    shutdown() {}\n}\n\n/**\n * A CredentialsProvider that always returns a constant token. Used for\n * emulator token mocking.\n */ class B {\n    constructor(t) {\n        this.token = t, \n        /**\n         * Stores the listener registered with setChangeListener()\n         * This isn't actually necessary since the UID never changes, but we use this\n         * to verify the listen contract is adhered to in tests.\n         */\n        this.changeListener = null;\n    }\n    getToken() {\n        return Promise.resolve(this.token);\n    }\n    invalidateToken() {}\n    start(t, e) {\n        this.changeListener = e, \n        // Fire with initial user.\n        t.enqueueRetryable((() => e(this.token.user)));\n    }\n    shutdown() {\n        this.changeListener = null;\n    }\n}\n\n/** Credential provider for the Lite SDK. */ class z {\n    constructor(t) {\n        this.auth = null, t.onInit((t => {\n            this.auth = t;\n        }));\n    }\n    getToken() {\n        return this.auth ? this.auth.getToken().then((t => t ? (v(\"string\" == typeof t.accessToken), \n        new U(t.accessToken, new l(this.auth.getUid()))) : null)) : Promise.resolve(null);\n    }\n    invalidateToken() {}\n    start(t, e) {}\n    shutdown() {}\n}\n\n/*\n * FirstPartyToken provides a fresh token each time its value\n * is requested, because if the token is too old, requests will be rejected.\n * Technically this may no longer be necessary since the SDK should gracefully\n * recover from unauthenticated errors (see b/33147818 for context), but it's\n * safer to keep the implementation as-is.\n */ class G {\n    constructor(t, e, n) {\n        this.type = \"FirstParty\", this.user = l.FIRST_PARTY, this.headers = new Map, this.headers.set(\"X-Goog-AuthUser\", e);\n        const r = t.auth.getAuthHeaderValueForFirstParty([]);\n        r && this.headers.set(\"Authorization\", r), n && this.headers.set(\"X-Goog-Iam-Authorization-Token\", n);\n    }\n}\n\n/*\n * Provides user credentials required for the Firestore JavaScript SDK\n * to authenticate the user, using technique that is only available\n * to applications hosted by Google.\n */ class W {\n    constructor(t, e, n) {\n        this.t = t, this.i = e, this.o = n;\n    }\n    getToken() {\n        return Promise.resolve(new G(this.t, this.i, this.o));\n    }\n    start(t, e) {\n        // Fire with initial uid.\n        t.enqueueRetryable((() => e(l.FIRST_PARTY)));\n    }\n    shutdown() {}\n    invalidateToken() {}\n}\n\nclass K {\n    constructor(t) {\n        this.value = t, this.type = \"AppCheck\", this.headers = new Map, t && t.length > 0 && this.headers.set(\"x-firebase-appcheck\", this.value);\n    }\n}\n\n/** AppCheck token provider for the Lite SDK. */ class Q {\n    constructor(t) {\n        this.u = t, this.appCheck = null, t.onInit((t => {\n            this.appCheck = t;\n        }));\n    }\n    getToken() {\n        return this.appCheck ? this.appCheck.getToken().then((t => t ? (v(\"string\" == typeof t.token), \n        new K(t.token)) : null)) : Promise.resolve(null);\n    }\n    invalidateToken() {}\n    start(t, e) {}\n    shutdown() {}\n}\n\n/**\n * Builds a CredentialsProvider depending on the type of\n * the credentials passed in.\n */\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass Y {\n    /**\n     * Constructs a DatabaseInfo using the provided host, databaseId and\n     * persistenceKey.\n     *\n     * @param databaseId - The database to use.\n     * @param appId - The Firebase App Id.\n     * @param persistenceKey - A unique identifier for this Firestore's local\n     * storage (used in conjunction with the databaseId).\n     * @param host - The Firestore backend host to connect to.\n     * @param ssl - Whether to use SSL when connecting.\n     * @param forceLongPolling - Whether to use the forceLongPolling option\n     * when using WebChannel as the network transport.\n     * @param autoDetectLongPolling - Whether to use the detectBufferingProxy\n     * option when using WebChannel as the network transport.\n     * @param useFetchStreams Whether to use the Fetch API instead of\n     * XMLHTTPRequest\n     */\n    constructor(t, e, n, r, s, i, o, u) {\n        this.databaseId = t, this.appId = e, this.persistenceKey = n, this.host = r, this.ssl = s, \n        this.forceLongPolling = i, this.autoDetectLongPolling = o, this.useFetchStreams = u;\n    }\n}\n\n/** The default database name for a project. */\n/**\n * Represents the database ID a Firestore client is associated with.\n * @internal\n */\nclass H {\n    constructor(t, e) {\n        this.projectId = t, this.database = e || \"(default)\";\n    }\n    static empty() {\n        return new H(\"\", \"\");\n    }\n    get isDefaultDatabase() {\n        return \"(default)\" === this.database;\n    }\n    isEqual(t) {\n        return t instanceof H && t.projectId === this.projectId && t.database === this.database;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Path represents an ordered sequence of string segments.\n */\nclass J {\n    constructor(t, e, n) {\n        void 0 === e ? e = 0 : e > t.length && g(), void 0 === n ? n = t.length - e : n > t.length - e && g(), \n        this.segments = t, this.offset = e, this.len = n;\n    }\n    get length() {\n        return this.len;\n    }\n    isEqual(t) {\n        return 0 === J.comparator(this, t);\n    }\n    child(t) {\n        const e = this.segments.slice(this.offset, this.limit());\n        return t instanceof J ? t.forEach((t => {\n            e.push(t);\n        })) : e.push(t), this.construct(e);\n    }\n    /** The index of one past the last segment of the path. */    limit() {\n        return this.offset + this.length;\n    }\n    popFirst(t) {\n        return t = void 0 === t ? 1 : t, this.construct(this.segments, this.offset + t, this.length - t);\n    }\n    popLast() {\n        return this.construct(this.segments, this.offset, this.length - 1);\n    }\n    firstSegment() {\n        return this.segments[this.offset];\n    }\n    lastSegment() {\n        return this.get(this.length - 1);\n    }\n    get(t) {\n        return this.segments[this.offset + t];\n    }\n    isEmpty() {\n        return 0 === this.length;\n    }\n    isPrefixOf(t) {\n        if (t.length < this.length) return !1;\n        for (let e = 0; e < this.length; e++) if (this.get(e) !== t.get(e)) return !1;\n        return !0;\n    }\n    isImmediateParentOf(t) {\n        if (this.length + 1 !== t.length) return !1;\n        for (let e = 0; e < this.length; e++) if (this.get(e) !== t.get(e)) return !1;\n        return !0;\n    }\n    forEach(t) {\n        for (let e = this.offset, n = this.limit(); e < n; e++) t(this.segments[e]);\n    }\n    toArray() {\n        return this.segments.slice(this.offset, this.limit());\n    }\n    static comparator(t, e) {\n        const n = Math.min(t.length, e.length);\n        for (let r = 0; r < n; r++) {\n            const n = t.get(r), s = e.get(r);\n            if (n < s) return -1;\n            if (n > s) return 1;\n        }\n        return t.length < e.length ? -1 : t.length > e.length ? 1 : 0;\n    }\n}\n\n/**\n * A slash-separated path for navigating resources (documents and collections)\n * within Firestore.\n *\n * @internal\n */ class X extends J {\n    construct(t, e, n) {\n        return new X(t, e, n);\n    }\n    canonicalString() {\n        // NOTE: The client is ignorant of any path segments containing escape\n        // sequences (e.g. __id123__) and just passes them through raw (they exist\n        // for legacy reasons and should not be used frequently).\n        return this.toArray().join(\"/\");\n    }\n    toString() {\n        return this.canonicalString();\n    }\n    /**\n     * Creates a resource path from the given slash-delimited string. If multiple\n     * arguments are provided, all components are combined. Leading and trailing\n     * slashes from all components are ignored.\n     */    static fromString(...t) {\n        // NOTE: The client is ignorant of any path segments containing escape\n        // sequences (e.g. __id123__) and just passes them through raw (they exist\n        // for legacy reasons and should not be used frequently).\n        const e = [];\n        for (const n of t) {\n            if (n.indexOf(\"//\") >= 0) throw new L(A, `Invalid segment (${n}). Paths must not contain // in them.`);\n            // Strip leading and traling slashed.\n                        e.push(...n.split(\"/\").filter((t => t.length > 0)));\n        }\n        return new X(e);\n    }\n    static emptyPath() {\n        return new X([]);\n    }\n}\n\nconst Z = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\n\n/**\n * A dot-separated path for navigating sub-objects within a document.\n * @internal\n */ class tt extends J {\n    construct(t, e, n) {\n        return new tt(t, e, n);\n    }\n    /**\n     * Returns true if the string could be used as a segment in a field path\n     * without escaping.\n     */    static isValidIdentifier(t) {\n        return Z.test(t);\n    }\n    canonicalString() {\n        return this.toArray().map((t => (t = t.replace(/\\\\/g, \"\\\\\\\\\").replace(/`/g, \"\\\\`\"), \n        tt.isValidIdentifier(t) || (t = \"`\" + t + \"`\"), t))).join(\".\");\n    }\n    toString() {\n        return this.canonicalString();\n    }\n    /**\n     * Returns true if this field references the key of a document.\n     */    isKeyField() {\n        return 1 === this.length && \"__name__\" === this.get(0);\n    }\n    /**\n     * The field designating the key of a document.\n     */    static keyField() {\n        return new tt([ \"__name__\" ]);\n    }\n    /**\n     * Parses a field string from the given server-formatted string.\n     *\n     * - Splitting the empty string is not allowed (for now at least).\n     * - Empty segments within the string (e.g. if there are two consecutive\n     *   separators) are not allowed.\n     *\n     * TODO(b/37244157): we should make this more strict. Right now, it allows\n     * non-identifier path components, even if they aren't escaped.\n     */    static fromServerFormat(t) {\n        const e = [];\n        let n = \"\", r = 0;\n        const s = () => {\n            if (0 === n.length) throw new L(A, `Invalid field path (${t}). Paths must not be empty, begin with '.', end with '.', or contain '..'`);\n            e.push(n), n = \"\";\n        };\n        let i = !1;\n        for (;r < t.length; ) {\n            const e = t[r];\n            if (\"\\\\\" === e) {\n                if (r + 1 === t.length) throw new L(A, \"Path has trailing escape character: \" + t);\n                const e = t[r + 1];\n                if (\"\\\\\" !== e && \".\" !== e && \"`\" !== e) throw new L(A, \"Path has invalid escape sequence: \" + t);\n                n += e, r += 2;\n            } else \"`\" === e ? (i = !i, r++) : \".\" !== e || i ? (n += e, r++) : (s(), r++);\n        }\n        if (s(), i) throw new L(A, \"Unterminated ` in path: \" + t);\n        return new tt(e);\n    }\n    static emptyPath() {\n        return new tt([]);\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @internal\n */ class et {\n    constructor(t) {\n        this.path = t;\n    }\n    static fromPath(t) {\n        return new et(X.fromString(t));\n    }\n    static fromName(t) {\n        return new et(X.fromString(t).popFirst(5));\n    }\n    static empty() {\n        return new et(X.emptyPath());\n    }\n    get collectionGroup() {\n        return this.path.popLast().lastSegment();\n    }\n    /** Returns true if the document is in the specified collectionId. */    hasCollectionId(t) {\n        return this.path.length >= 2 && this.path.get(this.path.length - 2) === t;\n    }\n    /** Returns the collection group (i.e. the name of the parent collection) for this key. */    getCollectionGroup() {\n        return this.path.get(this.path.length - 2);\n    }\n    /** Returns the fully qualified path to the parent collection. */    getCollectionPath() {\n        return this.path.popLast();\n    }\n    isEqual(t) {\n        return null !== t && 0 === X.comparator(this.path, t.path);\n    }\n    toString() {\n        return this.path.toString();\n    }\n    static comparator(t, e) {\n        return X.comparator(t.path, e.path);\n    }\n    static isDocumentKey(t) {\n        return t.length % 2 == 0;\n    }\n    /**\n     * Creates and returns a new document key with the given segments.\n     *\n     * @param segments - The segments of the path to the document\n     * @returns A new instance of DocumentKey\n     */    static fromSegments(t) {\n        return new et(new X(t.slice()));\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ function nt(t, e, n) {\n    if (!n) throw new L(A, `Function ${t}() cannot be called with an empty ${e}.`);\n}\n\n/**\n * Validates that two boolean options are not set at the same time.\n * @internal\n */\n/**\n * Validates that `path` refers to a document (indicated by the fact it contains\n * an even numbers of segments).\n */\nfunction rt(t) {\n    if (!et.isDocumentKey(t)) throw new L(A, `Invalid document reference. Document references must have an even number of segments, but ${t} has ${t.length}.`);\n}\n\n/**\n * Validates that `path` refers to a collection (indicated by the fact it\n * contains an odd numbers of segments).\n */ function st(t) {\n    if (et.isDocumentKey(t)) throw new L(A, `Invalid collection reference. Collection references must have an odd number of segments, but ${t} has ${t.length}.`);\n}\n\n/**\n * Returns true if it's a non-null object without a custom prototype\n * (i.e. excludes Array, Date, etc.).\n */\n/** Returns a string describing the type / value of the provided input. */\nfunction it(t) {\n    if (void 0 === t) return \"undefined\";\n    if (null === t) return \"null\";\n    if (\"string\" == typeof t) return t.length > 20 && (t = `${t.substring(0, 20)}...`), \n    JSON.stringify(t);\n    if (\"number\" == typeof t || \"boolean\" == typeof t) return \"\" + t;\n    if (\"object\" == typeof t) {\n        if (t instanceof Array) return \"an array\";\n        {\n            const e = \n            /** try to get the constructor name for an object. */\n            function(t) {\n                if (t.constructor) return t.constructor.name;\n                return null;\n            }\n            /**\n * Casts `obj` to `T`, optionally unwrapping Compat types to expose the\n * underlying instance. Throws if  `obj` is not an instance of `T`.\n *\n * This cast is used in the Lite and Full SDK to verify instance types for\n * arguments passed to the public API.\n * @internal\n */ (t);\n            return e ? `a custom ${e} object` : \"an object\";\n        }\n    }\n    return \"function\" == typeof t ? \"a function\" : g();\n}\n\nfunction ot(t, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ne) {\n    if (\"_delegate\" in t && (\n    // Unwrap Compat types\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    t = t._delegate), !(t instanceof e)) {\n        if (e.name === t.constructor.name) throw new L(A, \"Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?\");\n        {\n            const n = it(t);\n            throw new L(A, `Expected type '${e.name}', but it was: ${n}`);\n        }\n    }\n    return t;\n}\n\nfunction ut(t, e) {\n    if (e <= 0) throw new L(A, `Function ${t}() requires a positive number, but it was: ${e}.`);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns whether a variable is either undefined or null.\n */ function ct(t) {\n    return null == t;\n}\n\n/** Returns whether the value represents -0. */ function at(t) {\n    // Detect if the value is -0.0. Based on polyfill from\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n    return 0 === t && 1 / t == -1 / 0;\n}\n\n/**\n * Returns whether a value is an integer and in the safe integer range\n * @param value - The value to test for being an integer and in the safe range\n */\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst ht = {\n    BatchGetDocuments: \"batchGet\",\n    Commit: \"commit\",\n    RunQuery: \"runQuery\"\n};\n\n/**\n * Maps RPC names to the corresponding REST endpoint name.\n *\n * We use array notation to avoid mangling.\n */\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Error Codes describing the different ways GRPC can fail. These are copied\n * directly from GRPC's sources here:\n *\n * https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\n *\n * Important! The names of these identifiers matter because the string forms\n * are used for reverse lookups from the webchannel stream. Do NOT change the\n * names of these identifiers or change this into a const enum.\n */\nvar lt, ft;\n\n/**\n * Converts an HTTP Status Code to the equivalent error code.\n *\n * @param status - An HTTP Status Code, like 200, 404, 503, etc.\n * @returns The equivalent Code. Unknown status codes are mapped to\n *     Code.UNKNOWN.\n */\nfunction dt(t) {\n    if (void 0 === t) return p(\"RPC_ERROR\", \"HTTP error has no status\"), I;\n    // The canonical error codes for Google APIs [1] specify mapping onto HTTP\n    // status codes but the mapping is not bijective. In each case of ambiguity\n    // this function chooses a primary error.\n    \n    // [1]\n    // https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n        switch (t) {\n      case 200:\n        // OK\n        return E;\n\n      case 400:\n        // Bad Request\n        return x;\n\n        // Other possibilities based on the forward mapping\n        // return Code.INVALID_ARGUMENT;\n        // return Code.OUT_OF_RANGE;\n              case 401:\n        // Unauthorized\n        return D;\n\n      case 403:\n        // Forbidden\n        return N;\n\n      case 404:\n        // Not Found\n        return P;\n\n      case 409:\n        // Conflict\n        return F;\n\n        // Other possibilities:\n        // return Code.ALREADY_EXISTS;\n              case 416:\n        // Range Not Satisfiable\n        return S;\n\n      case 429:\n        // Too Many Requests\n        return $;\n\n      case 499:\n        // Client Closed Request\n        return T;\n\n      case 500:\n        // Internal Server Error\n        return I;\n\n        // Other possibilities:\n        // return Code.INTERNAL;\n        // return Code.DATA_LOSS;\n              case 501:\n        // Unimplemented\n        return q;\n\n      case 503:\n        // Service Unavailable\n        return k;\n\n      case 504:\n        // Gateway Timeout\n        return R;\n\n      default:\n        return t >= 200 && t < 300 ? E : t >= 400 && t < 500 ? x : t >= 500 && t < 600 ? O : I;\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A Rest-based connection that relies on the native HTTP stack\n * (e.g. `fetch` or a polyfill).\n */ (ft = lt || (lt = {}))[ft.OK = 0] = \"OK\", ft[ft.CANCELLED = 1] = \"CANCELLED\", \nft[ft.UNKNOWN = 2] = \"UNKNOWN\", ft[ft.INVALID_ARGUMENT = 3] = \"INVALID_ARGUMENT\", \nft[ft.DEADLINE_EXCEEDED = 4] = \"DEADLINE_EXCEEDED\", ft[ft.NOT_FOUND = 5] = \"NOT_FOUND\", \nft[ft.ALREADY_EXISTS = 6] = \"ALREADY_EXISTS\", ft[ft.PERMISSION_DENIED = 7] = \"PERMISSION_DENIED\", \nft[ft.UNAUTHENTICATED = 16] = \"UNAUTHENTICATED\", ft[ft.RESOURCE_EXHAUSTED = 8] = \"RESOURCE_EXHAUSTED\", \nft[ft.FAILED_PRECONDITION = 9] = \"FAILED_PRECONDITION\", ft[ft.ABORTED = 10] = \"ABORTED\", \nft[ft.OUT_OF_RANGE = 11] = \"OUT_OF_RANGE\", ft[ft.UNIMPLEMENTED = 12] = \"UNIMPLEMENTED\", \nft[ft.INTERNAL = 13] = \"INTERNAL\", ft[ft.UNAVAILABLE = 14] = \"UNAVAILABLE\", ft[ft.DATA_LOSS = 15] = \"DATA_LOSS\";\n\nclass wt extends \n/**\n * Base class for all Rest-based connections to the backend (WebChannel and\n * HTTP).\n */\nclass {\n    constructor(t) {\n        this.databaseInfo = t, this.databaseId = t.databaseId;\n        const e = t.ssl ? \"https\" : \"http\";\n        this.h = e + \"://\" + t.host, this.l = \"projects/\" + this.databaseId.projectId + \"/databases/\" + this.databaseId.database + \"/documents\";\n    }\n    m(t, e, n, r, s) {\n        const i = this.p(t, e);\n        m(\"RestConnection\", \"Sending: \", i, n);\n        const o = {};\n        return this.g(o, r, s), this.v(t, i, o, n).then((t => (m(\"RestConnection\", \"Received: \", t), \n        t)), (e => {\n            throw y(\"RestConnection\", `${t} failed with error: `, e, \"url: \", i, \"request:\", n), \n            e;\n        }));\n    }\n    T(t, e, n, r, s, i) {\n        // The REST API automatically aggregates all of the streamed results, so we\n        // can just use the normal invoke() method.\n        return this.m(t, e, n, r, s);\n    }\n    /**\n     * Modifies the headers for a request, adding any authorization token if\n     * present and any additional headers for the request.\n     */    g(t, e, n) {\n        t[\"X-Goog-Api-Client\"] = \"gl-js/ fire/\" + f, \n        // Content-Type: text/plain will avoid preflight requests which might\n        // mess with CORS and redirects by proxies. If we add custom headers\n        // we will need to change this code to potentially use the $httpOverwrite\n        // parameter supported by ESF to avoid triggering preflight requests.\n        t[\"Content-Type\"] = \"text/plain\", this.databaseInfo.appId && (t[\"X-Firebase-GMPID\"] = this.databaseInfo.appId), \n        e && e.headers.forEach(((e, n) => t[n] = e)), n && n.headers.forEach(((e, n) => t[n] = e));\n    }\n    p(t, e) {\n        const n = ht[t];\n        return `${this.h}/v1/${e}:${n}`;\n    }\n} {\n    /**\n     * @param databaseInfo - The connection info.\n     * @param fetchImpl - `fetch` or a Polyfill that implements the fetch API.\n     */\n    constructor(t, e) {\n        super(t), this.I = e;\n    }\n    A(t, e) {\n        throw new Error(\"Not supported by FetchConnection\");\n    }\n    async v(t, e, n, r) {\n        const s = JSON.stringify(r);\n        let i;\n        try {\n            i = await this.I(e, {\n                method: \"POST\",\n                headers: n,\n                body: s\n            });\n        } catch (t) {\n            throw new L(dt(t.status), \"Request failed with error: \" + t.statusText);\n        }\n        if (!i.ok) throw new L(dt(i.status), \"Request failed with error: \" + i.statusText);\n        return i.json();\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Initializes the HTTP connection for the REST API. */\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Generates `nBytes` of random bytes.\n *\n * If `nBytes < 0` , an error will be thrown.\n */\nfunction mt(t) {\n    // Polyfills for IE and WebWorker by using `self` and `msCrypto` when `crypto` is not available.\n    const e = \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    \"undefined\" != typeof self && (self.crypto || self.msCrypto), n = new Uint8Array(t);\n    if (e && \"function\" == typeof e.getRandomValues) e.getRandomValues(n); else \n    // Falls back to Math.random\n    for (let e = 0; e < t; e++) n[e] = Math.floor(256 * Math.random());\n    return n;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ class pt {\n    static R() {\n        // Alphanumeric characters\n        const t = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\", e = Math.floor(256 / t.length) * t.length;\n        // The largest byte value that is a multiple of `char.length`.\n                let n = \"\";\n        for (;n.length < 20; ) {\n            const r = mt(40);\n            for (let s = 0; s < r.length; ++s) \n            // Only accept values that are [0, maxMultiple), this ensures they can\n            // be evenly mapped to indices of `chars` via a modulo operation.\n            n.length < 20 && r[s] < e && (n += t.charAt(r[s] % t.length));\n        }\n        return n;\n    }\n}\n\nfunction yt(t, e) {\n    return t < e ? -1 : t > e ? 1 : 0;\n}\n\n/** Helper to compare arrays using isEqual(). */ function _t(t, e, n) {\n    return t.length === e.length && t.every(((t, r) => n(t, e[r])));\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// The earliest date supported by Firestore timestamps (0001-01-01T00:00:00Z).\n/**\n * A `Timestamp` represents a point in time independent of any time zone or\n * calendar, represented as seconds and fractions of seconds at nanosecond\n * resolution in UTC Epoch time.\n *\n * It is encoded using the Proleptic Gregorian Calendar which extends the\n * Gregorian calendar backwards to year one. It is encoded assuming all minutes\n * are 60 seconds long, i.e. leap seconds are \"smeared\" so that no leap second\n * table is needed for interpretation. Range is from 0001-01-01T00:00:00Z to\n * 9999-12-31T23:59:59.999999999Z.\n *\n * For examples and further specifications, refer to the\n * {@link https://github.com/google/protobuf/blob/master/src/google/protobuf/timestamp.proto | Timestamp definition}.\n */\nclass gt {\n    /**\n     * Creates a new timestamp.\n     *\n     * @param seconds - The number of seconds of UTC time since Unix epoch\n     *     1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n     *     9999-12-31T23:59:59Z inclusive.\n     * @param nanoseconds - The non-negative fractions of a second at nanosecond\n     *     resolution. Negative second values with fractions must still have\n     *     non-negative nanoseconds values that count forward in time. Must be\n     *     from 0 to 999,999,999 inclusive.\n     */\n    constructor(\n    /**\n     * The number of seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z.\n     */\n    t, \n    /**\n     * The fractions of a second at nanosecond resolution.*\n     */\n    e) {\n        if (this.seconds = t, this.nanoseconds = e, e < 0) throw new L(A, \"Timestamp nanoseconds out of range: \" + e);\n        if (e >= 1e9) throw new L(A, \"Timestamp nanoseconds out of range: \" + e);\n        if (t < -62135596800) throw new L(A, \"Timestamp seconds out of range: \" + t);\n        // This will break in the year 10,000.\n                if (t >= 253402300800) throw new L(A, \"Timestamp seconds out of range: \" + t);\n    }\n    /**\n     * Creates a new timestamp with the current date, with millisecond precision.\n     *\n     * @returns a new timestamp representing the current date.\n     */    static now() {\n        return gt.fromMillis(Date.now());\n    }\n    /**\n     * Creates a new timestamp from the given date.\n     *\n     * @param date - The date to initialize the `Timestamp` from.\n     * @returns A new `Timestamp` representing the same point in time as the given\n     *     date.\n     */    static fromDate(t) {\n        return gt.fromMillis(t.getTime());\n    }\n    /**\n     * Creates a new timestamp from the given number of milliseconds.\n     *\n     * @param milliseconds - Number of milliseconds since Unix epoch\n     *     1970-01-01T00:00:00Z.\n     * @returns A new `Timestamp` representing the same point in time as the given\n     *     number of milliseconds.\n     */    static fromMillis(t) {\n        const e = Math.floor(t / 1e3), n = Math.floor(1e6 * (t - 1e3 * e));\n        return new gt(e, n);\n    }\n    /**\n     * Converts a `Timestamp` to a JavaScript `Date` object. This conversion\n     * causes a loss of precision since `Date` objects only support millisecond\n     * precision.\n     *\n     * @returns JavaScript `Date` object representing the same point in time as\n     *     this `Timestamp`, with millisecond precision.\n     */    toDate() {\n        return new Date(this.toMillis());\n    }\n    /**\n     * Converts a `Timestamp` to a numeric timestamp (in milliseconds since\n     * epoch). This operation causes a loss of precision.\n     *\n     * @returns The point in time corresponding to this timestamp, represented as\n     *     the number of milliseconds since Unix epoch 1970-01-01T00:00:00Z.\n     */    toMillis() {\n        return 1e3 * this.seconds + this.nanoseconds / 1e6;\n    }\n    _compareTo(t) {\n        return this.seconds === t.seconds ? yt(this.nanoseconds, t.nanoseconds) : yt(this.seconds, t.seconds);\n    }\n    /**\n     * Returns true if this `Timestamp` is equal to the provided one.\n     *\n     * @param other - The `Timestamp` to compare against.\n     * @returns true if this `Timestamp` is equal to the provided one.\n     */    isEqual(t) {\n        return t.seconds === this.seconds && t.nanoseconds === this.nanoseconds;\n    }\n    /** Returns a textual representation of this `Timestamp`. */    toString() {\n        return \"Timestamp(seconds=\" + this.seconds + \", nanoseconds=\" + this.nanoseconds + \")\";\n    }\n    /** Returns a JSON-serializable representation of this `Timestamp`. */    toJSON() {\n        return {\n            seconds: this.seconds,\n            nanoseconds: this.nanoseconds\n        };\n    }\n    /**\n     * Converts this object to a primitive string, which allows `Timestamp` objects\n     * to be compared using the `>`, `<=`, `>=` and `>` operators.\n     */    valueOf() {\n        // This method returns a string of the form <seconds>.<nanoseconds> where\n        // <seconds> is translated to have a non-negative value and both <seconds>\n        // and <nanoseconds> are left-padded with zeroes to be a consistent length.\n        // Strings with this format then have a lexiographical ordering that matches\n        // the expected ordering. The <seconds> translation is done to avoid having\n        // a leading negative sign (i.e. a leading '-' character) in its string\n        // representation, which would affect its lexiographical ordering.\n        const t = this.seconds - -62135596800;\n        // Note: Up to 12 decimal digits are required to represent all valid\n        // 'seconds' values.\n                return String(t).padStart(12, \"0\") + \".\" + String(this.nanoseconds).padStart(9, \"0\");\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A version of a document in Firestore. This corresponds to the version\n * timestamp, such as update_time or read_time.\n */ class vt {\n    constructor(t) {\n        this.timestamp = t;\n    }\n    static fromTimestamp(t) {\n        return new vt(t);\n    }\n    static min() {\n        return new vt(new gt(0, 0));\n    }\n    static max() {\n        return new vt(new gt(253402300799, 999999999));\n    }\n    compareTo(t) {\n        return this.timestamp._compareTo(t.timestamp);\n    }\n    isEqual(t) {\n        return this.timestamp.isEqual(t.timestamp);\n    }\n    /** Returns a number representation of the version for use in spec tests. */    toMicroseconds() {\n        // Convert to microseconds.\n        return 1e6 * this.timestamp.seconds + this.timestamp.nanoseconds / 1e3;\n    }\n    toString() {\n        return \"SnapshotVersion(\" + this.timestamp.toString() + \")\";\n    }\n    toTimestamp() {\n        return this.timestamp;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ function bt(t) {\n    let e = 0;\n    for (const n in t) Object.prototype.hasOwnProperty.call(t, n) && e++;\n    return e;\n}\n\nfunction Et(t, e) {\n    for (const n in t) Object.prototype.hasOwnProperty.call(t, n) && e(n, t[n]);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// An immutable sorted map implementation, based on a Left-leaning Red-Black\n// tree.\nclass Tt {\n    constructor(t, e) {\n        this.comparator = t, this.root = e || At.EMPTY;\n    }\n    // Returns a copy of the map, with the specified key/value added or replaced.\n    insert(t, e) {\n        return new Tt(this.comparator, this.root.insert(t, e, this.comparator).copy(null, null, At.BLACK, null, null));\n    }\n    // Returns a copy of the map, with the specified key removed.\n    remove(t) {\n        return new Tt(this.comparator, this.root.remove(t, this.comparator).copy(null, null, At.BLACK, null, null));\n    }\n    // Returns the value of the node with the given key, or null.\n    get(t) {\n        let e = this.root;\n        for (;!e.isEmpty(); ) {\n            const n = this.comparator(t, e.key);\n            if (0 === n) return e.value;\n            n < 0 ? e = e.left : n > 0 && (e = e.right);\n        }\n        return null;\n    }\n    // Returns the index of the element in this sorted map, or -1 if it doesn't\n    // exist.\n    indexOf(t) {\n        // Number of nodes that were pruned when descending right\n        let e = 0, n = this.root;\n        for (;!n.isEmpty(); ) {\n            const r = this.comparator(t, n.key);\n            if (0 === r) return e + n.left.size;\n            r < 0 ? n = n.left : (\n            // Count all nodes left of the node plus the node itself\n            e += n.left.size + 1, n = n.right);\n        }\n        // Node not found\n                return -1;\n    }\n    isEmpty() {\n        return this.root.isEmpty();\n    }\n    // Returns the total number of nodes in the map.\n    get size() {\n        return this.root.size;\n    }\n    // Returns the minimum key in the map.\n    minKey() {\n        return this.root.minKey();\n    }\n    // Returns the maximum key in the map.\n    maxKey() {\n        return this.root.maxKey();\n    }\n    // Traverses the map in key order and calls the specified action function\n    // for each key/value pair. If action returns true, traversal is aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    inorderTraversal(t) {\n        return this.root.inorderTraversal(t);\n    }\n    forEach(t) {\n        this.inorderTraversal(((e, n) => (t(e, n), !1)));\n    }\n    toString() {\n        const t = [];\n        return this.inorderTraversal(((e, n) => (t.push(`${e}:${n}`), !1))), `{${t.join(\", \")}}`;\n    }\n    // Traverses the map in reverse key order and calls the specified action\n    // function for each key/value pair. If action returns true, traversal is\n    // aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    reverseTraversal(t) {\n        return this.root.reverseTraversal(t);\n    }\n    // Returns an iterator over the SortedMap.\n    getIterator() {\n        return new It(this.root, null, this.comparator, !1);\n    }\n    getIteratorFrom(t) {\n        return new It(this.root, t, this.comparator, !1);\n    }\n    getReverseIterator() {\n        return new It(this.root, null, this.comparator, !0);\n    }\n    getReverseIteratorFrom(t) {\n        return new It(this.root, t, this.comparator, !0);\n    }\n}\n\n // end SortedMap\n// An iterator over an LLRBNode.\nclass It {\n    constructor(t, e, n, r) {\n        this.isReverse = r, this.nodeStack = [];\n        let s = 1;\n        for (;!t.isEmpty(); ) if (s = e ? n(t.key, e) : 1, \n        // flip the comparison if we're going in reverse\n        e && r && (s *= -1), s < 0) \n        // This node is less than our start key. ignore it\n        t = this.isReverse ? t.left : t.right; else {\n            if (0 === s) {\n                // This node is exactly equal to our start key. Push it on the stack,\n                // but stop iterating;\n                this.nodeStack.push(t);\n                break;\n            }\n            // This node is greater than our start key, add it to the stack and move\n            // to the next one\n            this.nodeStack.push(t), t = this.isReverse ? t.right : t.left;\n        }\n    }\n    getNext() {\n        let t = this.nodeStack.pop();\n        const e = {\n            key: t.key,\n            value: t.value\n        };\n        if (this.isReverse) for (t = t.left; !t.isEmpty(); ) this.nodeStack.push(t), t = t.right; else for (t = t.right; !t.isEmpty(); ) this.nodeStack.push(t), \n        t = t.left;\n        return e;\n    }\n    hasNext() {\n        return this.nodeStack.length > 0;\n    }\n    peek() {\n        if (0 === this.nodeStack.length) return null;\n        const t = this.nodeStack[this.nodeStack.length - 1];\n        return {\n            key: t.key,\n            value: t.value\n        };\n    }\n}\n\n // end SortedMapIterator\n// Represents a node in a Left-leaning Red-Black tree.\nclass At {\n    constructor(t, e, n, r, s) {\n        this.key = t, this.value = e, this.color = null != n ? n : At.RED, this.left = null != r ? r : At.EMPTY, \n        this.right = null != s ? s : At.EMPTY, this.size = this.left.size + 1 + this.right.size;\n    }\n    // Returns a copy of the current node, optionally replacing pieces of it.\n    copy(t, e, n, r, s) {\n        return new At(null != t ? t : this.key, null != e ? e : this.value, null != n ? n : this.color, null != r ? r : this.left, null != s ? s : this.right);\n    }\n    isEmpty() {\n        return !1;\n    }\n    // Traverses the tree in key order and calls the specified action function\n    // for each node. If action returns true, traversal is aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    inorderTraversal(t) {\n        return this.left.inorderTraversal(t) || t(this.key, this.value) || this.right.inorderTraversal(t);\n    }\n    // Traverses the tree in reverse key order and calls the specified action\n    // function for each node. If action returns true, traversal is aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    reverseTraversal(t) {\n        return this.right.reverseTraversal(t) || t(this.key, this.value) || this.left.reverseTraversal(t);\n    }\n    // Returns the minimum node in the tree.\n    min() {\n        return this.left.isEmpty() ? this : this.left.min();\n    }\n    // Returns the maximum key in the tree.\n    minKey() {\n        return this.min().key;\n    }\n    // Returns the maximum key in the tree.\n    maxKey() {\n        return this.right.isEmpty() ? this.key : this.right.maxKey();\n    }\n    // Returns new tree, with the key/value added.\n    insert(t, e, n) {\n        let r = this;\n        const s = n(t, r.key);\n        return r = s < 0 ? r.copy(null, null, null, r.left.insert(t, e, n), null) : 0 === s ? r.copy(null, e, null, null, null) : r.copy(null, null, null, null, r.right.insert(t, e, n)), \n        r.fixUp();\n    }\n    removeMin() {\n        if (this.left.isEmpty()) return At.EMPTY;\n        let t = this;\n        return t.left.isRed() || t.left.left.isRed() || (t = t.moveRedLeft()), t = t.copy(null, null, null, t.left.removeMin(), null), \n        t.fixUp();\n    }\n    // Returns new tree, with the specified item removed.\n    remove(t, e) {\n        let n, r = this;\n        if (e(t, r.key) < 0) r.left.isEmpty() || r.left.isRed() || r.left.left.isRed() || (r = r.moveRedLeft()), \n        r = r.copy(null, null, null, r.left.remove(t, e), null); else {\n            if (r.left.isRed() && (r = r.rotateRight()), r.right.isEmpty() || r.right.isRed() || r.right.left.isRed() || (r = r.moveRedRight()), \n            0 === e(t, r.key)) {\n                if (r.right.isEmpty()) return At.EMPTY;\n                n = r.right.min(), r = r.copy(n.key, n.value, null, null, r.right.removeMin());\n            }\n            r = r.copy(null, null, null, null, r.right.remove(t, e));\n        }\n        return r.fixUp();\n    }\n    isRed() {\n        return this.color;\n    }\n    // Returns new tree after performing any needed rotations.\n    fixUp() {\n        let t = this;\n        return t.right.isRed() && !t.left.isRed() && (t = t.rotateLeft()), t.left.isRed() && t.left.left.isRed() && (t = t.rotateRight()), \n        t.left.isRed() && t.right.isRed() && (t = t.colorFlip()), t;\n    }\n    moveRedLeft() {\n        let t = this.colorFlip();\n        return t.right.left.isRed() && (t = t.copy(null, null, null, null, t.right.rotateRight()), \n        t = t.rotateLeft(), t = t.colorFlip()), t;\n    }\n    moveRedRight() {\n        let t = this.colorFlip();\n        return t.left.left.isRed() && (t = t.rotateRight(), t = t.colorFlip()), t;\n    }\n    rotateLeft() {\n        const t = this.copy(null, null, At.RED, null, this.right.left);\n        return this.right.copy(null, null, this.color, t, null);\n    }\n    rotateRight() {\n        const t = this.copy(null, null, At.RED, this.left.right, null);\n        return this.left.copy(null, null, this.color, null, t);\n    }\n    colorFlip() {\n        const t = this.left.copy(null, null, !this.left.color, null, null), e = this.right.copy(null, null, !this.right.color, null, null);\n        return this.copy(null, null, !this.color, t, e);\n    }\n    // For testing.\n    checkMaxDepth() {\n        const t = this.check();\n        return Math.pow(2, t) <= this.size + 1;\n    }\n    // In a balanced RB tree, the black-depth (number of black nodes) from root to\n    // leaves is equal on both sides.  This function verifies that or asserts.\n    check() {\n        if (this.isRed() && this.left.isRed()) throw g();\n        if (this.right.isRed()) throw g();\n        const t = this.left.check();\n        if (t !== this.right.check()) throw g();\n        return t + (this.isRed() ? 0 : 1);\n    }\n}\n\n // end LLRBNode\n// Empty node is shared between all LLRB trees.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nAt.EMPTY = null, At.RED = !0, At.BLACK = !1;\n\n// end LLRBEmptyNode\nAt.EMPTY = new \n// Represents an empty node (a leaf node in the Red-Black Tree).\nclass {\n    constructor() {\n        this.size = 0;\n    }\n    get key() {\n        throw g();\n    }\n    get value() {\n        throw g();\n    }\n    get color() {\n        throw g();\n    }\n    get left() {\n        throw g();\n    }\n    get right() {\n        throw g();\n    }\n    // Returns a copy of the current node.\n    copy(t, e, n, r, s) {\n        return this;\n    }\n    // Returns a copy of the tree, with the specified key/value added.\n    insert(t, e, n) {\n        return new At(t, e);\n    }\n    // Returns a copy of the tree, with the specified key removed.\n    remove(t, e) {\n        return this;\n    }\n    isEmpty() {\n        return !0;\n    }\n    inorderTraversal(t) {\n        return !1;\n    }\n    reverseTraversal(t) {\n        return !1;\n    }\n    minKey() {\n        return null;\n    }\n    maxKey() {\n        return null;\n    }\n    isRed() {\n        return !1;\n    }\n    // For testing.\n    checkMaxDepth() {\n        return !0;\n    }\n    check() {\n        return 0;\n    }\n};\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * SortedSet is an immutable (copy-on-write) collection that holds elements\n * in order specified by the provided comparator.\n *\n * NOTE: if provided comparator returns 0 for two elements, we consider them to\n * be equal!\n */\nclass Rt {\n    constructor(t) {\n        this.comparator = t, this.data = new Tt(this.comparator);\n    }\n    has(t) {\n        return null !== this.data.get(t);\n    }\n    first() {\n        return this.data.minKey();\n    }\n    last() {\n        return this.data.maxKey();\n    }\n    get size() {\n        return this.data.size;\n    }\n    indexOf(t) {\n        return this.data.indexOf(t);\n    }\n    /** Iterates elements in order defined by \"comparator\" */    forEach(t) {\n        this.data.inorderTraversal(((e, n) => (t(e), !1)));\n    }\n    /** Iterates over `elem`s such that: range[0] &lt;= elem &lt; range[1]. */    forEachInRange(t, e) {\n        const n = this.data.getIteratorFrom(t[0]);\n        for (;n.hasNext(); ) {\n            const r = n.getNext();\n            if (this.comparator(r.key, t[1]) >= 0) return;\n            e(r.key);\n        }\n    }\n    /**\n     * Iterates over `elem`s such that: start &lt;= elem until false is returned.\n     */    forEachWhile(t, e) {\n        let n;\n        for (n = void 0 !== e ? this.data.getIteratorFrom(e) : this.data.getIterator(); n.hasNext(); ) {\n            if (!t(n.getNext().key)) return;\n        }\n    }\n    /** Finds the least element greater than or equal to `elem`. */    firstAfterOrEqual(t) {\n        const e = this.data.getIteratorFrom(t);\n        return e.hasNext() ? e.getNext().key : null;\n    }\n    getIterator() {\n        return new Pt(this.data.getIterator());\n    }\n    getIteratorFrom(t) {\n        return new Pt(this.data.getIteratorFrom(t));\n    }\n    /** Inserts or updates an element */    add(t) {\n        return this.copy(this.data.remove(t).insert(t, !0));\n    }\n    /** Deletes an element */    delete(t) {\n        return this.has(t) ? this.copy(this.data.remove(t)) : this;\n    }\n    isEmpty() {\n        return this.data.isEmpty();\n    }\n    unionWith(t) {\n        let e = this;\n        // Make sure `result` always refers to the larger one of the two sets.\n                return e.size < t.size && (e = t, t = this), t.forEach((t => {\n            e = e.add(t);\n        })), e;\n    }\n    isEqual(t) {\n        if (!(t instanceof Rt)) return !1;\n        if (this.size !== t.size) return !1;\n        const e = this.data.getIterator(), n = t.data.getIterator();\n        for (;e.hasNext(); ) {\n            const t = e.getNext().key, r = n.getNext().key;\n            if (0 !== this.comparator(t, r)) return !1;\n        }\n        return !0;\n    }\n    toArray() {\n        const t = [];\n        return this.forEach((e => {\n            t.push(e);\n        })), t;\n    }\n    toString() {\n        const t = [];\n        return this.forEach((e => t.push(e))), \"SortedSet(\" + t.toString() + \")\";\n    }\n    copy(t) {\n        const e = new Rt(this.comparator);\n        return e.data = t, e;\n    }\n}\n\nclass Pt {\n    constructor(t) {\n        this.iter = t;\n    }\n    getNext() {\n        return this.iter.getNext().key;\n    }\n    hasNext() {\n        return this.iter.hasNext();\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Provides a set of fields that can be used to partially patch a document.\n * FieldMask is used in conjunction with ObjectValue.\n * Examples:\n *   foo - Overwrites foo entirely with the provided value. If foo is not\n *         present in the companion ObjectValue, the field is deleted.\n *   foo.bar - Overwrites only the field bar of the object foo.\n *             If foo is not an object, foo is replaced with an object\n *             containing foo\n */ class Vt {\n    constructor(t) {\n        this.fields = t, \n        // TODO(dimond): validation of FieldMask\n        // Sort the field mask to support `FieldMask.isEqual()` and assert below.\n        t.sort(tt.comparator);\n    }\n    static empty() {\n        return new Vt([]);\n    }\n    /**\n     * Returns a new FieldMask object that is the result of adding all the given\n     * fields paths to this field mask.\n     */    unionWith(t) {\n        let e = new Rt(tt.comparator);\n        for (const t of this.fields) e = e.add(t);\n        for (const n of t) e = e.add(n);\n        return new Vt(e.toArray());\n    }\n    /**\n     * Verifies that `fieldPath` is included by at least one field in this field\n     * mask.\n     *\n     * This is an O(n) operation, where `n` is the size of the field mask.\n     */    covers(t) {\n        for (const e of this.fields) if (e.isPrefixOf(t)) return !0;\n        return !1;\n    }\n    isEqual(t) {\n        return _t(this.fields, t.fields, ((t, e) => t.isEqual(e)));\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Converts a Base64 encoded string to a binary string. */\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Immutable class that represents a \"proto\" byte string.\n *\n * Proto byte strings can either be Base64-encoded strings or Uint8Arrays when\n * sent on the wire. This class abstracts away this differentiation by holding\n * the proto byte string in a common class that must be converted into a string\n * before being sent as a proto.\n * @internal\n */\nclass Nt {\n    constructor(t) {\n        this.binaryString = t;\n    }\n    static fromBase64String(t) {\n        const e = atob(t);\n        return new Nt(e);\n    }\n    static fromUint8Array(t) {\n        // TODO(indexing); Remove the copy of the byte string here as this method\n        // is frequently called during indexing.\n        const e = \n        /**\n * Helper function to convert an Uint8array to a binary string.\n */\n        function(t) {\n            let e = \"\";\n            for (let n = 0; n < t.length; ++n) e += String.fromCharCode(t[n]);\n            return e;\n        }\n        /**\n * Helper function to convert a binary string to an Uint8Array.\n */ (t);\n        return new Nt(e);\n    }\n    [Symbol.iterator]() {\n        let t = 0;\n        return {\n            next: () => t < this.binaryString.length ? {\n                value: this.binaryString.charCodeAt(t++),\n                done: !1\n            } : {\n                value: void 0,\n                done: !0\n            }\n        };\n    }\n    toBase64() {\n        return t = this.binaryString, btoa(t);\n        /** Converts a binary string to a Base64 encoded string. */\n        var t;\n    }\n    toUint8Array() {\n        return function(t) {\n            const e = new Uint8Array(t.length);\n            for (let n = 0; n < t.length; n++) e[n] = t.charCodeAt(n);\n            return e;\n        }\n        /**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n        // A RegExp matching ISO 8601 UTC timestamps with optional fraction.\n        (this.binaryString);\n    }\n    approximateByteSize() {\n        return 2 * this.binaryString.length;\n    }\n    compareTo(t) {\n        return yt(this.binaryString, t.binaryString);\n    }\n    isEqual(t) {\n        return this.binaryString === t.binaryString;\n    }\n}\n\nNt.EMPTY_BYTE_STRING = new Nt(\"\");\n\nconst Dt = new RegExp(/^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(?:\\.(\\d+))?Z$/);\n\n/**\n * Converts the possible Proto values for a timestamp value into a \"seconds and\n * nanos\" representation.\n */ function $t(t) {\n    // The json interface (for the browser) will return an iso timestamp string,\n    // while the proto js library (for node) will return a\n    // google.protobuf.Timestamp instance.\n    if (v(!!t), \"string\" == typeof t) {\n        // The date string can have higher precision (nanos) than the Date class\n        // (millis), so we do some custom parsing here.\n        // Parse the nanos right out of the string.\n        let e = 0;\n        const n = Dt.exec(t);\n        if (v(!!n), n[1]) {\n            // Pad the fraction out to 9 digits (nanos).\n            let t = n[1];\n            t = (t + \"000000000\").substr(0, 9), e = Number(t);\n        }\n        // Parse the date to get the seconds.\n                const r = new Date(t);\n        return {\n            seconds: Math.floor(r.getTime() / 1e3),\n            nanos: e\n        };\n    }\n    return {\n        seconds: xt(t.seconds),\n        nanos: xt(t.nanos)\n    };\n}\n\n/**\n * Converts the possible Proto types for numbers into a JavaScript number.\n * Returns 0 if the value is not numeric.\n */ function xt(t) {\n    // TODO(bjornick): Handle int64 greater than 53 bits.\n    return \"number\" == typeof t ? t : \"string\" == typeof t ? Number(t) : 0;\n}\n\n/** Converts the possible Proto types for Blobs into a ByteString. */ function Ft(t) {\n    return \"string\" == typeof t ? Nt.fromBase64String(t) : Nt.fromUint8Array(t);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Represents a locally-applied ServerTimestamp.\n *\n * Server Timestamps are backed by MapValues that contain an internal field\n * `__type__` with a value of `server_timestamp`. The previous value and local\n * write time are stored in its `__previous_value__` and `__local_write_time__`\n * fields respectively.\n *\n * Notes:\n * - ServerTimestampValue instances are created as the result of applying a\n *   transform. They can only exist in the local view of a document. Therefore\n *   they do not need to be parsed or serialized.\n * - When evaluated locally (e.g. for snapshot.data()), they by default\n *   evaluate to `null`. This behavior can be configured by passing custom\n *   FieldValueOptions to value().\n * - With respect to other ServerTimestampValues, they sort by their\n *   localWriteTime.\n */ function St(t) {\n    var e, n;\n    return \"server_timestamp\" === (null === (n = ((null === (e = null == t ? void 0 : t.mapValue) || void 0 === e ? void 0 : e.fields) || {}).__type__) || void 0 === n ? void 0 : n.stringValue);\n}\n\n/**\n * Returns the value of the field before this ServerTimestamp was set.\n *\n * Preserving the previous values allows the user to display the last resoled\n * value until the backend responds with the timestamp.\n */ function qt(t) {\n    const e = t.mapValue.fields.__previous_value__;\n    return St(e) ? qt(e) : e;\n}\n\n/**\n * Returns the local time at which this timestamp was first set.\n */ function Ot(t) {\n    const e = $t(t.mapValue.fields.__local_write_time__.timestampValue);\n    return new gt(e.seconds, e.nanos);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ const kt = {\n    fields: {\n        __type__: {\n            stringValue: \"__max__\"\n        }\n    }\n};\n\n/** Extracts the backend's type order for the provided value. */\nfunction Ct(t) {\n    return \"nullValue\" in t ? 0 /* NullValue */ : \"booleanValue\" in t ? 1 /* BooleanValue */ : \"integerValue\" in t || \"doubleValue\" in t ? 2 /* NumberValue */ : \"timestampValue\" in t ? 3 /* TimestampValue */ : \"stringValue\" in t ? 5 /* StringValue */ : \"bytesValue\" in t ? 6 /* BlobValue */ : \"referenceValue\" in t ? 7 /* RefValue */ : \"geoPointValue\" in t ? 8 /* GeoPointValue */ : \"arrayValue\" in t ? 9 /* ArrayValue */ : \"mapValue\" in t ? St(t) ? 4 /* ServerTimestampValue */ : \n    /** Returns true if the Value represents the canonical {@link #MAX_VALUE} . */\n    function(t) {\n        return \"__max__\" === (((t.mapValue || {}).fields || {}).__type__ || {}).stringValue;\n    }\n    /**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n    /**\n * An ObjectValue represents a MapValue in the Firestore Proto and offers the\n * ability to add and remove fields (via the ObjectValueBuilder).\n */ (t) ? 9007199254740991 /* MaxValue */ : 10 /* ObjectValue */ : g();\n}\n\n/** Tests `left` and `right` for equality based on the backend semantics. */ function Lt(t, e) {\n    if (t === e) return !0;\n    const n = Ct(t);\n    if (n !== Ct(e)) return !1;\n    switch (n) {\n      case 0 /* NullValue */ :\n      case 9007199254740991 /* MaxValue */ :\n        return !0;\n\n      case 1 /* BooleanValue */ :\n        return t.booleanValue === e.booleanValue;\n\n      case 4 /* ServerTimestampValue */ :\n        return Ot(t).isEqual(Ot(e));\n\n      case 3 /* TimestampValue */ :\n        return function(t, e) {\n            if (\"string\" == typeof t.timestampValue && \"string\" == typeof e.timestampValue && t.timestampValue.length === e.timestampValue.length) \n            // Use string equality for ISO 8601 timestamps\n            return t.timestampValue === e.timestampValue;\n            const n = $t(t.timestampValue), r = $t(e.timestampValue);\n            return n.seconds === r.seconds && n.nanos === r.nanos;\n        }(t, e);\n\n      case 5 /* StringValue */ :\n        return t.stringValue === e.stringValue;\n\n      case 6 /* BlobValue */ :\n        return function(t, e) {\n            return Ft(t.bytesValue).isEqual(Ft(e.bytesValue));\n        }(t, e);\n\n      case 7 /* RefValue */ :\n        return t.referenceValue === e.referenceValue;\n\n      case 8 /* GeoPointValue */ :\n        return function(t, e) {\n            return xt(t.geoPointValue.latitude) === xt(e.geoPointValue.latitude) && xt(t.geoPointValue.longitude) === xt(e.geoPointValue.longitude);\n        }(t, e);\n\n      case 2 /* NumberValue */ :\n        return function(t, e) {\n            if (\"integerValue\" in t && \"integerValue\" in e) return xt(t.integerValue) === xt(e.integerValue);\n            if (\"doubleValue\" in t && \"doubleValue\" in e) {\n                const n = xt(t.doubleValue), r = xt(e.doubleValue);\n                return n === r ? at(n) === at(r) : isNaN(n) && isNaN(r);\n            }\n            return !1;\n        }(t, e);\n\n      case 9 /* ArrayValue */ :\n        return _t(t.arrayValue.values || [], e.arrayValue.values || [], Lt);\n\n      case 10 /* ObjectValue */ :\n        return function(t, e) {\n            const n = t.mapValue.fields || {}, r = e.mapValue.fields || {};\n            if (bt(n) !== bt(r)) return !1;\n            for (const t in n) if (n.hasOwnProperty(t) && (void 0 === r[t] || !Lt(n[t], r[t]))) return !1;\n            return !0;\n        }\n        /** Returns true if the ArrayValue contains the specified element. */ (t, e);\n\n      default:\n        return g();\n    }\n}\n\nfunction Mt(t, e) {\n    return void 0 !== (t.values || []).find((t => Lt(t, e)));\n}\n\nfunction Ut(t, e) {\n    if (t === e) return 0;\n    const n = Ct(t), r = Ct(e);\n    if (n !== r) return yt(n, r);\n    switch (n) {\n      case 0 /* NullValue */ :\n      case 9007199254740991 /* MaxValue */ :\n        return 0;\n\n      case 1 /* BooleanValue */ :\n        return yt(t.booleanValue, e.booleanValue);\n\n      case 2 /* NumberValue */ :\n        return function(t, e) {\n            const n = xt(t.integerValue || t.doubleValue), r = xt(e.integerValue || e.doubleValue);\n            return n < r ? -1 : n > r ? 1 : n === r ? 0 : \n            // one or both are NaN.\n            isNaN(n) ? isNaN(r) ? 0 : -1 : 1;\n        }(t, e);\n\n      case 3 /* TimestampValue */ :\n        return jt(t.timestampValue, e.timestampValue);\n\n      case 4 /* ServerTimestampValue */ :\n        return jt(Ot(t), Ot(e));\n\n      case 5 /* StringValue */ :\n        return yt(t.stringValue, e.stringValue);\n\n      case 6 /* BlobValue */ :\n        return function(t, e) {\n            const n = Ft(t), r = Ft(e);\n            return n.compareTo(r);\n        }(t.bytesValue, e.bytesValue);\n\n      case 7 /* RefValue */ :\n        return function(t, e) {\n            const n = t.split(\"/\"), r = e.split(\"/\");\n            for (let t = 0; t < n.length && t < r.length; t++) {\n                const e = yt(n[t], r[t]);\n                if (0 !== e) return e;\n            }\n            return yt(n.length, r.length);\n        }(t.referenceValue, e.referenceValue);\n\n      case 8 /* GeoPointValue */ :\n        return function(t, e) {\n            const n = yt(xt(t.latitude), xt(e.latitude));\n            if (0 !== n) return n;\n            return yt(xt(t.longitude), xt(e.longitude));\n        }(t.geoPointValue, e.geoPointValue);\n\n      case 9 /* ArrayValue */ :\n        return function(t, e) {\n            const n = t.values || [], r = e.values || [];\n            for (let t = 0; t < n.length && t < r.length; ++t) {\n                const e = Ut(n[t], r[t]);\n                if (e) return e;\n            }\n            return yt(n.length, r.length);\n        }(t.arrayValue, e.arrayValue);\n\n      case 10 /* ObjectValue */ :\n        return function(t, e) {\n            if (t === kt && e === kt) return 0;\n            if (t === kt) return 1;\n            if (e === kt) return -1;\n            const n = t.fields || {}, r = Object.keys(n), s = e.fields || {}, i = Object.keys(s);\n            // Even though MapValues are likely sorted correctly based on their insertion\n            // order (e.g. when received from the backend), local modifications can bring\n            // elements out of order. We need to re-sort the elements to ensure that\n            // canonical IDs are independent of insertion order.\n            r.sort(), i.sort();\n            for (let t = 0; t < r.length && t < i.length; ++t) {\n                const e = yt(r[t], i[t]);\n                if (0 !== e) return e;\n                const o = Ut(n[r[t]], s[i[t]]);\n                if (0 !== o) return o;\n            }\n            return yt(r.length, i.length);\n        }\n        /** Returns a reference value for the provided database and key. */ (t.mapValue, e.mapValue);\n\n      default:\n        throw g();\n    }\n}\n\nfunction jt(t, e) {\n    if (\"string\" == typeof t && \"string\" == typeof e && t.length === e.length) return yt(t, e);\n    const n = $t(t), r = $t(e), s = yt(n.seconds, r.seconds);\n    return 0 !== s ? s : yt(n.nanos, r.nanos);\n}\n\nfunction Bt(t, e) {\n    return {\n        referenceValue: `projects/${t.projectId}/databases/${t.database}/documents/${e.path.canonicalString()}`\n    };\n}\n\n/** Returns true if `value` is an ArrayValue. */ function zt(t) {\n    return !!t && \"arrayValue\" in t;\n}\n\n/** Returns true if `value` is a NullValue. */ function Gt(t) {\n    return !!t && \"nullValue\" in t;\n}\n\n/** Returns true if `value` is NaN. */ function Wt(t) {\n    return !!t && \"doubleValue\" in t && isNaN(Number(t.doubleValue));\n}\n\n/** Returns true if `value` is a MapValue. */ function Kt(t) {\n    return !!t && \"mapValue\" in t;\n}\n\n/** Creates a deep copy of `source`. */ function Qt(t) {\n    if (t.geoPointValue) return {\n        geoPointValue: Object.assign({}, t.geoPointValue)\n    };\n    if (t.timestampValue && \"object\" == typeof t.timestampValue) return {\n        timestampValue: Object.assign({}, t.timestampValue)\n    };\n    if (t.mapValue) {\n        const e = {\n            mapValue: {\n                fields: {}\n            }\n        };\n        return Et(t.mapValue.fields, ((t, n) => e.mapValue.fields[t] = Qt(n))), e;\n    }\n    if (t.arrayValue) {\n        const e = {\n            arrayValue: {\n                values: []\n            }\n        };\n        for (let n = 0; n < (t.arrayValue.values || []).length; ++n) e.arrayValue.values[n] = Qt(t.arrayValue.values[n]);\n        return e;\n    }\n    return Object.assign({}, t);\n}\n\nclass Yt {\n    constructor(t) {\n        this.value = t;\n    }\n    static empty() {\n        return new Yt({\n            mapValue: {}\n        });\n    }\n    /**\n     * Returns the value at the given path or null.\n     *\n     * @param path - the path to search\n     * @returns The value at the path or null if the path is not set.\n     */    field(t) {\n        if (t.isEmpty()) return this.value;\n        {\n            let e = this.value;\n            for (let n = 0; n < t.length - 1; ++n) if (e = (e.mapValue.fields || {})[t.get(n)], \n            !Kt(e)) return null;\n            return e = (e.mapValue.fields || {})[t.lastSegment()], e || null;\n        }\n    }\n    /**\n     * Sets the field to the provided value.\n     *\n     * @param path - The field path to set.\n     * @param value - The value to set.\n     */    set(t, e) {\n        this.getFieldsMap(t.popLast())[t.lastSegment()] = Qt(e);\n    }\n    /**\n     * Sets the provided fields to the provided values.\n     *\n     * @param data - A map of fields to values (or null for deletes).\n     */    setAll(t) {\n        let e = tt.emptyPath(), n = {}, r = [];\n        t.forEach(((t, s) => {\n            if (!e.isImmediateParentOf(s)) {\n                // Insert the accumulated changes at this parent location\n                const t = this.getFieldsMap(e);\n                this.applyChanges(t, n, r), n = {}, r = [], e = s.popLast();\n            }\n            t ? n[s.lastSegment()] = Qt(t) : r.push(s.lastSegment());\n        }));\n        const s = this.getFieldsMap(e);\n        this.applyChanges(s, n, r);\n    }\n    /**\n     * Removes the field at the specified path. If there is no field at the\n     * specified path, nothing is changed.\n     *\n     * @param path - The field path to remove.\n     */    delete(t) {\n        const e = this.field(t.popLast());\n        Kt(e) && e.mapValue.fields && delete e.mapValue.fields[t.lastSegment()];\n    }\n    isEqual(t) {\n        return Lt(this.value, t.value);\n    }\n    /**\n     * Returns the map that contains the leaf element of `path`. If the parent\n     * entry does not yet exist, or if it is not a map, a new map will be created.\n     */    getFieldsMap(t) {\n        let e = this.value;\n        e.mapValue.fields || (e.mapValue = {\n            fields: {}\n        });\n        for (let n = 0; n < t.length; ++n) {\n            let r = e.mapValue.fields[t.get(n)];\n            Kt(r) && r.mapValue.fields || (r = {\n                mapValue: {\n                    fields: {}\n                }\n            }, e.mapValue.fields[t.get(n)] = r), e = r;\n        }\n        return e.mapValue.fields;\n    }\n    /**\n     * Modifies `fieldsMap` by adding, replacing or deleting the specified\n     * entries.\n     */    applyChanges(t, e, n) {\n        Et(e, ((e, n) => t[e] = n));\n        for (const e of n) delete t[e];\n    }\n    clone() {\n        return new Yt(Qt(this.value));\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Represents a document in Firestore with a key, version, data and whether it\n * has local mutations applied to it.\n *\n * Documents can transition between states via `convertToFoundDocument()`,\n * `convertToNoDocument()` and `convertToUnknownDocument()`. If a document does\n * not transition to one of these states even after all mutations have been\n * applied, `isValidDocument()` returns false and the document should be removed\n * from all views.\n */ class Ht {\n    constructor(t, e, n, r, s, i) {\n        this.key = t, this.documentType = e, this.version = n, this.readTime = r, this.data = s, \n        this.documentState = i;\n    }\n    /**\n     * Creates a document with no known version or data, but which can serve as\n     * base document for mutations.\n     */    static newInvalidDocument(t) {\n        return new Ht(t, 0 /* INVALID */ , vt.min(), vt.min(), Yt.empty(), 0 /* SYNCED */);\n    }\n    /**\n     * Creates a new document that is known to exist with the given data at the\n     * given version.\n     */    static newFoundDocument(t, e, n) {\n        return new Ht(t, 1 /* FOUND_DOCUMENT */ , e, vt.min(), n, 0 /* SYNCED */);\n    }\n    /** Creates a new document that is known to not exist at the given version. */    static newNoDocument(t, e) {\n        return new Ht(t, 2 /* NO_DOCUMENT */ , e, vt.min(), Yt.empty(), 0 /* SYNCED */);\n    }\n    /**\n     * Creates a new document that is known to exist at the given version but\n     * whose data is not known (e.g. a document that was updated without a known\n     * base document).\n     */    static newUnknownDocument(t, e) {\n        return new Ht(t, 3 /* UNKNOWN_DOCUMENT */ , e, vt.min(), Yt.empty(), 2 /* HAS_COMMITTED_MUTATIONS */);\n    }\n    /**\n     * Changes the document type to indicate that it exists and that its version\n     * and data are known.\n     */    convertToFoundDocument(t, e) {\n        return this.version = t, this.documentType = 1 /* FOUND_DOCUMENT */ , this.data = e, \n        this.documentState = 0 /* SYNCED */ , this;\n    }\n    /**\n     * Changes the document type to indicate that it doesn't exist at the given\n     * version.\n     */    convertToNoDocument(t) {\n        return this.version = t, this.documentType = 2 /* NO_DOCUMENT */ , this.data = Yt.empty(), \n        this.documentState = 0 /* SYNCED */ , this;\n    }\n    /**\n     * Changes the document type to indicate that it exists at a given version but\n     * that its data is not known (e.g. a document that was updated without a known\n     * base document).\n     */    convertToUnknownDocument(t) {\n        return this.version = t, this.documentType = 3 /* UNKNOWN_DOCUMENT */ , this.data = Yt.empty(), \n        this.documentState = 2 /* HAS_COMMITTED_MUTATIONS */ , this;\n    }\n    setHasCommittedMutations() {\n        return this.documentState = 2 /* HAS_COMMITTED_MUTATIONS */ , this;\n    }\n    setHasLocalMutations() {\n        return this.documentState = 1 /* HAS_LOCAL_MUTATIONS */ , this.version = vt.min(), \n        this;\n    }\n    setReadTime(t) {\n        return this.readTime = t, this;\n    }\n    get hasLocalMutations() {\n        return 1 /* HAS_LOCAL_MUTATIONS */ === this.documentState;\n    }\n    get hasCommittedMutations() {\n        return 2 /* HAS_COMMITTED_MUTATIONS */ === this.documentState;\n    }\n    get hasPendingWrites() {\n        return this.hasLocalMutations || this.hasCommittedMutations;\n    }\n    isValidDocument() {\n        return 0 /* INVALID */ !== this.documentType;\n    }\n    isFoundDocument() {\n        return 1 /* FOUND_DOCUMENT */ === this.documentType;\n    }\n    isNoDocument() {\n        return 2 /* NO_DOCUMENT */ === this.documentType;\n    }\n    isUnknownDocument() {\n        return 3 /* UNKNOWN_DOCUMENT */ === this.documentType;\n    }\n    isEqual(t) {\n        return t instanceof Ht && this.key.isEqual(t.key) && this.version.isEqual(t.version) && this.documentType === t.documentType && this.documentState === t.documentState && this.data.isEqual(t.data);\n    }\n    mutableCopy() {\n        return new Ht(this.key, this.documentType, this.version, this.readTime, this.data.clone(), this.documentState);\n    }\n    toString() {\n        return `Document(${this.key}, ${this.version}, ${JSON.stringify(this.data.value)}, {documentType: ${this.documentType}}), {documentState: ${this.documentState}})`;\n    }\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Visible for testing\nclass Jt {\n    constructor(t, e = null, n = [], r = [], s = null, i = null, o = null) {\n        this.path = t, this.collectionGroup = e, this.orderBy = n, this.filters = r, this.limit = s, \n        this.startAt = i, this.endAt = o, this.P = null;\n    }\n}\n\n/**\n * Initializes a Target with a path and optional additional query constraints.\n * Path must currently be empty if this is a collection group query.\n *\n * NOTE: you should always construct `Target` from `Query.toTarget` instead of\n * using this factory method, because `Query` provides an implicit `orderBy`\n * property.\n */ function Xt(t, e = null, n = [], r = [], s = null, i = null, o = null) {\n    return new Jt(t, e, n, r, s, i, o);\n}\n\nclass Zt extends class {} {\n    constructor(t, e, n) {\n        super(), this.field = t, this.op = e, this.value = n;\n    }\n    /**\n     * Creates a filter based on the provided arguments.\n     */    static create(t, e, n) {\n        return t.isKeyField() ? \"in\" /* IN */ === e || \"not-in\" /* NOT_IN */ === e ? this.V(t, e, n) : new te(t, e, n) : \"array-contains\" /* ARRAY_CONTAINS */ === e ? new se(t, n) : \"in\" /* IN */ === e ? new ie(t, n) : \"not-in\" /* NOT_IN */ === e ? new oe(t, n) : \"array-contains-any\" /* ARRAY_CONTAINS_ANY */ === e ? new ue(t, n) : new Zt(t, e, n);\n    }\n    static V(t, e, n) {\n        return \"in\" /* IN */ === e ? new ee(t, n) : new ne(t, n);\n    }\n    matches(t) {\n        const e = t.data.field(this.field);\n        // Types do not have to match in NOT_EQUAL filters.\n                return \"!=\" /* NOT_EQUAL */ === this.op ? null !== e && this.N(Ut(e, this.value)) : null !== e && Ct(this.value) === Ct(e) && this.N(Ut(e, this.value));\n        // Only compare types with matching backend order (such as double and int).\n        }\n    N(t) {\n        switch (this.op) {\n          case \"<\" /* LESS_THAN */ :\n            return t < 0;\n\n          case \"<=\" /* LESS_THAN_OR_EQUAL */ :\n            return t <= 0;\n\n          case \"==\" /* EQUAL */ :\n            return 0 === t;\n\n          case \"!=\" /* NOT_EQUAL */ :\n            return 0 !== t;\n\n          case \">\" /* GREATER_THAN */ :\n            return t > 0;\n\n          case \">=\" /* GREATER_THAN_OR_EQUAL */ :\n            return t >= 0;\n\n          default:\n            return g();\n        }\n    }\n    D() {\n        return [ \"<\" /* LESS_THAN */ , \"<=\" /* LESS_THAN_OR_EQUAL */ , \">\" /* GREATER_THAN */ , \">=\" /* GREATER_THAN_OR_EQUAL */ , \"!=\" /* NOT_EQUAL */ , \"not-in\" /* NOT_IN */ ].indexOf(this.op) >= 0;\n    }\n}\n\n/** Filter that matches on key fields (i.e. '__name__'). */\nclass te extends Zt {\n    constructor(t, e, n) {\n        super(t, e, n), this.key = et.fromName(n.referenceValue);\n    }\n    matches(t) {\n        const e = et.comparator(t.key, this.key);\n        return this.N(e);\n    }\n}\n\n/** Filter that matches on key fields within an array. */ class ee extends Zt {\n    constructor(t, e) {\n        super(t, \"in\" /* IN */ , e), this.keys = re(\"in\" /* IN */ , e);\n    }\n    matches(t) {\n        return this.keys.some((e => e.isEqual(t.key)));\n    }\n}\n\n/** Filter that matches on key fields not present within an array. */ class ne extends Zt {\n    constructor(t, e) {\n        super(t, \"not-in\" /* NOT_IN */ , e), this.keys = re(\"not-in\" /* NOT_IN */ , e);\n    }\n    matches(t) {\n        return !this.keys.some((e => e.isEqual(t.key)));\n    }\n}\n\nfunction re(t, e) {\n    var n;\n    return ((null === (n = e.arrayValue) || void 0 === n ? void 0 : n.values) || []).map((t => et.fromName(t.referenceValue)));\n}\n\n/** A Filter that implements the array-contains operator. */ class se extends Zt {\n    constructor(t, e) {\n        super(t, \"array-contains\" /* ARRAY_CONTAINS */ , e);\n    }\n    matches(t) {\n        const e = t.data.field(this.field);\n        return zt(e) && Mt(e.arrayValue, this.value);\n    }\n}\n\n/** A Filter that implements the IN operator. */ class ie extends Zt {\n    constructor(t, e) {\n        super(t, \"in\" /* IN */ , e);\n    }\n    matches(t) {\n        const e = t.data.field(this.field);\n        return null !== e && Mt(this.value.arrayValue, e);\n    }\n}\n\n/** A Filter that implements the not-in operator. */ class oe extends Zt {\n    constructor(t, e) {\n        super(t, \"not-in\" /* NOT_IN */ , e);\n    }\n    matches(t) {\n        if (Mt(this.value.arrayValue, {\n            nullValue: \"NULL_VALUE\"\n        })) return !1;\n        const e = t.data.field(this.field);\n        return null !== e && !Mt(this.value.arrayValue, e);\n    }\n}\n\n/** A Filter that implements the array-contains-any operator. */ class ue extends Zt {\n    constructor(t, e) {\n        super(t, \"array-contains-any\" /* ARRAY_CONTAINS_ANY */ , e);\n    }\n    matches(t) {\n        const e = t.data.field(this.field);\n        return !(!zt(e) || !e.arrayValue.values) && e.arrayValue.values.some((t => Mt(this.value.arrayValue, t)));\n    }\n}\n\n/**\n * Represents a bound of a query.\n *\n * The bound is specified with the given components representing a position and\n * whether it's just before or just after the position (relative to whatever the\n * query order is).\n *\n * The position represents a logical index position for a query. It's a prefix\n * of values for the (potentially implicit) order by clauses of a query.\n *\n * Bound provides a function to determine whether a document comes before or\n * after a bound. This is influenced by whether the position is just before or\n * just after the provided values.\n */ class ce {\n    constructor(t, e) {\n        this.position = t, this.inclusive = e;\n    }\n}\n\n/**\n * An ordering on a field, in some Direction. Direction defaults to ASCENDING.\n */ class ae {\n    constructor(t, e = \"asc\" /* ASCENDING */) {\n        this.field = t, this.dir = e;\n    }\n}\n\nfunction he(t, e) {\n    return t.dir === e.dir && t.field.isEqual(e.field);\n}\n\nfunction le(t, e) {\n    if (null === t) return null === e;\n    if (null === e) return !1;\n    if (t.inclusive !== e.inclusive || t.position.length !== e.position.length) return !1;\n    for (let n = 0; n < t.position.length; n++) {\n        if (!Lt(t.position[n], e.position[n])) return !1;\n    }\n    return !0;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Query encapsulates all the query attributes we support in the SDK. It can\n * be run against the LocalStore, as well as be converted to a `Target` to\n * query the RemoteStore results.\n *\n * Visible for testing.\n */ class fe {\n    /**\n     * Initializes a Query with a path and optional additional query constraints.\n     * Path must currently be empty if this is a collection group query.\n     */\n    constructor(t, e = null, n = [], r = [], s = null, i = \"F\" /* First */ , o = null, u = null) {\n        this.path = t, this.collectionGroup = e, this.explicitOrderBy = n, this.filters = r, \n        this.limit = s, this.limitType = i, this.startAt = o, this.endAt = u, this.$ = null, \n        // The corresponding `Target` of this `Query` instance.\n        this.F = null, this.startAt, this.endAt;\n    }\n}\n\n/** Creates a new Query for a query that matches all documents at `path` */ function de(t) {\n    return t.explicitOrderBy.length > 0 ? t.explicitOrderBy[0].field : null;\n}\n\nfunction we(t) {\n    for (const e of t.filters) if (e.D()) return e.field;\n    return null;\n}\n\n/**\n * Checks if any of the provided Operators are included in the query and\n * returns the first one that is, or null if none are.\n */\n/**\n * Returns whether the query matches a collection group rather than a specific\n * collection.\n */\nfunction me(t) {\n    return null !== t.collectionGroup;\n}\n\n/**\n * Returns the implicit order by constraint that is used to execute the Query,\n * which can be different from the order by constraints the user provided (e.g.\n * the SDK and backend always orders by `__name__`).\n */ function pe(t) {\n    const e = b(t);\n    if (null === e.$) {\n        e.$ = [];\n        const t = we(e), n = de(e);\n        if (null !== t && null === n) \n        // In order to implicitly add key ordering, we must also add the\n        // inequality filter field for it to be a valid query.\n        // Note that the default inequality field and key ordering is ascending.\n        t.isKeyField() || e.$.push(new ae(t)), e.$.push(new ae(tt.keyField(), \"asc\" /* ASCENDING */)); else {\n            let t = !1;\n            for (const n of e.explicitOrderBy) e.$.push(n), n.field.isKeyField() && (t = !0);\n            if (!t) {\n                // The order of the implicit key ordering always matches the last\n                // explicit order by\n                const t = e.explicitOrderBy.length > 0 ? e.explicitOrderBy[e.explicitOrderBy.length - 1].dir : \"asc\" /* ASCENDING */;\n                e.$.push(new ae(tt.keyField(), t));\n            }\n        }\n    }\n    return e.$;\n}\n\n/**\n * Converts this `Query` instance to it's corresponding `Target` representation.\n */ function ye(t) {\n    const e = b(t);\n    if (!e.F) if (\"F\" /* First */ === e.limitType) e.F = Xt(e.path, e.collectionGroup, pe(e), e.filters, e.limit, e.startAt, e.endAt); else {\n        // Flip the orderBy directions since we want the last results\n        const t = [];\n        for (const n of pe(e)) {\n            const e = \"desc\" /* DESCENDING */ === n.dir ? \"asc\" /* ASCENDING */ : \"desc\" /* DESCENDING */;\n            t.push(new ae(n.field, e));\n        }\n        // We need to swap the cursors to match the now-flipped query ordering.\n                const n = e.endAt ? new ce(e.endAt.position, e.endAt.inclusive) : null, r = e.startAt ? new ce(e.startAt.position, e.startAt.inclusive) : null;\n        // Now return as a LimitType.First query.\n        e.F = Xt(e.path, e.collectionGroup, t, e.filters, e.limit, n, r);\n    }\n    return e.F;\n}\n\nfunction _e(t, e) {\n    return function(t, e) {\n        if (t.limit !== e.limit) return !1;\n        if (t.orderBy.length !== e.orderBy.length) return !1;\n        for (let n = 0; n < t.orderBy.length; n++) if (!he(t.orderBy[n], e.orderBy[n])) return !1;\n        if (t.filters.length !== e.filters.length) return !1;\n        for (let s = 0; s < t.filters.length; s++) if (n = t.filters[s], r = e.filters[s], \n        n.op !== r.op || !n.field.isEqual(r.field) || !Lt(n.value, r.value)) return !1;\n        var n, r;\n        return t.collectionGroup === e.collectionGroup && !!t.path.isEqual(e.path) && !!le(t.startAt, e.startAt) && le(t.endAt, e.endAt);\n    }(ye(t), ye(e)) && t.limitType === e.limitType;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns an DoubleValue for `value` that is encoded based the serializer's\n * `useProto3Json` setting.\n */\n/**\n * Returns a value for a number that's appropriate to put into a proto.\n * The return value is an IntegerValue if it can safely represent the value,\n * otherwise a DoubleValue is returned.\n */\nfunction ge(t, e) {\n    return function(t) {\n        return \"number\" == typeof t && Number.isInteger(t) && !at(t) && t <= Number.MAX_SAFE_INTEGER && t >= Number.MIN_SAFE_INTEGER;\n    }(e) ? \n    /**\n * Returns an IntegerValue for `value`.\n */\n    function(t) {\n        return {\n            integerValue: \"\" + t\n        };\n    }(e) : function(t, e) {\n        if (t.S) {\n            if (isNaN(e)) return {\n                doubleValue: \"NaN\"\n            };\n            if (e === 1 / 0) return {\n                doubleValue: \"Infinity\"\n            };\n            if (e === -1 / 0) return {\n                doubleValue: \"-Infinity\"\n            };\n        }\n        return {\n            doubleValue: at(e) ? \"-0\" : e\n        };\n    }(t, e);\n}\n\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Used to represent a field transform on a mutation. */ class ve {\n    constructor() {\n        // Make sure that the structural type of `TransformOperation` is unique.\n        // See https://github.com/microsoft/TypeScript/issues/5451\n        this._ = void 0;\n    }\n}\n\n/** Transforms a value into a server-generated timestamp. */ class be extends ve {}\n\n/** Transforms an array value via a union operation. */ class Ee extends ve {\n    constructor(t) {\n        super(), this.elements = t;\n    }\n}\n\n/** Transforms an array value via a remove operation. */ class Te extends ve {\n    constructor(t) {\n        super(), this.elements = t;\n    }\n}\n\n/**\n * Implements the backend semantics for locally computed NUMERIC_ADD (increment)\n * transforms. Converts all field values to integers or doubles, but unlike the\n * backend does not cap integer values at 2^63. Instead, JavaScript number\n * arithmetic is used and precision loss can occur for values greater than 2^53.\n */ class Ie extends ve {\n    constructor(t, e) {\n        super(), this.q = t, this.O = e;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** A field path and the TransformOperation to perform upon it. */ class Ae {\n    constructor(t, e) {\n        this.field = t, this.transform = e;\n    }\n}\n\n/**\n * Encodes a precondition for a mutation. This follows the model that the\n * backend accepts with the special case of an explicit \"empty\" precondition\n * (meaning no precondition).\n */ class Re {\n    constructor(t, e) {\n        this.updateTime = t, this.exists = e;\n    }\n    /** Creates a new empty Precondition. */    static none() {\n        return new Re;\n    }\n    /** Creates a new Precondition with an exists flag. */    static exists(t) {\n        return new Re(void 0, t);\n    }\n    /** Creates a new Precondition based on a version a document exists at. */    static updateTime(t) {\n        return new Re(t);\n    }\n    /** Returns whether this Precondition is empty. */    get isNone() {\n        return void 0 === this.updateTime && void 0 === this.exists;\n    }\n    isEqual(t) {\n        return this.exists === t.exists && (this.updateTime ? !!t.updateTime && this.updateTime.isEqual(t.updateTime) : !t.updateTime);\n    }\n}\n\n/**\n * A mutation describes a self-contained change to a document. Mutations can\n * create, replace, delete, and update subsets of documents.\n *\n * Mutations not only act on the value of the document but also its version.\n *\n * For local mutations (mutations that haven't been committed yet), we preserve\n * the existing version for Set and Patch mutations. For Delete mutations, we\n * reset the version to 0.\n *\n * Here's the expected transition table.\n *\n * MUTATION           APPLIED TO            RESULTS IN\n *\n * SetMutation        Document(v3)          Document(v3)\n * SetMutation        NoDocument(v3)        Document(v0)\n * SetMutation        InvalidDocument(v0)   Document(v0)\n * PatchMutation      Document(v3)          Document(v3)\n * PatchMutation      NoDocument(v3)        NoDocument(v3)\n * PatchMutation      InvalidDocument(v0)   UnknownDocument(v3)\n * DeleteMutation     Document(v3)          NoDocument(v0)\n * DeleteMutation     NoDocument(v3)        NoDocument(v0)\n * DeleteMutation     InvalidDocument(v0)   NoDocument(v0)\n *\n * For acknowledged mutations, we use the updateTime of the WriteResponse as\n * the resulting version for Set and Patch mutations. As deletes have no\n * explicit update time, we use the commitTime of the WriteResponse for\n * Delete mutations.\n *\n * If a mutation is acknowledged by the backend but fails the precondition check\n * locally, we transition to an `UnknownDocument` and rely on Watch to send us\n * the updated version.\n *\n * Field transforms are used only with Patch and Set Mutations. We use the\n * `updateTransforms` message to store transforms, rather than the `transforms`s\n * messages.\n *\n * ## Subclassing Notes\n *\n * Every type of mutation needs to implement its own applyToRemoteDocument() and\n * applyToLocalView() to implement the actual behavior of applying the mutation\n * to some source document (see `setMutationApplyToRemoteDocument()` for an\n * example).\n */ class Pe {}\n\n/**\n * A mutation that creates or replaces the document at the given key with the\n * object value contents.\n */ class Ve extends Pe {\n    constructor(t, e, n, r = []) {\n        super(), this.key = t, this.value = e, this.precondition = n, this.fieldTransforms = r, \n        this.type = 0 /* Set */;\n    }\n    getFieldMask() {\n        return null;\n    }\n}\n\n/**\n * A mutation that modifies fields of the document at the given key with the\n * given values. The values are applied through a field mask:\n *\n *  * When a field is in both the mask and the values, the corresponding field\n *    is updated.\n *  * When a field is in neither the mask nor the values, the corresponding\n *    field is unmodified.\n *  * When a field is in the mask but not in the values, the corresponding field\n *    is deleted.\n *  * When a field is not in the mask but is in the values, the values map is\n *    ignored.\n */ class Ne extends Pe {\n    constructor(t, e, n, r, s = []) {\n        super(), this.key = t, this.data = e, this.fieldMask = n, this.precondition = r, \n        this.fieldTransforms = s, this.type = 1 /* Patch */;\n    }\n    getFieldMask() {\n        return this.fieldMask;\n    }\n}\n\n/** A mutation that deletes the document at the given key. */ class De extends Pe {\n    constructor(t, e) {\n        super(), this.key = t, this.precondition = e, this.type = 2 /* Delete */ , this.fieldTransforms = [];\n    }\n    getFieldMask() {\n        return null;\n    }\n}\n\n/**\n * A mutation that verifies the existence of the document at the given key with\n * the provided precondition.\n *\n * The `verify` operation is only used in Transactions, and this class serves\n * primarily to facilitate serialization into protos.\n */ class $e extends Pe {\n    constructor(t, e) {\n        super(), this.key = t, this.precondition = e, this.type = 3 /* Verify */ , this.fieldTransforms = [];\n    }\n    getFieldMask() {\n        return null;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ const xe = (() => {\n    const t = {\n        asc: \"ASCENDING\",\n        desc: \"DESCENDING\"\n    };\n    return t;\n})(), Fe = (() => {\n    const t = {\n        \"<\": \"LESS_THAN\",\n        \"<=\": \"LESS_THAN_OR_EQUAL\",\n        \">\": \"GREATER_THAN\",\n        \">=\": \"GREATER_THAN_OR_EQUAL\",\n        \"==\": \"EQUAL\",\n        \"!=\": \"NOT_EQUAL\",\n        \"array-contains\": \"ARRAY_CONTAINS\",\n        in: \"IN\",\n        \"not-in\": \"NOT_IN\",\n        \"array-contains-any\": \"ARRAY_CONTAINS_ANY\"\n    };\n    return t;\n})();\n\n/**\n * This class generates JsonObject values for the Datastore API suitable for\n * sending to either GRPC stub methods or via the JSON/HTTP REST API.\n *\n * The serializer supports both Protobuf.js and Proto3 JSON formats. By\n * setting `useProto3Json` to true, the serializer will use the Proto3 JSON\n * format.\n *\n * For a description of the Proto3 JSON format check\n * https://developers.google.com/protocol-buffers/docs/proto3#json\n *\n * TODO(klimt): We can remove the databaseId argument if we keep the full\n * resource name in documents.\n */\nclass Se {\n    constructor(t, e) {\n        this.databaseId = t, this.S = e;\n    }\n}\n\n/**\n * Returns a value for a number (or null) that's appropriate to put into\n * a google.protobuf.Int32Value proto.\n * DO NOT USE THIS FOR ANYTHING ELSE.\n * This method cheats. It's typed as returning \"number\" because that's what\n * our generated proto interfaces say Int32Value must be. But GRPC actually\n * expects a { value: <number> } struct.\n */\n/**\n * Returns a value for a Date that's appropriate to put into a proto.\n */\nfunction qe(t, e) {\n    if (t.S) {\n        return `${new Date(1e3 * e.seconds).toISOString().replace(/\\.\\d*/, \"\").replace(\"Z\", \"\")}.${(\"000000000\" + e.nanoseconds).slice(-9)}Z`;\n    }\n    return {\n        seconds: \"\" + e.seconds,\n        nanos: e.nanoseconds\n    };\n}\n\n/**\n * Returns a value for bytes that's appropriate to put in a proto.\n *\n * Visible for testing.\n */\nfunction Oe(t, e) {\n    return t.S ? e.toBase64() : e.toUint8Array();\n}\n\nfunction ke(t, e) {\n    return qe(t, e.toTimestamp());\n}\n\nfunction Ce(t) {\n    return v(!!t), vt.fromTimestamp(function(t) {\n        const e = $t(t);\n        return new gt(e.seconds, e.nanos);\n    }(t));\n}\n\nfunction Le(t, e) {\n    return function(t) {\n        return new X([ \"projects\", t.projectId, \"databases\", t.database ]);\n    }(t).child(\"documents\").child(e).canonicalString();\n}\n\nfunction Me(t, e) {\n    return Le(t.databaseId, e.path);\n}\n\nfunction Ue(t, e) {\n    const n = function(t) {\n        const e = X.fromString(t);\n        return v(Xe(e)), e;\n    }(e);\n    if (n.get(1) !== t.databaseId.projectId) throw new L(A, \"Tried to deserialize key from different project: \" + n.get(1) + \" vs \" + t.databaseId.projectId);\n    if (n.get(3) !== t.databaseId.database) throw new L(A, \"Tried to deserialize key from different database: \" + n.get(3) + \" vs \" + t.databaseId.database);\n    return new et((v((r = n).length > 4 && \"documents\" === r.get(4)), r.popFirst(5)));\n    var r;\n    /** Creates a Document proto from key and fields (but no create/update time) */}\n\nfunction je(t, e) {\n    return Le(t.databaseId, e);\n}\n\nfunction Be(t) {\n    return new X([ \"projects\", t.databaseId.projectId, \"databases\", t.databaseId.database ]).canonicalString();\n}\n\nfunction ze(t, e, n) {\n    return {\n        name: Me(t, e),\n        fields: n.value.mapValue.fields\n    };\n}\n\nfunction Ge(t, e) {\n    return \"found\" in e ? function(t, e) {\n        v(!!e.found), e.found.name, e.found.updateTime;\n        const n = Ue(t, e.found.name), r = Ce(e.found.updateTime), s = new Yt({\n            mapValue: {\n                fields: e.found.fields\n            }\n        });\n        return Ht.newFoundDocument(n, r, s);\n    }(t, e) : \"missing\" in e ? function(t, e) {\n        v(!!e.missing), v(!!e.readTime);\n        const n = Ue(t, e.missing), r = Ce(e.readTime);\n        return Ht.newNoDocument(n, r);\n    }(t, e) : g();\n}\n\nfunction We(t, e) {\n    let n;\n    if (e instanceof Ve) n = {\n        update: ze(t, e.key, e.value)\n    }; else if (e instanceof De) n = {\n        delete: Me(t, e.key)\n    }; else if (e instanceof Ne) n = {\n        update: ze(t, e.key, e.data),\n        updateMask: Je(e.fieldMask)\n    }; else {\n        if (!(e instanceof $e)) return g();\n        n = {\n            verify: Me(t, e.key)\n        };\n    }\n    return e.fieldTransforms.length > 0 && (n.updateTransforms = e.fieldTransforms.map((t => function(t, e) {\n        const n = e.transform;\n        if (n instanceof be) return {\n            fieldPath: e.field.canonicalString(),\n            setToServerValue: \"REQUEST_TIME\"\n        };\n        if (n instanceof Ee) return {\n            fieldPath: e.field.canonicalString(),\n            appendMissingElements: {\n                values: n.elements\n            }\n        };\n        if (n instanceof Te) return {\n            fieldPath: e.field.canonicalString(),\n            removeAllFromArray: {\n                values: n.elements\n            }\n        };\n        if (n instanceof Ie) return {\n            fieldPath: e.field.canonicalString(),\n            increment: n.O\n        };\n        throw g();\n    }(0, t)))), e.precondition.isNone || (n.currentDocument = function(t, e) {\n        return void 0 !== e.updateTime ? {\n            updateTime: ke(t, e.updateTime)\n        } : void 0 !== e.exists ? {\n            exists: e.exists\n        } : g();\n    }(t, e.precondition)), n;\n}\n\nfunction Ke(t, e) {\n    // Dissect the path into parent, collectionId, and optional key filter.\n    const n = {\n        structuredQuery: {}\n    }, r = e.path;\n    null !== e.collectionGroup ? (n.parent = je(t, r), n.structuredQuery.from = [ {\n        collectionId: e.collectionGroup,\n        allDescendants: !0\n    } ]) : (n.parent = je(t, r.popLast()), n.structuredQuery.from = [ {\n        collectionId: r.lastSegment()\n    } ]);\n    const s = function(t) {\n        if (0 === t.length) return;\n        const e = t.map((t => \n        // visible for testing\n        function(t) {\n            if (\"==\" /* EQUAL */ === t.op) {\n                if (Wt(t.value)) return {\n                    unaryFilter: {\n                        field: He(t.field),\n                        op: \"IS_NAN\"\n                    }\n                };\n                if (Gt(t.value)) return {\n                    unaryFilter: {\n                        field: He(t.field),\n                        op: \"IS_NULL\"\n                    }\n                };\n            } else if (\"!=\" /* NOT_EQUAL */ === t.op) {\n                if (Wt(t.value)) return {\n                    unaryFilter: {\n                        field: He(t.field),\n                        op: \"IS_NOT_NAN\"\n                    }\n                };\n                if (Gt(t.value)) return {\n                    unaryFilter: {\n                        field: He(t.field),\n                        op: \"IS_NOT_NULL\"\n                    }\n                };\n            }\n            return {\n                fieldFilter: {\n                    field: He(t.field),\n                    op: Ye(t.op),\n                    value: t.value\n                }\n            };\n        }(t)));\n        if (1 === e.length) return e[0];\n        return {\n            compositeFilter: {\n                op: \"AND\",\n                filters: e\n            }\n        };\n    }(e.filters);\n    s && (n.structuredQuery.where = s);\n    const i = function(t) {\n        if (0 === t.length) return;\n        return t.map((t => \n        // visible for testing\n        function(t) {\n            return {\n                field: He(t.field),\n                direction: Qe(t.dir)\n            };\n        }(t)));\n    }(e.orderBy);\n    i && (n.structuredQuery.orderBy = i);\n    const o = function(t, e) {\n        return t.S || ct(e) ? e : {\n            value: e\n        };\n    }(t, e.limit);\n    var u;\n    return null !== o && (n.structuredQuery.limit = o), e.startAt && (n.structuredQuery.startAt = {\n        before: (u = e.startAt).inclusive,\n        values: u.position\n    }), e.endAt && (n.structuredQuery.endAt = function(t) {\n        return {\n            before: !t.inclusive,\n            values: t.position\n        };\n    }\n    // visible for testing\n    (e.endAt)), n;\n}\n\nfunction Qe(t) {\n    return xe[t];\n}\n\n// visible for testing\nfunction Ye(t) {\n    return Fe[t];\n}\n\nfunction He(t) {\n    return {\n        fieldPath: t.canonicalString()\n    };\n}\n\nfunction Je(t) {\n    const e = [];\n    return t.fields.forEach((t => e.push(t.canonicalString()))), {\n        fieldPaths: e\n    };\n}\n\nfunction Xe(t) {\n    // Resource names have at least 4 components (project ID, database ID)\n    return t.length >= 4 && \"projects\" === t.get(0) && \"databases\" === t.get(2);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ function Ze(t) {\n    return new Se(t, /* useProto3Json= */ !0);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A helper for running delayed tasks following an exponential backoff curve\n * between attempts.\n *\n * Each delay is made up of a \"base\" delay which follows the exponential\n * backoff curve, and a +/- 50% \"jitter\" that is calculated and added to the\n * base delay. This prevents clients from accidentally synchronizing their\n * delays causing spikes of load to the backend.\n */\nclass tn {\n    constructor(\n    /**\n     * The AsyncQueue to run backoff operations on.\n     */\n    t, \n    /**\n     * The ID to use when scheduling backoff operations on the AsyncQueue.\n     */\n    e, \n    /**\n     * The initial delay (used as the base delay on the first retry attempt).\n     * Note that jitter will still be applied, so the actual delay could be as\n     * little as 0.5*initialDelayMs.\n     */\n    n = 1e3\n    /**\n     * The multiplier to use to determine the extended base delay after each\n     * attempt.\n     */ , r = 1.5\n    /**\n     * The maximum base delay after which no further backoff is performed.\n     * Note that jitter will still be applied, so the actual delay could be as\n     * much as 1.5*maxDelayMs.\n     */ , s = 6e4) {\n        this.k = t, this.timerId = e, this.C = n, this.L = r, this.M = s, this.U = 0, this.j = null, \n        /** The last backoff attempt, as epoch milliseconds. */\n        this.B = Date.now(), this.reset();\n    }\n    /**\n     * Resets the backoff delay.\n     *\n     * The very next backoffAndWait() will have no delay. If it is called again\n     * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and\n     * subsequent ones will increase according to the backoffFactor.\n     */    reset() {\n        this.U = 0;\n    }\n    /**\n     * Resets the backoff delay to the maximum delay (e.g. for use after a\n     * RESOURCE_EXHAUSTED error).\n     */    G() {\n        this.U = this.M;\n    }\n    /**\n     * Returns a promise that resolves after currentDelayMs, and increases the\n     * delay for any subsequent attempts. If there was a pending backoff operation\n     * already, it will be canceled.\n     */    W(t) {\n        // Cancel any pending backoff operation.\n        this.cancel();\n        // First schedule using the current base (which may be 0 and should be\n        // honored as such).\n        const e = Math.floor(this.U + this.K()), n = Math.max(0, Date.now() - this.B), r = Math.max(0, e - n);\n        // Guard against lastAttemptTime being in the future due to a clock change.\n                r > 0 && m(\"ExponentialBackoff\", `Backing off for ${r} ms (base delay: ${this.U} ms, delay with jitter: ${e} ms, last attempt: ${n} ms ago)`), \n        this.j = this.k.enqueueAfterDelay(this.timerId, r, (() => (this.B = Date.now(), \n        t()))), \n        // Apply backoff factor to determine next delay and ensure it is within\n        // bounds.\n        this.U *= this.L, this.U < this.C && (this.U = this.C), this.U > this.M && (this.U = this.M);\n    }\n    Y() {\n        null !== this.j && (this.j.skipDelay(), this.j = null);\n    }\n    cancel() {\n        null !== this.j && (this.j.cancel(), this.j = null);\n    }\n    /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */    K() {\n        return (Math.random() - .5) * this.U;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Datastore and its related methods are a wrapper around the external Google\n * Cloud Datastore grpc API, which provides an interface that is more convenient\n * for the rest of the client SDK architecture to consume.\n */\n/**\n * An implementation of Datastore that exposes additional state for internal\n * consumption.\n */\nclass en extends class {} {\n    constructor(t, e, n, r) {\n        super(), this.authCredentials = t, this.appCheckCredentials = e, this.H = n, this.q = r, \n        this.J = !1;\n    }\n    X() {\n        if (this.J) throw new L(x, \"The client has already been terminated.\");\n    }\n    /** Invokes the provided RPC with auth and AppCheck tokens. */    m(t, e, n) {\n        return this.X(), Promise.all([ this.authCredentials.getToken(), this.appCheckCredentials.getToken() ]).then((([r, s]) => this.H.m(t, e, n, r, s))).catch((t => {\n            throw \"FirebaseError\" === t.name ? (t.code === D && (this.authCredentials.invalidateToken(), \n            this.appCheckCredentials.invalidateToken()), t) : new L(I, t.toString());\n        }));\n    }\n    /** Invokes the provided RPC with streamed results with auth and AppCheck tokens. */    T(t, e, n, r) {\n        return this.X(), Promise.all([ this.authCredentials.getToken(), this.appCheckCredentials.getToken() ]).then((([s, i]) => this.H.T(t, e, n, s, i, r))).catch((t => {\n            throw \"FirebaseError\" === t.name ? (t.code === D && (this.authCredentials.invalidateToken(), \n            this.appCheckCredentials.invalidateToken()), t) : new L(I, t.toString());\n        }));\n    }\n    terminate() {\n        this.J = !0;\n    }\n}\n\n// TODO(firestorexp): Make sure there is only one Datastore instance per\n// firestore-exp client.\nasync function nn(t, e) {\n    const n = b(t), r = Be(n.q) + \"/documents\", s = {\n        writes: e.map((t => We(n.q, t)))\n    };\n    await n.m(\"Commit\", r, s);\n}\n\nasync function rn(t, e) {\n    const n = b(t), r = Be(n.q) + \"/documents\", s = {\n        documents: e.map((t => Me(n.q, t)))\n    }, i = await n.T(\"BatchGetDocuments\", r, s, e.length), o = new Map;\n    i.forEach((t => {\n        const e = Ge(n.q, t);\n        o.set(e.key.toString(), e);\n    }));\n    const u = [];\n    return e.forEach((t => {\n        const e = o.get(t.toString());\n        v(!!e), u.push(e);\n    })), u;\n}\n\nasync function sn(t, e) {\n    const n = b(t), r = Ke(n.q, ye(e));\n    return (await n.T(\"RunQuery\", r.parent, {\n        structuredQuery: r.structuredQuery\n    })).filter((t => !!t.document)).map((t => function(t, e, n) {\n        const r = Ue(t, e.name), s = Ce(e.updateTime), i = new Yt({\n            mapValue: {\n                fields: e.fields\n            }\n        }), o = Ht.newFoundDocument(r, s, i);\n        return n && o.setHasCommittedMutations(), n ? o.setHasCommittedMutations() : o;\n    }(n.q, t.document, void 0)));\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ const on = new Map;\n\n/**\n * An instance map that ensures only one Datastore exists per Firestore\n * instance.\n */\n/**\n * Returns an initialized and started Datastore for the given Firestore\n * instance. Callers must invoke removeComponents() when the Firestore\n * instance is terminated.\n */\nfunction un(t) {\n    if (t._terminated) throw new L(x, \"The client has already been terminated.\");\n    if (!on.has(t)) {\n        m(\"ComponentProvider\", \"Initializing Datastore\");\n        const i = function(t) {\n            return new wt(t, fetch.bind(null));\n        }((e = t._databaseId, n = t.app.options.appId || \"\", r = t._persistenceKey, s = t._freezeSettings(), \n        new Y(e, n, r, s.host, s.ssl, s.experimentalForceLongPolling, s.experimentalAutoDetectLongPolling, s.useFetchStreams))), o = Ze(t._databaseId), u = function(t, e, n, r) {\n            return new en(t, e, n, r);\n        }(t._authCredentials, t._appCheckCredentials, i, o);\n        on.set(t, u);\n    }\n    var e, n, r, s;\n    /**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */    return on.get(t);\n}\n\n/**\n * Removes all components associated with the provided instance. Must be called\n * when the `Firestore` instance is terminated.\n */\n/**\n * A concrete type describing all the values that can be applied via a\n * user-supplied `FirestoreSettings` object. This is a separate type so that\n * defaults can be supplied and the value can be checked for equality.\n */\nclass cn {\n    constructor(t) {\n        var e;\n        if (void 0 === t.host) {\n            if (void 0 !== t.ssl) throw new L(A, \"Can't provide ssl option if host option is not set\");\n            this.host = \"firestore.googleapis.com\", this.ssl = true;\n        } else this.host = t.host, this.ssl = null === (e = t.ssl) || void 0 === e || e;\n        if (this.credentials = t.credentials, this.ignoreUndefinedProperties = !!t.ignoreUndefinedProperties, \n        void 0 === t.cacheSizeBytes) this.cacheSizeBytes = 41943040; else {\n            if (-1 !== t.cacheSizeBytes && t.cacheSizeBytes < 1048576) throw new L(A, \"cacheSizeBytes must be at least 1048576\");\n            this.cacheSizeBytes = t.cacheSizeBytes;\n        }\n        this.experimentalForceLongPolling = !!t.experimentalForceLongPolling, this.experimentalAutoDetectLongPolling = !!t.experimentalAutoDetectLongPolling, \n        this.useFetchStreams = !!t.useFetchStreams, function(t, e, n, r) {\n            if (!0 === e && !0 === r) throw new L(A, `${t} and ${n} cannot be used together.`);\n        }(\"experimentalForceLongPolling\", t.experimentalForceLongPolling, \"experimentalAutoDetectLongPolling\", t.experimentalAutoDetectLongPolling);\n    }\n    isEqual(t) {\n        return this.host === t.host && this.ssl === t.ssl && this.credentials === t.credentials && this.cacheSizeBytes === t.cacheSizeBytes && this.experimentalForceLongPolling === t.experimentalForceLongPolling && this.experimentalAutoDetectLongPolling === t.experimentalAutoDetectLongPolling && this.ignoreUndefinedProperties === t.ignoreUndefinedProperties && this.useFetchStreams === t.useFetchStreams;\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * The Cloud Firestore service interface.\n *\n * Do not call this constructor directly. Instead, use {@link getFirestore}.\n */ class an {\n    /** @hideconstructor */\n    constructor(t, e, n) {\n        this._authCredentials = e, this._appCheckCredentials = n, \n        /**\n         * Whether it's a Firestore or Firestore Lite instance.\n         */\n        this.type = \"firestore-lite\", this._persistenceKey = \"(lite)\", this._settings = new cn({}), \n        this._settingsFrozen = !1, t instanceof H ? this._databaseId = t : (this._app = t, \n        this._databaseId = function(t) {\n            if (!Object.prototype.hasOwnProperty.apply(t.options, [ \"projectId\" ])) throw new L(A, '\"projectId\" not provided in firebase.initializeApp.');\n            return new H(t.options.projectId);\n        }\n        /**\n * Initializes a new instance of Cloud Firestore with the provided settings.\n * Can only be called before any other functions, including\n * {@link getFirestore}. If the custom settings are empty, this function is\n * equivalent to calling {@link getFirestore}.\n *\n * @param app - The {@link @firebase/app#FirebaseApp} with which the `Firestore` instance will\n * be associated.\n * @param settings - A settings object to configure the `Firestore` instance.\n * @returns A newly initialized `Firestore` instance.\n */ (t));\n    }\n    /**\n     * The {@link @firebase/app#FirebaseApp} associated with this `Firestore` service\n     * instance.\n     */    get app() {\n        if (!this._app) throw new L(x, \"Firestore was not initialized using the Firebase SDK. 'app' is not available\");\n        return this._app;\n    }\n    get _initialized() {\n        return this._settingsFrozen;\n    }\n    get _terminated() {\n        return void 0 !== this._terminateTask;\n    }\n    _setSettings(t) {\n        if (this._settingsFrozen) throw new L(x, \"Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.\");\n        this._settings = new cn(t), void 0 !== t.credentials && (this._authCredentials = function(t) {\n            if (!t) return new j;\n            switch (t.type) {\n              case \"gapi\":\n                const e = t.client;\n                // Make sure this really is a Gapi client.\n                                return v(!(\"object\" != typeof e || null === e || !e.auth || !e.auth.getAuthHeaderValueForFirstParty)), \n                new W(e, t.sessionIndex || \"0\", t.iamToken || null);\n\n              case \"provider\":\n                return t.client;\n\n              default:\n                throw new L(A, \"makeAuthCredentialsProvider failed due to invalid credential type\");\n            }\n        }(t.credentials));\n    }\n    _getSettings() {\n        return this._settings;\n    }\n    _freezeSettings() {\n        return this._settingsFrozen = !0, this._settings;\n    }\n    _delete() {\n        return this._terminateTask || (this._terminateTask = this._terminate()), this._terminateTask;\n    }\n    /** Returns a JSON-serializable representation of this `Firestore` instance. */    toJSON() {\n        return {\n            app: this._app,\n            databaseId: this._databaseId,\n            settings: this._settings\n        };\n    }\n    /**\n     * Terminates all components used by this client. Subclasses can override\n     * this method to clean up their own dependencies, but must also call this\n     * method.\n     *\n     * Only ever called once.\n     */    _terminate() {\n        return function(t) {\n            const e = on.get(t);\n            e && (m(\"ComponentProvider\", \"Removing Datastore\"), on.delete(t), e.terminate());\n        }(this), Promise.resolve();\n    }\n}\n\nfunction hn(t, e) {\n    const n = _getProvider(t, \"firestore/lite\");\n    if (n.isInitialized()) throw new L(x, \"Firestore can only be initialized once per app.\");\n    return n.initialize({\n        options: e\n    });\n}\n\n/**\n * Returns the existing `Firestore` instance that is associated with the\n * provided {@link @firebase/app#FirebaseApp}. If no instance exists, initializes a new\n * instance with default settings.\n *\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned `Firestore`\n * instance is associated with.\n * @returns The `Firestore` instance of the provided app.\n */ function ln(e = getApp()) {\n    return _getProvider(e, \"firestore/lite\").getImmediate();\n}\n\n/**\n * Modify this instance to communicate with the Cloud Firestore emulator.\n *\n * Note: This must be called before this instance has been used to do any\n * operations.\n *\n * @param firestore - The `Firestore` instance to configure to connect to the\n * emulator.\n * @param host - the emulator host (ex: localhost).\n * @param port - the emulator port (ex: 9000).\n * @param options.mockUserToken - the mock auth token to use for unit testing\n * Security Rules.\n */ function fn(t, e, n, r = {}) {\n    var s;\n    const i = (t = ot(t, an))._getSettings();\n    if (\"firestore.googleapis.com\" !== i.host && i.host !== e && y(\"Host has been set in both settings() and useEmulator(), emulator host will be used\"), \n    t._setSettings(Object.assign(Object.assign({}, i), {\n        host: `${e}:${n}`,\n        ssl: !1\n    })), r.mockUserToken) {\n        let e, n;\n        if (\"string\" == typeof r.mockUserToken) e = r.mockUserToken, n = l.MOCK_USER; else {\n            // Let createMockUserToken validate first (catches common mistakes like\n            // invalid field \"uid\" and missing field \"sub\" / \"user_id\".)\n            e = createMockUserToken(r.mockUserToken, null === (s = t._app) || void 0 === s ? void 0 : s.options.projectId);\n            const i = r.mockUserToken.sub || r.mockUserToken.user_id;\n            if (!i) throw new L(A, \"mockUserToken must contain 'sub' or 'user_id' field!\");\n            n = new l(i);\n        }\n        t._authCredentials = new B(new U(e, n));\n    }\n}\n\n/**\n * Terminates the provided `Firestore` instance.\n *\n * After calling `terminate()` only the `clearIndexedDbPersistence()` functions\n * may be used. Any other function will throw a `FirestoreError`. Termination\n * does not cancel any pending writes, and any promises that are awaiting a\n * response from the server will not be resolved.\n *\n * To restart after termination, create a new instance of `Firestore` with\n * {@link getFirestore}.\n *\n * Note: Under normal circumstances, calling `terminate()` is not required. This\n * function is useful only when you want to force this instance to release all of\n * its resources or in combination with {@link clearIndexedDbPersistence} to\n * ensure that all local state is destroyed between test runs.\n *\n * @param firestore - The `Firestore` instance to terminate.\n * @returns A `Promise` that is resolved when the instance has been successfully\n * terminated.\n */ function dn(t) {\n    return t = ot(t, an), _removeServiceInstance(t.app, \"firestore/lite\"), t._delete();\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A `DocumentReference` refers to a document location in a Firestore database\n * and can be used to write, read, or listen to the location. The document at\n * the referenced location may or may not exist.\n */\nclass wn {\n    /** @hideconstructor */\n    constructor(t, \n    /**\n     * If provided, the `FirestoreDataConverter` associated with this instance.\n     */\n    e, n) {\n        this.converter = e, this._key = n, \n        /** The type of this Firestore reference. */\n        this.type = \"document\", this.firestore = t;\n    }\n    get _path() {\n        return this._key.path;\n    }\n    /**\n     * The document's identifier within its collection.\n     */    get id() {\n        return this._key.path.lastSegment();\n    }\n    /**\n     * A string representing the path of the referenced document (relative\n     * to the root of the database).\n     */    get path() {\n        return this._key.path.canonicalString();\n    }\n    /**\n     * The collection this `DocumentReference` belongs to.\n     */    get parent() {\n        return new pn(this.firestore, this.converter, this._key.path.popLast());\n    }\n    withConverter(t) {\n        return new wn(this.firestore, t, this._key);\n    }\n}\n\n/**\n * A `Query` refers to a query which you can read or listen to. You can also\n * construct refined `Query` objects by adding filters and ordering.\n */ class mn {\n    // This is the lite version of the Query class in the main SDK.\n    /** @hideconstructor protected */\n    constructor(t, \n    /**\n     * If provided, the `FirestoreDataConverter` associated with this instance.\n     */\n    e, n) {\n        this.converter = e, this._query = n, \n        /** The type of this Firestore reference. */\n        this.type = \"query\", this.firestore = t;\n    }\n    withConverter(t) {\n        return new mn(this.firestore, t, this._query);\n    }\n}\n\n/**\n * A `CollectionReference` object can be used for adding documents, getting\n * document references, and querying for documents (using {@link query}).\n */ class pn extends mn {\n    /** @hideconstructor */\n    constructor(t, e, n) {\n        super(t, e, new fe(n)), this._path = n, \n        /** The type of this Firestore reference. */\n        this.type = \"collection\";\n    }\n    /** The collection's identifier. */    get id() {\n        return this._query.path.lastSegment();\n    }\n    /**\n     * A string representing the path of the referenced collection (relative\n     * to the root of the database).\n     */    get path() {\n        return this._query.path.canonicalString();\n    }\n    /**\n     * A reference to the containing `DocumentReference` if this is a\n     * subcollection. If this isn't a subcollection, the reference is null.\n     */    get parent() {\n        const t = this._path.popLast();\n        return t.isEmpty() ? null : new wn(this.firestore, \n        /* converter= */ null, new et(t));\n    }\n    withConverter(t) {\n        return new pn(this.firestore, t, this._path);\n    }\n}\n\nfunction yn(t, e, ...n) {\n    if (t = getModularInstance(t), nt(\"collection\", \"path\", e), t instanceof an) {\n        const r = X.fromString(e, ...n);\n        return st(r), new pn(t, /* converter= */ null, r);\n    }\n    {\n        if (!(t instanceof wn || t instanceof pn)) throw new L(A, \"Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore\");\n        const r = t._path.child(X.fromString(e, ...n));\n        return st(r), new pn(t.firestore, \n        /* converter= */ null, r);\n    }\n}\n\n// TODO(firestorelite): Consider using ErrorFactory -\n// https://github.com/firebase/firebase-js-sdk/blob/0131e1f/packages/util/src/errors.ts#L106\n/**\n * Creates and returns a new `Query` instance that includes all documents in the\n * database that are contained in a collection or subcollection with the\n * given `collectionId`.\n *\n * @param firestore - A reference to the root `Firestore` instance.\n * @param collectionId - Identifies the collections to query over. Every\n * collection or subcollection with this ID as the last segment of its path\n * will be included. Cannot contain a slash.\n * @returns The created `Query`.\n */ function _n(t, e) {\n    if (t = ot(t, an), nt(\"collectionGroup\", \"collection id\", e), e.indexOf(\"/\") >= 0) throw new L(A, `Invalid collection ID '${e}' passed to function collectionGroup(). Collection IDs must not contain '/'.`);\n    return new mn(t, \n    /* converter= */ null, \n    /**\n * Creates a new Query for a collection group query that matches all documents\n * within the provided collection group.\n */\n    function(t) {\n        return new fe(X.emptyPath(), t);\n    }(e));\n}\n\nfunction gn(t, e, ...n) {\n    if (t = getModularInstance(t), \n    // We allow omission of 'pathString' but explicitly prohibit passing in both\n    // 'undefined' and 'null'.\n    1 === arguments.length && (e = pt.R()), nt(\"doc\", \"path\", e), t instanceof an) {\n        const r = X.fromString(e, ...n);\n        return rt(r), new wn(t, \n        /* converter= */ null, new et(r));\n    }\n    {\n        if (!(t instanceof wn || t instanceof pn)) throw new L(A, \"Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore\");\n        const r = t._path.child(X.fromString(e, ...n));\n        return rt(r), new wn(t.firestore, t instanceof pn ? t.converter : null, new et(r));\n    }\n}\n\n/**\n * Returns true if the provided references are equal.\n *\n * @param left - A reference to compare.\n * @param right - A reference to compare.\n * @returns true if the references point to the same location in the same\n * Firestore database.\n */ function vn(t, e) {\n    return t = getModularInstance(t), e = getModularInstance(e), (t instanceof wn || t instanceof pn) && (e instanceof wn || e instanceof pn) && (t.firestore === e.firestore && t.path === e.path && t.converter === e.converter);\n}\n\n/**\n * Returns true if the provided queries point to the same collection and apply\n * the same constraints.\n *\n * @param left - A `Query` to compare.\n * @param right - A `Query` to compare.\n * @returns true if the references point to the same location in the same\n * Firestore database.\n */ function bn(t, e) {\n    return t = getModularInstance(t), e = getModularInstance(e), t instanceof mn && e instanceof mn && (t.firestore === e.firestore && _e(t._query, e._query) && t.converter === e.converter);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A `FieldPath` refers to a field in a document. The path may consist of a\n * single field name (referring to a top-level field in the document), or a\n * list of field names (referring to a nested field in the document).\n *\n * Create a `FieldPath` by providing field names. If more than one field\n * name is provided, the path will point to a nested field in a document.\n */ class En {\n    /**\n     * Creates a `FieldPath` from the provided field names. If more than one field\n     * name is provided, the path will point to a nested field in a document.\n     *\n     * @param fieldNames - A list of field names.\n     */\n    constructor(...t) {\n        for (let e = 0; e < t.length; ++e) if (0 === t[e].length) throw new L(A, \"Invalid field name at argument $(i + 1). Field names must not be empty.\");\n        this._internalPath = new tt(t);\n    }\n    /**\n     * Returns true if this `FieldPath` is equal to the provided one.\n     *\n     * @param other - The `FieldPath` to compare against.\n     * @returns true if this `FieldPath` is equal to the provided one.\n     */    isEqual(t) {\n        return this._internalPath.isEqual(t._internalPath);\n    }\n}\n\n/**\n * Returns a special sentinel `FieldPath` to refer to the ID of a document.\n * It can be used in queries to sort or filter by the document ID.\n */ function Tn() {\n    return new En(\"__name__\");\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An immutable object representing an array of bytes.\n */ class In {\n    /** @hideconstructor */\n    constructor(t) {\n        this._byteString = t;\n    }\n    /**\n     * Creates a new `Bytes` object from the given Base64 string, converting it to\n     * bytes.\n     *\n     * @param base64 - The Base64 string used to create the `Bytes` object.\n     */    static fromBase64String(t) {\n        try {\n            return new In(Nt.fromBase64String(t));\n        } catch (t) {\n            throw new L(A, \"Failed to construct data from Base64 string: \" + t);\n        }\n    }\n    /**\n     * Creates a new `Bytes` object from the given Uint8Array.\n     *\n     * @param array - The Uint8Array used to create the `Bytes` object.\n     */    static fromUint8Array(t) {\n        return new In(Nt.fromUint8Array(t));\n    }\n    /**\n     * Returns the underlying bytes as a Base64-encoded string.\n     *\n     * @returns The Base64-encoded string created from the `Bytes` object.\n     */    toBase64() {\n        return this._byteString.toBase64();\n    }\n    /**\n     * Returns the underlying bytes in a new `Uint8Array`.\n     *\n     * @returns The Uint8Array created from the `Bytes` object.\n     */    toUint8Array() {\n        return this._byteString.toUint8Array();\n    }\n    /**\n     * Returns a string representation of the `Bytes` object.\n     *\n     * @returns A string representation of the `Bytes` object.\n     */    toString() {\n        return \"Bytes(base64: \" + this.toBase64() + \")\";\n    }\n    /**\n     * Returns true if this `Bytes` object is equal to the provided one.\n     *\n     * @param other - The `Bytes` object to compare against.\n     * @returns true if this `Bytes` object is equal to the provided one.\n     */    isEqual(t) {\n        return this._byteString.isEqual(t._byteString);\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Sentinel values that can be used when writing document fields with `set()`\n * or `update()`.\n */ class An {\n    /**\n     * @param _methodName - The public API endpoint that returns this class.\n     * @hideconstructor\n     */\n    constructor(t) {\n        this._methodName = t;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An immutable object representing a geographic location in Firestore. The\n * location is represented as latitude/longitude pair.\n *\n * Latitude values are in the range of [-90, 90].\n * Longitude values are in the range of [-180, 180].\n */ class Rn {\n    /**\n     * Creates a new immutable `GeoPoint` object with the provided latitude and\n     * longitude values.\n     * @param latitude - The latitude as number between -90 and 90.\n     * @param longitude - The longitude as number between -180 and 180.\n     */\n    constructor(t, e) {\n        if (!isFinite(t) || t < -90 || t > 90) throw new L(A, \"Latitude must be a number between -90 and 90, but was: \" + t);\n        if (!isFinite(e) || e < -180 || e > 180) throw new L(A, \"Longitude must be a number between -180 and 180, but was: \" + e);\n        this._lat = t, this._long = e;\n    }\n    /**\n     * The latitude of this `GeoPoint` instance.\n     */    get latitude() {\n        return this._lat;\n    }\n    /**\n     * The longitude of this `GeoPoint` instance.\n     */    get longitude() {\n        return this._long;\n    }\n    /**\n     * Returns true if this `GeoPoint` is equal to the provided one.\n     *\n     * @param other - The `GeoPoint` to compare against.\n     * @returns true if this `GeoPoint` is equal to the provided one.\n     */    isEqual(t) {\n        return this._lat === t._lat && this._long === t._long;\n    }\n    /** Returns a JSON-serializable representation of this GeoPoint. */    toJSON() {\n        return {\n            latitude: this._lat,\n            longitude: this._long\n        };\n    }\n    /**\n     * Actually private to JS consumers of our API, so this function is prefixed\n     * with an underscore.\n     */    _compareTo(t) {\n        return yt(this._lat, t._lat) || yt(this._long, t._long);\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ const Pn = /^__.*__$/;\n\n/** The result of parsing document data (e.g. for a setData call). */ class Vn {\n    constructor(t, e, n) {\n        this.data = t, this.fieldMask = e, this.fieldTransforms = n;\n    }\n    toMutation(t, e) {\n        return null !== this.fieldMask ? new Ne(t, this.data, this.fieldMask, e, this.fieldTransforms) : new Ve(t, this.data, e, this.fieldTransforms);\n    }\n}\n\n/** The result of parsing \"update\" data (i.e. for an updateData call). */ class Nn {\n    constructor(t, \n    // The fieldMask does not include document transforms.\n    e, n) {\n        this.data = t, this.fieldMask = e, this.fieldTransforms = n;\n    }\n    toMutation(t, e) {\n        return new Ne(t, this.data, this.fieldMask, e, this.fieldTransforms);\n    }\n}\n\nfunction Dn(t) {\n    switch (t) {\n      case 0 /* Set */ :\n // fall through\n              case 2 /* MergeSet */ :\n // fall through\n              case 1 /* Update */ :\n        return !0;\n\n      case 3 /* Argument */ :\n      case 4 /* ArrayArgument */ :\n        return !1;\n\n      default:\n        throw g();\n    }\n}\n\n/** A \"context\" object passed around while parsing user data. */ class $n {\n    /**\n     * Initializes a ParseContext with the given source and path.\n     *\n     * @param settings - The settings for the parser.\n     * @param databaseId - The database ID of the Firestore instance.\n     * @param serializer - The serializer to use to generate the Value proto.\n     * @param ignoreUndefinedProperties - Whether to ignore undefined properties\n     * rather than throw.\n     * @param fieldTransforms - A mutable list of field transforms encountered\n     * while parsing the data.\n     * @param fieldMask - A mutable list of field paths encountered while parsing\n     * the data.\n     *\n     * TODO(b/34871131): We don't support array paths right now, so path can be\n     * null to indicate the context represents any location within an array (in\n     * which case certain features will not work and errors will be somewhat\n     * compromised).\n     */\n    constructor(t, e, n, r, s, i) {\n        this.settings = t, this.databaseId = e, this.q = n, this.ignoreUndefinedProperties = r, \n        // Minor hack: If fieldTransforms is undefined, we assume this is an\n        // external call and we need to validate the entire path.\n        void 0 === s && this.Z(), this.fieldTransforms = s || [], this.fieldMask = i || [];\n    }\n    get path() {\n        return this.settings.path;\n    }\n    get tt() {\n        return this.settings.tt;\n    }\n    /** Returns a new context with the specified settings overwritten. */    et(t) {\n        return new $n(Object.assign(Object.assign({}, this.settings), t), this.databaseId, this.q, this.ignoreUndefinedProperties, this.fieldTransforms, this.fieldMask);\n    }\n    nt(t) {\n        var e;\n        const n = null === (e = this.path) || void 0 === e ? void 0 : e.child(t), r = this.et({\n            path: n,\n            rt: !1\n        });\n        return r.st(t), r;\n    }\n    it(t) {\n        var e;\n        const n = null === (e = this.path) || void 0 === e ? void 0 : e.child(t), r = this.et({\n            path: n,\n            rt: !1\n        });\n        return r.Z(), r;\n    }\n    ot(t) {\n        // TODO(b/34871131): We don't support array paths right now; so make path\n        // undefined.\n        return this.et({\n            path: void 0,\n            rt: !0\n        });\n    }\n    ut(t) {\n        return Jn(t, this.settings.methodName, this.settings.ct || !1, this.path, this.settings.at);\n    }\n    /** Returns 'true' if 'fieldPath' was traversed when creating this context. */    contains(t) {\n        return void 0 !== this.fieldMask.find((e => t.isPrefixOf(e))) || void 0 !== this.fieldTransforms.find((e => t.isPrefixOf(e.field)));\n    }\n    Z() {\n        // TODO(b/34871131): Remove null check once we have proper paths for fields\n        // within arrays.\n        if (this.path) for (let t = 0; t < this.path.length; t++) this.st(this.path.get(t));\n    }\n    st(t) {\n        if (0 === t.length) throw this.ut(\"Document fields must not be empty\");\n        if (Dn(this.tt) && Pn.test(t)) throw this.ut('Document fields cannot begin and end with \"__\"');\n    }\n}\n\n/**\n * Helper for parsing raw user input (provided via the API) into internal model\n * classes.\n */ class xn {\n    constructor(t, e, n) {\n        this.databaseId = t, this.ignoreUndefinedProperties = e, this.q = n || Ze(t);\n    }\n    /** Creates a new top-level parse context. */    ht(t, e, n, r = !1) {\n        return new $n({\n            tt: t,\n            methodName: e,\n            at: n,\n            path: tt.emptyPath(),\n            rt: !1,\n            ct: r\n        }, this.databaseId, this.q, this.ignoreUndefinedProperties);\n    }\n}\n\nfunction Fn(t) {\n    const e = t._freezeSettings(), n = Ze(t._databaseId);\n    return new xn(t._databaseId, !!e.ignoreUndefinedProperties, n);\n}\n\n/** Parse document data from a set() call. */ function Sn(t, e, n, r, s, i = {}) {\n    const o = t.ht(i.merge || i.mergeFields ? 2 /* MergeSet */ : 0 /* Set */ , e, n, s);\n    Kn(\"Data must be an object, but it was:\", o, r);\n    const u = Gn(r, o);\n    let c, a;\n    if (i.merge) c = new Vt(o.fieldMask), a = o.fieldTransforms; else if (i.mergeFields) {\n        const t = [];\n        for (const r of i.mergeFields) {\n            const s = Qn(e, r, n);\n            if (!o.contains(s)) throw new L(A, `Field '${s}' is specified in your field mask but missing from your input data.`);\n            Xn(t, s) || t.push(s);\n        }\n        c = new Vt(t), a = o.fieldTransforms.filter((t => c.covers(t.field)));\n    } else c = null, a = o.fieldTransforms;\n    return new Vn(new Yt(u), c, a);\n}\n\nclass qn extends An {\n    _toFieldTransform(t) {\n        if (2 /* MergeSet */ !== t.tt) throw 1 /* Update */ === t.tt ? t.ut(`${this._methodName}() can only appear at the top level of your update data`) : t.ut(`${this._methodName}() cannot be used with set() unless you pass {merge:true}`);\n        // No transform to add for a delete, but we need to add it to our\n        // fieldMask so it gets deleted.\n        return t.fieldMask.push(t.path), null;\n    }\n    isEqual(t) {\n        return t instanceof qn;\n    }\n}\n\n/**\n * Creates a child context for parsing SerializableFieldValues.\n *\n * This is different than calling `ParseContext.contextWith` because it keeps\n * the fieldTransforms and fieldMask separate.\n *\n * The created context has its `dataSource` set to `UserDataSource.Argument`.\n * Although these values are used with writes, any elements in these FieldValues\n * are not considered writes since they cannot contain any FieldValue sentinels,\n * etc.\n *\n * @param fieldValue - The sentinel FieldValue for which to create a child\n *     context.\n * @param context - The parent context.\n * @param arrayElement - Whether or not the FieldValue has an array.\n */ function On(t, e, n) {\n    return new $n({\n        tt: 3 /* Argument */ ,\n        at: e.settings.at,\n        methodName: t._methodName,\n        rt: n\n    }, e.databaseId, e.q, e.ignoreUndefinedProperties);\n}\n\nclass kn extends An {\n    _toFieldTransform(t) {\n        return new Ae(t.path, new be);\n    }\n    isEqual(t) {\n        return t instanceof kn;\n    }\n}\n\nclass Cn extends An {\n    constructor(t, e) {\n        super(t), this.lt = e;\n    }\n    _toFieldTransform(t) {\n        const e = On(this, t, \n        /*array=*/ !0), n = this.lt.map((t => zn(t, e))), r = new Ee(n);\n        return new Ae(t.path, r);\n    }\n    isEqual(t) {\n        // TODO(mrschmidt): Implement isEquals\n        return this === t;\n    }\n}\n\nclass Ln extends An {\n    constructor(t, e) {\n        super(t), this.lt = e;\n    }\n    _toFieldTransform(t) {\n        const e = On(this, t, \n        /*array=*/ !0), n = this.lt.map((t => zn(t, e))), r = new Te(n);\n        return new Ae(t.path, r);\n    }\n    isEqual(t) {\n        // TODO(mrschmidt): Implement isEquals\n        return this === t;\n    }\n}\n\nclass Mn extends An {\n    constructor(t, e) {\n        super(t), this.ft = e;\n    }\n    _toFieldTransform(t) {\n        const e = new Ie(t.q, ge(t.q, this.ft));\n        return new Ae(t.path, e);\n    }\n    isEqual(t) {\n        // TODO(mrschmidt): Implement isEquals\n        return this === t;\n    }\n}\n\n/** Parse update data from an update() call. */ function Un(t, e, n, r) {\n    const s = t.ht(1 /* Update */ , e, n);\n    Kn(\"Data must be an object, but it was:\", s, r);\n    const i = [], o = Yt.empty();\n    Et(r, ((t, r) => {\n        const u = Hn(e, t, n);\n        // For Compat types, we have to \"extract\" the underlying types before\n        // performing validation.\n                r = getModularInstance(r);\n        const c = s.it(u);\n        if (r instanceof qn) \n        // Add it to the field mask, but don't add anything to updateData.\n        i.push(u); else {\n            const t = zn(r, c);\n            null != t && (i.push(u), o.set(u, t));\n        }\n    }));\n    const u = new Vt(i);\n    return new Nn(o, u, s.fieldTransforms);\n}\n\n/** Parse update data from a list of field/value arguments. */ function jn(t, e, n, r, s, i) {\n    const o = t.ht(1 /* Update */ , e, n), u = [ Qn(e, r, n) ], c = [ s ];\n    if (i.length % 2 != 0) throw new L(A, `Function ${e}() needs to be called with an even number of arguments that alternate between field names and values.`);\n    for (let t = 0; t < i.length; t += 2) u.push(Qn(e, i[t])), c.push(i[t + 1]);\n    const a = [], l = Yt.empty();\n    // We iterate in reverse order to pick the last value for a field if the\n    // user specified the field multiple times.\n    for (let t = u.length - 1; t >= 0; --t) if (!Xn(a, u[t])) {\n        const e = u[t];\n        let n = c[t];\n        // For Compat types, we have to \"extract\" the underlying types before\n        // performing validation.\n                n = getModularInstance(n);\n        const r = o.it(e);\n        if (n instanceof qn) \n        // Add it to the field mask, but don't add anything to updateData.\n        a.push(e); else {\n            const t = zn(n, r);\n            null != t && (a.push(e), l.set(e, t));\n        }\n    }\n    const f = new Vt(a);\n    return new Nn(l, f, o.fieldTransforms);\n}\n\n/**\n * Parse a \"query value\" (e.g. value in a where filter or a value in a cursor\n * bound).\n *\n * @param allowArrays - Whether the query value is an array that may directly\n * contain additional arrays (e.g. the operand of an `in` query).\n */ function Bn(t, e, n, r = !1) {\n    return zn(n, t.ht(r ? 4 /* ArrayArgument */ : 3 /* Argument */ , e));\n}\n\n/**\n * Parses user data to Protobuf Values.\n *\n * @param input - Data to be parsed.\n * @param context - A context object representing the current path being parsed,\n * the source of the data being parsed, etc.\n * @returns The parsed value, or null if the value was a FieldValue sentinel\n * that should not be included in the resulting parsed data.\n */ function zn(t, e) {\n    if (Wn(\n    // Unwrap the API type from the Compat SDK. This will return the API type\n    // from firestore-exp.\n    t = getModularInstance(t))) return Kn(\"Unsupported field value:\", e, t), Gn(t, e);\n    if (t instanceof An) \n    // FieldValues usually parse into transforms (except deleteField())\n    // in which case we do not want to include this field in our parsed data\n    // (as doing so will overwrite the field directly prior to the transform\n    // trying to transform it). So we don't add this location to\n    // context.fieldMask and we return null as our parsing result.\n    /**\n * \"Parses\" the provided FieldValueImpl, adding any necessary transforms to\n * context.fieldTransforms.\n */\n    return function(t, e) {\n        // Sentinels are only supported with writes, and not within arrays.\n        if (!Dn(e.tt)) throw e.ut(`${t._methodName}() can only be used with update() and set()`);\n        if (!e.path) throw e.ut(`${t._methodName}() is not currently supported inside arrays`);\n        const n = t._toFieldTransform(e);\n        n && e.fieldTransforms.push(n);\n    }\n    /**\n * Helper to parse a scalar value (i.e. not an Object, Array, or FieldValue)\n *\n * @returns The parsed value\n */ (t, e), null;\n    if (void 0 === t && e.ignoreUndefinedProperties) \n    // If the input is undefined it can never participate in the fieldMask, so\n    // don't handle this below. If `ignoreUndefinedProperties` is false,\n    // `parseScalarValue` will reject an undefined value.\n    return null;\n    if (\n    // If context.path is null we are inside an array and we don't support\n    // field mask paths more granular than the top-level array.\n    e.path && e.fieldMask.push(e.path), t instanceof Array) {\n        // TODO(b/34871131): Include the path containing the array in the error\n        // message.\n        // In the case of IN queries, the parsed data is an array (representing\n        // the set of values to be included for the IN query) that may directly\n        // contain additional arrays (each representing an individual field\n        // value), so we disable this validation.\n        if (e.settings.rt && 4 /* ArrayArgument */ !== e.tt) throw e.ut(\"Nested arrays are not supported\");\n        return function(t, e) {\n            const n = [];\n            let r = 0;\n            for (const s of t) {\n                let t = zn(s, e.ot(r));\n                null == t && (\n                // Just include nulls in the array for fields being replaced with a\n                // sentinel.\n                t = {\n                    nullValue: \"NULL_VALUE\"\n                }), n.push(t), r++;\n            }\n            return {\n                arrayValue: {\n                    values: n\n                }\n            };\n        }(t, e);\n    }\n    return function(t, e) {\n        if (null === (t = getModularInstance(t))) return {\n            nullValue: \"NULL_VALUE\"\n        };\n        if (\"number\" == typeof t) return ge(e.q, t);\n        if (\"boolean\" == typeof t) return {\n            booleanValue: t\n        };\n        if (\"string\" == typeof t) return {\n            stringValue: t\n        };\n        if (t instanceof Date) {\n            const n = gt.fromDate(t);\n            return {\n                timestampValue: qe(e.q, n)\n            };\n        }\n        if (t instanceof gt) {\n            // Firestore backend truncates precision down to microseconds. To ensure\n            // offline mode works the same with regards to truncation, perform the\n            // truncation immediately without waiting for the backend to do that.\n            const n = new gt(t.seconds, 1e3 * Math.floor(t.nanoseconds / 1e3));\n            return {\n                timestampValue: qe(e.q, n)\n            };\n        }\n        if (t instanceof Rn) return {\n            geoPointValue: {\n                latitude: t.latitude,\n                longitude: t.longitude\n            }\n        };\n        if (t instanceof In) return {\n            bytesValue: Oe(e.q, t._byteString)\n        };\n        if (t instanceof wn) {\n            const n = e.databaseId, r = t.firestore._databaseId;\n            if (!r.isEqual(n)) throw e.ut(`Document reference is for database ${r.projectId}/${r.database} but should be for database ${n.projectId}/${n.database}`);\n            return {\n                referenceValue: Le(t.firestore._databaseId || e.databaseId, t._key.path)\n            };\n        }\n        throw e.ut(`Unsupported field value: ${it(t)}`);\n    }\n    /**\n * Checks whether an object looks like a JSON object that should be converted\n * into a struct. Normal class/prototype instances are considered to look like\n * JSON objects since they should be converted to a struct value. Arrays, Dates,\n * GeoPoints, etc. are not considered to look like JSON objects since they map\n * to specific FieldValue types other than ObjectValue.\n */ (t, e);\n}\n\nfunction Gn(t, e) {\n    const n = {};\n    return !function(t) {\n        for (const e in t) if (Object.prototype.hasOwnProperty.call(t, e)) return !1;\n        return !0;\n    }(t) ? Et(t, ((t, r) => {\n        const s = zn(r, e.nt(t));\n        null != s && (n[t] = s);\n    })) : \n    // If we encounter an empty object, we explicitly add it to the update\n    // mask to ensure that the server creates a map entry.\n    e.path && e.path.length > 0 && e.fieldMask.push(e.path), {\n        mapValue: {\n            fields: n\n        }\n    };\n}\n\nfunction Wn(t) {\n    return !(\"object\" != typeof t || null === t || t instanceof Array || t instanceof Date || t instanceof gt || t instanceof Rn || t instanceof In || t instanceof wn || t instanceof An);\n}\n\nfunction Kn(t, e, n) {\n    if (!Wn(n) || !function(t) {\n        return \"object\" == typeof t && null !== t && (Object.getPrototypeOf(t) === Object.prototype || null === Object.getPrototypeOf(t));\n    }(n)) {\n        const r = it(n);\n        throw \"an object\" === r ? e.ut(t + \" a custom object\") : e.ut(t + \" \" + r);\n    }\n}\n\n/**\n * Helper that calls fromDotSeparatedString() but wraps any error thrown.\n */ function Qn(t, e, n) {\n    if ((\n    // If required, replace the FieldPath Compat class with with the firestore-exp\n    // FieldPath.\n    e = getModularInstance(e)) instanceof En) return e._internalPath;\n    if (\"string\" == typeof e) return Hn(t, e);\n    throw Jn(\"Field path arguments must be of type string or \", t, \n    /* hasConverter= */ !1, \n    /* path= */ void 0, n);\n}\n\n/**\n * Matches any characters in a field path string that are reserved.\n */ const Yn = new RegExp(\"[~\\\\*/\\\\[\\\\]]\");\n\n/**\n * Wraps fromDotSeparatedString with an error message about the method that\n * was thrown.\n * @param methodName - The publicly visible method name\n * @param path - The dot-separated string form of a field path which will be\n * split on dots.\n * @param targetDoc - The document against which the field path will be\n * evaluated.\n */ function Hn(t, e, n) {\n    if (e.search(Yn) >= 0) throw Jn(`Invalid field path (${e}). Paths must not contain '~', '*', '/', '[', or ']'`, t, \n    /* hasConverter= */ !1, \n    /* path= */ void 0, n);\n    try {\n        return new En(...e.split(\".\"))._internalPath;\n    } catch (r) {\n        throw Jn(`Invalid field path (${e}). Paths must not be empty, begin with '.', end with '.', or contain '..'`, t, \n        /* hasConverter= */ !1, \n        /* path= */ void 0, n);\n    }\n}\n\nfunction Jn(t, e, n, r, s) {\n    const i = r && !r.isEmpty(), o = void 0 !== s;\n    let u = `Function ${e}() called with invalid data`;\n    n && (u += \" (via `toFirestore()`)\"), u += \". \";\n    let c = \"\";\n    return (i || o) && (c += \" (found\", i && (c += ` in field ${r}`), o && (c += ` in document ${s}`), \n    c += \")\"), new L(A, u + t + c);\n}\n\n/** Checks `haystack` if FieldPath `needle` is present. Runs in O(n). */ function Xn(t, e) {\n    return t.some((t => t.isEqual(e)));\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A `DocumentSnapshot` contains data read from a document in your Firestore\n * database. The data can be extracted with `.data()` or `.get(<field>)` to\n * get a specific field.\n *\n * For a `DocumentSnapshot` that points to a non-existing document, any data\n * access will return 'undefined'. You can use the `exists()` method to\n * explicitly verify a document's existence.\n */ class Zn {\n    // Note: This class is stripped down version of the DocumentSnapshot in\n    // the legacy SDK. The changes are:\n    // - No support for SnapshotMetadata.\n    // - No support for SnapshotOptions.\n    /** @hideconstructor protected */\n    constructor(t, e, n, r, s) {\n        this._firestore = t, this._userDataWriter = e, this._key = n, this._document = r, \n        this._converter = s;\n    }\n    /** Property of the `DocumentSnapshot` that provides the document's ID. */    get id() {\n        return this._key.path.lastSegment();\n    }\n    /**\n     * The `DocumentReference` for the document included in the `DocumentSnapshot`.\n     */    get ref() {\n        return new wn(this._firestore, this._converter, this._key);\n    }\n    /**\n     * Signals whether or not the document at the snapshot's location exists.\n     *\n     * @returns true if the document exists.\n     */    exists() {\n        return null !== this._document;\n    }\n    /**\n     * Retrieves all fields in the document as an `Object`. Returns `undefined` if\n     * the document doesn't exist.\n     *\n     * @returns An `Object` containing all fields in the document or `undefined`\n     * if the document doesn't exist.\n     */    data() {\n        if (this._document) {\n            if (this._converter) {\n                // We only want to use the converter and create a new DocumentSnapshot\n                // if a converter has been provided.\n                const t = new tr(this._firestore, this._userDataWriter, this._key, this._document, \n                /* converter= */ null);\n                return this._converter.fromFirestore(t);\n            }\n            return this._userDataWriter.convertValue(this._document.data.value);\n        }\n    }\n    /**\n     * Retrieves the field specified by `fieldPath`. Returns `undefined` if the\n     * document or field doesn't exist.\n     *\n     * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific\n     * field.\n     * @returns The data at the specified field location or undefined if no such\n     * field exists in the document.\n     */\n    // We are using `any` here to avoid an explicit cast by our users.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    get(t) {\n        if (this._document) {\n            const e = this._document.data.field(rr(\"DocumentSnapshot.get\", t));\n            if (null !== e) return this._userDataWriter.convertValue(e);\n        }\n    }\n}\n\n/**\n * A `QueryDocumentSnapshot` contains data read from a document in your\n * Firestore database as part of a query. The document is guaranteed to exist\n * and its data can be extracted with `.data()` or `.get(<field>)` to get a\n * specific field.\n *\n * A `QueryDocumentSnapshot` offers the same API surface as a\n * `DocumentSnapshot`. Since query results contain only existing documents, the\n * `exists` property will always be true and `data()` will never return\n * 'undefined'.\n */ class tr extends Zn {\n    /**\n     * Retrieves all fields in the document as an `Object`.\n     *\n     * @override\n     * @returns An `Object` containing all fields in the document.\n     */\n    data() {\n        return super.data();\n    }\n}\n\n/**\n * A `QuerySnapshot` contains zero or more `DocumentSnapshot` objects\n * representing the results of a query. The documents can be accessed as an\n * array via the `docs` property or enumerated using the `forEach` method. The\n * number of documents can be determined via the `empty` and `size`\n * properties.\n */ class er {\n    /** @hideconstructor */\n    constructor(t, e) {\n        this._docs = e, this.query = t;\n    }\n    /** An array of all the documents in the `QuerySnapshot`. */    get docs() {\n        return [ ...this._docs ];\n    }\n    /** The number of documents in the `QuerySnapshot`. */    get size() {\n        return this.docs.length;\n    }\n    /** True if there are no documents in the `QuerySnapshot`. */    get empty() {\n        return 0 === this.docs.length;\n    }\n    /**\n     * Enumerates all of the documents in the `QuerySnapshot`.\n     *\n     * @param callback - A callback to be called with a `QueryDocumentSnapshot` for\n     * each document in the snapshot.\n     * @param thisArg - The `this` binding for the callback.\n     */    forEach(t, e) {\n        this._docs.forEach(t, e);\n    }\n}\n\n/**\n * Returns true if the provided snapshots are equal.\n *\n * @param left - A snapshot to compare.\n * @param right - A snapshot to compare.\n * @returns true if the snapshots are equal.\n */ function nr(t, e) {\n    return t = getModularInstance(t), e = getModularInstance(e), t instanceof Zn && e instanceof Zn ? t._firestore === e._firestore && t._key.isEqual(e._key) && (null === t._document ? null === e._document : t._document.isEqual(e._document)) && t._converter === e._converter : t instanceof er && e instanceof er && (bn(t.query, e.query) && _t(t.docs, e.docs, nr));\n}\n\n/**\n * Helper that calls `fromDotSeparatedString()` but wraps any error thrown.\n */ function rr(t, e) {\n    return \"string\" == typeof e ? Hn(t, e) : e instanceof En ? e._internalPath : e._delegate._internalPath;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A `QueryConstraint` is used to narrow the set of documents returned by a\n * Firestore query. `QueryConstraint`s are created by invoking {@link where},\n * {@link orderBy}, {@link (startAt:1)}, {@link (startAfter:1)}, {@link\n * endBefore:1}, {@link (endAt:1)}, {@link limit} or {@link limitToLast} and\n * can then be passed to {@link query} to create a new query instance that\n * also contains this `QueryConstraint`.\n */\nclass sr {}\n\n/**\n * Creates a new immutable instance of {@link Query} that is extended to also include\n * additional query constraints.\n *\n * @param query - The {@link Query} instance to use as a base for the new constraints.\n * @param queryConstraints - The list of {@link QueryConstraint}s to apply.\n * @throws if any of the provided query constraints cannot be combined with the\n * existing or new constraints.\n */ function ir(t, ...e) {\n    for (const n of e) t = n._apply(t);\n    return t;\n}\n\nclass or extends sr {\n    constructor(t, e, n) {\n        super(), this.dt = t, this.wt = e, this.yt = n, this.type = \"where\";\n    }\n    _apply(t) {\n        const e = Fn(t.firestore), n = function(t, e, n, r, s, i, o) {\n            let u;\n            if (s.isKeyField()) {\n                if (\"array-contains\" /* ARRAY_CONTAINS */ === i || \"array-contains-any\" /* ARRAY_CONTAINS_ANY */ === i) throw new L(A, `Invalid Query. You can't perform '${i}' queries on documentId().`);\n                if (\"in\" /* IN */ === i || \"not-in\" /* NOT_IN */ === i) {\n                    br(o, i);\n                    const e = [];\n                    for (const n of o) e.push(vr(r, t, n));\n                    u = {\n                        arrayValue: {\n                            values: e\n                        }\n                    };\n                } else u = vr(r, t, o);\n            } else \"in\" /* IN */ !== i && \"not-in\" /* NOT_IN */ !== i && \"array-contains-any\" /* ARRAY_CONTAINS_ANY */ !== i || br(o, i), \n            u = Bn(n, e, o, \n            /* allowArrays= */ \"in\" /* IN */ === i || \"not-in\" /* NOT_IN */ === i);\n            const c = Zt.create(s, i, u);\n            return function(t, e) {\n                if (e.D()) {\n                    const n = we(t);\n                    if (null !== n && !n.isEqual(e.field)) throw new L(A, `Invalid query. All where filters with an inequality (<, <=, !=, not-in, >, or >=) must be on the same field. But you have inequality filters on '${n.toString()}' and '${e.field.toString()}'`);\n                    const r = de(t);\n                    null !== r && Er(t, e.field, r);\n                }\n                const n = function(t, e) {\n                    for (const n of t.filters) if (e.indexOf(n.op) >= 0) return n.op;\n                    return null;\n                }(t, \n                /**\n * Given an operator, returns the set of operators that cannot be used with it.\n *\n * Operators in a query must adhere to the following set of rules:\n * 1. Only one array operator is allowed.\n * 2. Only one disjunctive operator is allowed.\n * 3. `NOT_EQUAL` cannot be used with another `NOT_EQUAL` operator.\n * 4. `NOT_IN` cannot be used with array, disjunctive, or `NOT_EQUAL` operators.\n *\n * Array operators: `ARRAY_CONTAINS`, `ARRAY_CONTAINS_ANY`\n * Disjunctive operators: `IN`, `ARRAY_CONTAINS_ANY`, `NOT_IN`\n */\n                function(t) {\n                    switch (t) {\n                      case \"!=\" /* NOT_EQUAL */ :\n                        return [ \"!=\" /* NOT_EQUAL */ , \"not-in\" /* NOT_IN */ ];\n\n                      case \"array-contains\" /* ARRAY_CONTAINS */ :\n                        return [ \"array-contains\" /* ARRAY_CONTAINS */ , \"array-contains-any\" /* ARRAY_CONTAINS_ANY */ , \"not-in\" /* NOT_IN */ ];\n\n                      case \"in\" /* IN */ :\n                        return [ \"array-contains-any\" /* ARRAY_CONTAINS_ANY */ , \"in\" /* IN */ , \"not-in\" /* NOT_IN */ ];\n\n                      case \"array-contains-any\" /* ARRAY_CONTAINS_ANY */ :\n                        return [ \"array-contains\" /* ARRAY_CONTAINS */ , \"array-contains-any\" /* ARRAY_CONTAINS_ANY */ , \"in\" /* IN */ , \"not-in\" /* NOT_IN */ ];\n\n                      case \"not-in\" /* NOT_IN */ :\n                        return [ \"array-contains\" /* ARRAY_CONTAINS */ , \"array-contains-any\" /* ARRAY_CONTAINS_ANY */ , \"in\" /* IN */ , \"not-in\" /* NOT_IN */ , \"!=\" /* NOT_EQUAL */ ];\n\n                      default:\n                        return [];\n                    }\n                }(e.op));\n                if (null !== n) \n                // Special case when it's a duplicate op to give a slightly clearer error message.\n                throw n === e.op ? new L(A, `Invalid query. You cannot use more than one '${e.op.toString()}' filter.`) : new L(A, `Invalid query. You cannot use '${e.op.toString()}' filters with '${n.toString()}' filters.`);\n            }(t, c), c;\n        }(t._query, \"where\", e, t.firestore._databaseId, this.dt, this.wt, this.yt);\n        return new mn(t.firestore, t.converter, function(t, e) {\n            const n = t.filters.concat([ e ]);\n            return new fe(t.path, t.collectionGroup, t.explicitOrderBy.slice(), n, t.limit, t.limitType, t.startAt, t.endAt);\n        }(t._query, n));\n    }\n}\n\n/**\n * Creates a {@link QueryConstraint} that enforces that documents must contain the\n * specified field and that the value should satisfy the relation constraint\n * provided.\n *\n * @param fieldPath - The path to compare\n * @param opStr - The operation string (e.g \"&lt;\", \"&lt;=\", \"==\", \"&lt;\",\n *   \"&lt;=\", \"!=\").\n * @param value - The value for comparison\n * @returns The created {@link Query}.\n */ function ur(t, e, n) {\n    const r = e, s = rr(\"where\", t);\n    return new or(s, r, n);\n}\n\nclass cr extends sr {\n    constructor(t, e) {\n        super(), this.dt = t, this._t = e, this.type = \"orderBy\";\n    }\n    _apply(t) {\n        const e = function(t, e, n) {\n            if (null !== t.startAt) throw new L(A, \"Invalid query. You must not call startAt() or startAfter() before calling orderBy().\");\n            if (null !== t.endAt) throw new L(A, \"Invalid query. You must not call endAt() or endBefore() before calling orderBy().\");\n            const r = new ae(e, n);\n            return function(t, e) {\n                if (null === de(t)) {\n                    // This is the first order by. It must match any inequality.\n                    const n = we(t);\n                    null !== n && Er(t, n, e.field);\n                }\n            }(t, r), r;\n        }\n        /**\n * Create a `Bound` from a query and a document.\n *\n * Note that the `Bound` will always include the key of the document\n * and so only the provided document will compare equal to the returned\n * position.\n *\n * Will throw if the document does not contain all fields of the order by\n * of the query or if any of the fields in the order by are an uncommitted\n * server timestamp.\n */ (t._query, this.dt, this._t);\n        return new mn(t.firestore, t.converter, function(t, e) {\n            // TODO(dimond): validate that orderBy does not list the same key twice.\n            const n = t.explicitOrderBy.concat([ e ]);\n            return new fe(t.path, t.collectionGroup, n, t.filters.slice(), t.limit, t.limitType, t.startAt, t.endAt);\n        }(t._query, e));\n    }\n}\n\n/**\n * Creates a {@link QueryConstraint} that sorts the query result by the\n * specified field, optionally in descending order instead of ascending.\n *\n * @param fieldPath - The field to sort by.\n * @param directionStr - Optional direction to sort by ('asc' or 'desc'). If\n * not specified, order will be ascending.\n * @returns The created {@link Query}.\n */ function ar(t, e = \"asc\") {\n    const n = e, r = rr(\"orderBy\", t);\n    return new cr(r, n);\n}\n\nclass hr extends sr {\n    constructor(t, e, n) {\n        super(), this.type = t, this.gt = e, this.vt = n;\n    }\n    _apply(t) {\n        return new mn(t.firestore, t.converter, function(t, e, n) {\n            return new fe(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), e, n, t.startAt, t.endAt);\n        }(t._query, this.gt, this.vt));\n    }\n}\n\n/**\n * Creates a {@link QueryConstraint} that only returns the first matching documents.\n *\n * @param limit - The maximum number of items to return.\n * @returns The created {@link Query}.\n */ function lr(t) {\n    return ut(\"limit\", t), new hr(\"limit\", t, \"F\" /* First */);\n}\n\n/**\n * Creates a {@link QueryConstraint} that only returns the last matching documents.\n *\n * You must specify at least one `orderBy` clause for `limitToLast` queries,\n * otherwise an exception will be thrown during execution.\n *\n * @param limit - The maximum number of items to return.\n * @returns The created {@link Query}.\n */ function fr(t) {\n    return ut(\"limitToLast\", t), new hr(\"limitToLast\", t, \"L\" /* Last */);\n}\n\nclass dr extends sr {\n    constructor(t, e, n) {\n        super(), this.type = t, this.bt = e, this.Et = n;\n    }\n    _apply(t) {\n        const e = gr(t, this.type, this.bt, this.Et);\n        return new mn(t.firestore, t.converter, function(t, e) {\n            return new fe(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), t.limit, t.limitType, e, t.endAt);\n        }(t._query, e));\n    }\n}\n\nfunction wr(...t) {\n    return new dr(\"startAt\", t, \n    /*inclusive=*/ !0);\n}\n\nfunction mr(...t) {\n    return new dr(\"startAfter\", t, \n    /*inclusive=*/ !1);\n}\n\nclass pr extends sr {\n    constructor(t, e, n) {\n        super(), this.type = t, this.bt = e, this.Et = n;\n    }\n    _apply(t) {\n        const e = gr(t, this.type, this.bt, this.Et);\n        return new mn(t.firestore, t.converter, function(t, e) {\n            return new fe(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), t.limit, t.limitType, t.startAt, e);\n        }(t._query, e));\n    }\n}\n\nfunction yr(...t) {\n    return new pr(\"endBefore\", t, \n    /*inclusive=*/ !1);\n}\n\nfunction _r(...t) {\n    return new pr(\"endAt\", t, /*inclusive=*/ !0);\n}\n\n/** Helper function to create a bound from a document or fields */ function gr(t, e, n, r) {\n    if (n[0] = getModularInstance(n[0]), n[0] instanceof Zn) return function(t, e, n, r, s) {\n        if (!r) throw new L(P, `Can't use a DocumentSnapshot that doesn't exist for ${n}().`);\n        const i = [];\n        // Because people expect to continue/end a query at the exact document\n        // provided, we need to use the implicit sort order rather than the explicit\n        // sort order, because it's guaranteed to contain the document key. That way\n        // the position becomes unambiguous and the query continues/ends exactly at\n        // the provided document. Without the key (by using the explicit sort\n        // orders), multiple documents could match the position, yielding duplicate\n        // results.\n                for (const n of pe(t)) if (n.field.isKeyField()) i.push(Bt(e, r.key)); else {\n            const t = r.data.field(n.field);\n            if (St(t)) throw new L(A, 'Invalid query. You are trying to start or end a query using a document for which the field \"' + n.field + '\" is an uncommitted server timestamp. (Since the value of this field is unknown, you cannot start/end a query with it.)');\n            if (null === t) {\n                const t = n.field.canonicalString();\n                throw new L(A, `Invalid query. You are trying to start or end a query using a document for which the field '${t}' (used as the orderBy) does not exist.`);\n            }\n            i.push(t);\n        }\n        return new ce(i, s);\n    }\n    /**\n * Converts a list of field values to a `Bound` for the given query.\n */ (t._query, t.firestore._databaseId, e, n[0]._document, r);\n    {\n        const s = Fn(t.firestore);\n        return function(t, e, n, r, s, i) {\n            // Use explicit order by's because it has to match the query the user made\n            const o = t.explicitOrderBy;\n            if (s.length > o.length) throw new L(A, `Too many arguments provided to ${r}(). The number of arguments must be less than or equal to the number of orderBy() clauses`);\n            const u = [];\n            for (let i = 0; i < s.length; i++) {\n                const c = s[i];\n                if (o[i].field.isKeyField()) {\n                    if (\"string\" != typeof c) throw new L(A, `Invalid query. Expected a string for document ID in ${r}(), but got a ${typeof c}`);\n                    if (!me(t) && -1 !== c.indexOf(\"/\")) throw new L(A, `Invalid query. When querying a collection and ordering by documentId(), the value passed to ${r}() must be a plain document ID, but '${c}' contains a slash.`);\n                    const n = t.path.child(X.fromString(c));\n                    if (!et.isDocumentKey(n)) throw new L(A, `Invalid query. When querying a collection group and ordering by documentId(), the value passed to ${r}() must result in a valid document path, but '${n}' is not because it contains an odd number of segments.`);\n                    const s = new et(n);\n                    u.push(Bt(e, s));\n                } else {\n                    const t = Bn(n, r, c);\n                    u.push(t);\n                }\n            }\n            return new ce(u, i);\n        }\n        /**\n * Parses the given `documentIdValue` into a `ReferenceValue`, throwing\n * appropriate errors if the value is anything other than a `DocumentReference`\n * or `string`, or if the string is malformed.\n */ (t._query, t.firestore._databaseId, s, e, n, r);\n    }\n}\n\nfunction vr(t, e, n) {\n    if (\"string\" == typeof (n = getModularInstance(n))) {\n        if (\"\" === n) throw new L(A, \"Invalid query. When querying with documentId(), you must provide a valid document ID, but it was an empty string.\");\n        if (!me(e) && -1 !== n.indexOf(\"/\")) throw new L(A, `Invalid query. When querying a collection by documentId(), you must provide a plain document ID, but '${n}' contains a '/' character.`);\n        const r = e.path.child(X.fromString(n));\n        if (!et.isDocumentKey(r)) throw new L(A, `Invalid query. When querying a collection group by documentId(), the value provided must result in a valid document path, but '${r}' is not because it has an odd number of segments (${r.length}).`);\n        return Bt(t, new et(r));\n    }\n    if (n instanceof wn) return Bt(t, n._key);\n    throw new L(A, `Invalid query. When querying with documentId(), you must provide a valid string or a DocumentReference, but it was: ${it(n)}.`);\n}\n\n/**\n * Validates that the value passed into a disjunctive filter satisfies all\n * array requirements.\n */ function br(t, e) {\n    if (!Array.isArray(t) || 0 === t.length) throw new L(A, `Invalid Query. A non-empty array is required for '${e.toString()}' filters.`);\n    if (t.length > 10) throw new L(A, `Invalid Query. '${e.toString()}' filters support a maximum of 10 elements in the value array.`);\n}\n\nfunction Er(t, e, n) {\n    if (!n.isEqual(e)) throw new L(A, `Invalid query. You have a where filter with an inequality (<, <=, !=, not-in, >, or >=) on field '${e.toString()}' and so you must also use '${e.toString()}' as your first argument to orderBy(), but your first orderBy() is on field '${n.toString()}' instead.`);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Converts Firestore's internal types to the JavaScript types that we expose\n * to the user.\n *\n * @internal\n */\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Converts custom model object of type T into `DocumentData` by applying the\n * converter if it exists.\n *\n * This function is used when converting user objects to `DocumentData`\n * because we want to provide the user with a more specific error message if\n * their `set()` or fails due to invalid data originating from a `toFirestore()`\n * call.\n */\nfunction Tr(t, e, n) {\n    let r;\n    // Cast to `any` in order to satisfy the union type constraint on\n    // toFirestore().\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return r = t ? n && (n.merge || n.mergeFields) ? t.toFirestore(e, n) : t.toFirestore(e) : e, \n    r;\n}\n\nclass Ir extends class {\n    convertValue(t, e = \"none\") {\n        switch (Ct(t)) {\n          case 0 /* NullValue */ :\n            return null;\n\n          case 1 /* BooleanValue */ :\n            return t.booleanValue;\n\n          case 2 /* NumberValue */ :\n            return xt(t.integerValue || t.doubleValue);\n\n          case 3 /* TimestampValue */ :\n            return this.convertTimestamp(t.timestampValue);\n\n          case 4 /* ServerTimestampValue */ :\n            return this.convertServerTimestamp(t, e);\n\n          case 5 /* StringValue */ :\n            return t.stringValue;\n\n          case 6 /* BlobValue */ :\n            return this.convertBytes(Ft(t.bytesValue));\n\n          case 7 /* RefValue */ :\n            return this.convertReference(t.referenceValue);\n\n          case 8 /* GeoPointValue */ :\n            return this.convertGeoPoint(t.geoPointValue);\n\n          case 9 /* ArrayValue */ :\n            return this.convertArray(t.arrayValue, e);\n\n          case 10 /* ObjectValue */ :\n            return this.convertObject(t.mapValue, e);\n\n          default:\n            throw g();\n        }\n    }\n    convertObject(t, e) {\n        const n = {};\n        return Et(t.fields, ((t, r) => {\n            n[t] = this.convertValue(r, e);\n        })), n;\n    }\n    convertGeoPoint(t) {\n        return new Rn(xt(t.latitude), xt(t.longitude));\n    }\n    convertArray(t, e) {\n        return (t.values || []).map((t => this.convertValue(t, e)));\n    }\n    convertServerTimestamp(t, e) {\n        switch (e) {\n          case \"previous\":\n            const n = qt(t);\n            return null == n ? null : this.convertValue(n, e);\n\n          case \"estimate\":\n            return this.convertTimestamp(Ot(t));\n\n          default:\n            return null;\n        }\n    }\n    convertTimestamp(t) {\n        const e = $t(t);\n        return new gt(e.seconds, e.nanos);\n    }\n    convertDocumentKey(t, e) {\n        const n = X.fromString(t);\n        v(Xe(n));\n        const r = new H(n.get(1), n.get(3)), s = new et(n.popFirst(5));\n        return r.isEqual(e) || \n        // TODO(b/64130202): Somehow support foreign references.\n        p(`Document ${s} contains a document reference within a different database (${r.projectId}/${r.database}) which is not supported. It will be treated as a reference in the current database (${e.projectId}/${e.database}) instead.`), \n        s;\n    }\n} {\n    constructor(t) {\n        super(), this.firestore = t;\n    }\n    convertBytes(t) {\n        return new In(t);\n    }\n    convertReference(t) {\n        const e = this.convertDocumentKey(t, this.firestore._databaseId);\n        return new wn(this.firestore, /* converter= */ null, e);\n    }\n}\n\n/**\n * Reads the document referred to by the specified document reference.\n *\n * All documents are directly fetched from the server, even if the document was\n * previously read or modified. Recent modifications are only reflected in the\n * retrieved `DocumentSnapshot` if they have already been applied by the\n * backend. If the client is offline, the read fails. If you like to use\n * caching or see local modifications, please use the full Firestore SDK.\n *\n * @param reference - The reference of the document to fetch.\n * @returns A Promise resolved with a `DocumentSnapshot` containing the current\n * document contents.\n */ function Ar(t) {\n    const e = un((t = ot(t, wn)).firestore), n = new Ir(t.firestore);\n    return rn(e, [ t._key ]).then((e => {\n        v(1 === e.length);\n        const r = e[0];\n        return new Zn(t.firestore, n, t._key, r.isFoundDocument() ? r : null, t.converter);\n    }));\n}\n\n/**\n * Executes the query and returns the results as a {@link QuerySnapshot}.\n *\n * All queries are executed directly by the server, even if the the query was\n * previously executed. Recent modifications are only reflected in the retrieved\n * results if they have already been applied by the backend. If the client is\n * offline, the operation fails. To see previously cached result and local\n * modifications, use the full Firestore SDK.\n *\n * @param query - The `Query` to execute.\n * @returns A Promise that will be resolved with the results of the query.\n */ function Rr(t) {\n    !function(t) {\n        if (\"L\" /* Last */ === t.limitType && 0 === t.explicitOrderBy.length) throw new L(q, \"limitToLast() queries require specifying at least one orderBy() clause\");\n    }((t = ot(t, mn))._query);\n    const e = un(t.firestore), n = new Ir(t.firestore);\n    return sn(e, t._query).then((e => {\n        const r = e.map((e => new tr(t.firestore, n, e.key, e, t.converter)));\n        return \"L\" /* Last */ === t._query.limitType && \n        // Limit to last queries reverse the orderBy constraint that was\n        // specified by the user. As such, we need to reverse the order of the\n        // results to return the documents in the expected order.\n        r.reverse(), new er(t, r);\n    }));\n}\n\nfunction Pr(t, e, n) {\n    const r = Tr((t = ot(t, wn)).converter, e, n), s = Sn(Fn(t.firestore), \"setDoc\", t._key, r, null !== t.converter, n);\n    return nn(un(t.firestore), [ s.toMutation(t._key, Re.none()) ]);\n}\n\nfunction Vr(t, e, n, ...r) {\n    const s = Fn((t = ot(t, wn)).firestore);\n    // For Compat types, we have to \"extract\" the underlying types before\n    // performing validation.\n        let i;\n    i = \"string\" == typeof (e = getModularInstance(e)) || e instanceof En ? jn(s, \"updateDoc\", t._key, e, n, r) : Un(s, \"updateDoc\", t._key, e);\n    return nn(un(t.firestore), [ i.toMutation(t._key, Re.exists(!0)) ]);\n}\n\n/**\n * Deletes the document referred to by the specified `DocumentReference`.\n *\n * The deletion will only be reflected in document reads that occur after the\n * returned promise resolves. If the client is offline, the\n * delete fails. If you would like to see local modifications or buffer writes\n * until the client is online, use the full Firestore SDK.\n *\n * @param reference - A reference to the document to delete.\n * @returns A `Promise` resolved once the document has been successfully\n * deleted from the backend.\n */ function Nr(t) {\n    return nn(un((t = ot(t, wn)).firestore), [ new De(t._key, Re.none()) ]);\n}\n\n/**\n * Add a new document to specified `CollectionReference` with the given data,\n * assigning it a document ID automatically.\n *\n * The result of this write will only be reflected in document reads that occur\n * after the returned promise resolves. If the client is offline, the\n * write fails. If you would like to see local modifications or buffer writes\n * until the client is online, use the full Firestore SDK.\n *\n * @param reference - A reference to the collection to add this document to.\n * @param data - An Object containing the data for the new document.\n * @throws Error - If the provided input is not a valid Firestore document.\n * @returns A `Promise` resolved with a `DocumentReference` pointing to the\n * newly created document after it has been written to the backend.\n */ function Dr(t, e) {\n    const n = gn(t = ot(t, pn)), r = Tr(t.converter, e), s = Sn(Fn(t.firestore), \"addDoc\", n._key, r, null !== n.converter, {});\n    return nn(un(t.firestore), [ s.toMutation(n._key, Re.exists(!1)) ]).then((() => n));\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns a sentinel for use with {@link @firebase/firestore/lite#(updateDoc:1)} or\n * {@link @firebase/firestore/lite#(setDoc:1)} with `{merge: true}` to mark a field for deletion.\n */ function $r() {\n    return new qn(\"deleteField\");\n}\n\n/**\n * Returns a sentinel used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link @firebase/firestore/lite#(updateDoc:1)} to\n * include a server-generated timestamp in the written data.\n */ function xr() {\n    return new kn(\"serverTimestamp\");\n}\n\n/**\n * Returns a special value that can be used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link\n * @firebase/firestore/lite#(updateDoc:1)} that tells the server to union the given elements with any array\n * value that already exists on the server. Each specified element that doesn't\n * already exist in the array will be added to the end. If the field being\n * modified is not already an array it will be overwritten with an array\n * containing exactly the specified elements.\n *\n * @param elements - The elements to union into the array.\n * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or\n * `updateDoc()`.\n */ function Fr(...t) {\n    // NOTE: We don't actually parse the data until it's used in set() or\n    // update() since we'd need the Firestore instance to do this.\n    return new Cn(\"arrayUnion\", t);\n}\n\n/**\n * Returns a special value that can be used with {@link (setDoc:1)} or {@link\n * updateDoc:1} that tells the server to remove the given elements from any\n * array value that already exists on the server. All instances of each element\n * specified will be removed from the array. If the field being modified is not\n * already an array it will be overwritten with an empty array.\n *\n * @param elements - The elements to remove from the array.\n * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or\n * `updateDoc()`\n */ function Sr(...t) {\n    // NOTE: We don't actually parse the data until it's used in set() or\n    // update() since we'd need the Firestore instance to do this.\n    return new Ln(\"arrayRemove\", t);\n}\n\n/**\n * Returns a special value that can be used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link\n * @firebase/firestore/lite#(updateDoc:1)} that tells the server to increment the field's current value by\n * the given value.\n *\n * If either the operand or the current field value uses floating point\n * precision, all arithmetic follows IEEE 754 semantics. If both values are\n * integers, values outside of JavaScript's safe number range\n * (`Number.MIN_SAFE_INTEGER` to `Number.MAX_SAFE_INTEGER`) are also subject to\n * precision loss. Furthermore, once processed by the Firestore backend, all\n * integer operations are capped between -2^63 and 2^63-1.\n *\n * If the current field value is not of type `number`, or if the field does not\n * yet exist, the transformation sets the field to the given value.\n *\n * @param n - The value to increment by.\n * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or\n * `updateDoc()`\n */ function qr(t) {\n    return new Mn(\"increment\", t);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A write batch, used to perform multiple writes as a single atomic unit.\n *\n * A `WriteBatch` object can be acquired by calling {@link writeBatch}. It\n * provides methods for adding writes to the write batch. None of the writes\n * will be committed (or visible locally) until {@link WriteBatch.commit} is\n * called.\n */ class Or {\n    /** @hideconstructor */\n    constructor(t, e) {\n        this._firestore = t, this._commitHandler = e, this._mutations = [], this._committed = !1, \n        this._dataReader = Fn(t);\n    }\n    set(t, e, n) {\n        this._verifyNotCommitted();\n        const r = kr(t, this._firestore), s = Tr(r.converter, e, n), i = Sn(this._dataReader, \"WriteBatch.set\", r._key, s, null !== r.converter, n);\n        return this._mutations.push(i.toMutation(r._key, Re.none())), this;\n    }\n    update(t, e, n, ...r) {\n        this._verifyNotCommitted();\n        const s = kr(t, this._firestore);\n        // For Compat types, we have to \"extract\" the underlying types before\n        // performing validation.\n                let i;\n        return i = \"string\" == typeof (e = getModularInstance(e)) || e instanceof En ? jn(this._dataReader, \"WriteBatch.update\", s._key, e, n, r) : Un(this._dataReader, \"WriteBatch.update\", s._key, e), \n        this._mutations.push(i.toMutation(s._key, Re.exists(!0))), this;\n    }\n    /**\n     * Deletes the document referred to by the provided {@link DocumentReference}.\n     *\n     * @param documentRef - A reference to the document to be deleted.\n     * @returns This `WriteBatch` instance. Used for chaining method calls.\n     */    delete(t) {\n        this._verifyNotCommitted();\n        const e = kr(t, this._firestore);\n        return this._mutations = this._mutations.concat(new De(e._key, Re.none())), this;\n    }\n    /**\n     * Commits all of the writes in this write batch as a single atomic unit.\n     *\n     * The result of these writes will only be reflected in document reads that\n     * occur after the returned promise resolves. If the client is offline, the\n     * write fails. If you would like to see local modifications or buffer writes\n     * until the client is online, use the full Firestore SDK.\n     *\n     * @returns A `Promise` resolved once all of the writes in the batch have been\n     * successfully written to the backend as an atomic unit (note that it won't\n     * resolve while you're offline).\n     */    commit() {\n        return this._verifyNotCommitted(), this._committed = !0, this._mutations.length > 0 ? this._commitHandler(this._mutations) : Promise.resolve();\n    }\n    _verifyNotCommitted() {\n        if (this._committed) throw new L(x, \"A write batch can no longer be used after commit() has been called.\");\n    }\n}\n\nfunction kr(t, e) {\n    if ((t = getModularInstance(t)).firestore !== e) throw new L(A, \"Provided document reference is from a different Firestore instance.\");\n    return t;\n}\n\n/**\n * Creates a write batch, used for performing multiple writes as a single\n * atomic operation. The maximum number of writes allowed in a single WriteBatch\n * is 500.\n *\n * The result of these writes will only be reflected in document reads that\n * occur after the returned promise resolves. If the client is offline, the\n * write fails. If you would like to see local modifications or buffer writes\n * until the client is online, use the full Firestore SDK.\n *\n * @returns A `WriteBatch` that can be used to atomically execute multiple\n * writes.\n */ function Cr(t) {\n    const e = un(t = ot(t, an));\n    return new Or(t, (t => nn(e, t)));\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Internal transaction object responsible for accumulating the mutations to\n * perform and the base versions for any documents read.\n */ class Lr {\n    constructor(t) {\n        this.datastore = t, \n        // The version of each document that was read during this transaction.\n        this.readVersions = new Map, this.mutations = [], this.committed = !1, \n        /**\n         * A deferred usage error that occurred previously in this transaction that\n         * will cause the transaction to fail once it actually commits.\n         */\n        this.lastWriteError = null, \n        /**\n         * Set of documents that have been written in the transaction.\n         *\n         * When there's more than one write to the same key in a transaction, any\n         * writes after the first are handled differently.\n         */\n        this.writtenDocs = new Set;\n    }\n    async lookup(t) {\n        if (this.ensureCommitNotCalled(), this.mutations.length > 0) throw new L(A, \"Firestore transactions require all reads to be executed before all writes.\");\n        const e = await rn(this.datastore, t);\n        return e.forEach((t => this.recordVersion(t))), e;\n    }\n    set(t, e) {\n        this.write(e.toMutation(t, this.precondition(t))), this.writtenDocs.add(t.toString());\n    }\n    update(t, e) {\n        try {\n            this.write(e.toMutation(t, this.preconditionForUpdate(t)));\n        } catch (t) {\n            this.lastWriteError = t;\n        }\n        this.writtenDocs.add(t.toString());\n    }\n    delete(t) {\n        this.write(new De(t, this.precondition(t))), this.writtenDocs.add(t.toString());\n    }\n    async commit() {\n        if (this.ensureCommitNotCalled(), this.lastWriteError) throw this.lastWriteError;\n        const t = this.readVersions;\n        // For each mutation, note that the doc was written.\n                this.mutations.forEach((e => {\n            t.delete(e.key.toString());\n        })), \n        // For each document that was read but not written to, we want to perform\n        // a `verify` operation.\n        t.forEach(((t, e) => {\n            const n = et.fromPath(e);\n            this.mutations.push(new $e(n, this.precondition(n)));\n        })), await nn(this.datastore, this.mutations), this.committed = !0;\n    }\n    recordVersion(t) {\n        let e;\n        if (t.isFoundDocument()) e = t.version; else {\n            if (!t.isNoDocument()) throw g();\n            // For deleted docs, we must use baseVersion 0 when we overwrite them.\n            e = vt.min();\n        }\n        const n = this.readVersions.get(t.key.toString());\n        if (n) {\n            if (!e.isEqual(n)) \n            // This transaction will fail no matter what.\n            throw new L(F, \"Document version changed between two reads.\");\n        } else this.readVersions.set(t.key.toString(), e);\n    }\n    /**\n     * Returns the version of this document when it was read in this transaction,\n     * as a precondition, or no precondition if it was not read.\n     */    precondition(t) {\n        const e = this.readVersions.get(t.toString());\n        return !this.writtenDocs.has(t.toString()) && e ? Re.updateTime(e) : Re.none();\n    }\n    /**\n     * Returns the precondition for a document if the operation is an update.\n     */    preconditionForUpdate(t) {\n        const e = this.readVersions.get(t.toString());\n        // The first time a document is written, we want to take into account the\n        // read time and existence\n                if (!this.writtenDocs.has(t.toString()) && e) {\n            if (e.isEqual(vt.min())) \n            // The document doesn't exist, so fail the transaction.\n            // This has to be validated locally because you can't send a\n            // precondition that a document does not exist without changing the\n            // semantics of the backend write to be an insert. This is the reverse\n            // of what we want, since we want to assert that the document doesn't\n            // exist but then send the update and have it fail. Since we can't\n            // express that to the backend, we have to validate locally.\n            // Note: this can change once we can send separate verify writes in the\n            // transaction.\n            throw new L(A, \"Can't update a document that doesn't exist.\");\n            // Document exists, base precondition on document update time.\n                        return Re.updateTime(e);\n        }\n        // Document was not read, so we just use the preconditions for a blind\n        // update.\n        return Re.exists(!0);\n    }\n    write(t) {\n        this.ensureCommitNotCalled(), this.mutations.push(t);\n    }\n    ensureCommitNotCalled() {}\n}\n\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ const Mr = {\n    maxAttempts: 5\n};\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * TransactionRunner encapsulates the logic needed to run and retry transactions\n * with backoff.\n */\nclass Ur {\n    constructor(t, e, n, r, s) {\n        this.asyncQueue = t, this.datastore = e, this.options = n, this.updateFunction = r, \n        this.deferred = s, this.Tt = n.maxAttempts, this.It = new tn(this.asyncQueue, \"transaction_retry\" /* TransactionRetry */);\n    }\n    /** Runs the transaction and sets the result on deferred. */    run() {\n        this.Tt -= 1, this.At();\n    }\n    At() {\n        this.It.W((async () => {\n            const t = new Lr(this.datastore), e = this.Rt(t);\n            e && e.then((e => {\n                this.asyncQueue.enqueueAndForget((() => t.commit().then((() => {\n                    this.deferred.resolve(e);\n                })).catch((t => {\n                    this.Pt(t);\n                }))));\n            })).catch((t => {\n                this.Pt(t);\n            }));\n        }));\n    }\n    Rt(t) {\n        try {\n            const e = this.updateFunction(t);\n            return !ct(e) && e.catch && e.then ? e : (this.deferred.reject(Error(\"Transaction callback must return a Promise\")), \n            null);\n        } catch (t) {\n            // Do not retry errors thrown by user provided updateFunction.\n            return this.deferred.reject(t), null;\n        }\n    }\n    Pt(t) {\n        this.Tt > 0 && this.Vt(t) ? (this.Tt -= 1, this.asyncQueue.enqueueAndForget((() => (this.At(), \n        Promise.resolve())))) : this.deferred.reject(t);\n    }\n    Vt(t) {\n        if (\"FirebaseError\" === t.name) {\n            // In transactions, the backend will fail outdated reads with FAILED_PRECONDITION and\n            // non-matching document versions with ABORTED. These errors should be retried.\n            const e = t.code;\n            return \"aborted\" === e || \"failed-precondition\" === e || !\n            /**\n * Determines whether an error code represents a permanent error when received\n * in response to a non-write operation.\n *\n * See isPermanentWriteError for classifying write errors.\n */\n            function(t) {\n                switch (t) {\n                  default:\n                    return g();\n\n                  case T:\n                  case I:\n                  case R:\n                  case $:\n                  case O:\n                  case k:\n // Unauthenticated means something went wrong with our token and we need\n                    // to retry with new credentials which will happen automatically.\n                                      case D:\n                    return !1;\n\n                  case A:\n                  case P:\n                  case V:\n                  case N:\n                  case x:\n // Aborted might be retried in some scenarios, but that is dependant on\n                    // the context and should handled individually by the calling code.\n                    // See https://cloud.google.com/apis/design/errors.\n                                      case F:\n                  case S:\n                  case q:\n                  case C:\n                    return !0;\n                }\n            }(e);\n        }\n        return !1;\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** The Platform's 'document' implementation or null if not available. */ function jr() {\n    // `document` is not always available, e.g. in ReactNative and WebWorkers.\n    // eslint-disable-next-line no-restricted-globals\n    return \"undefined\" != typeof document ? document : null;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Represents an operation scheduled to be run in the future on an AsyncQueue.\n *\n * It is created via DelayedOperation.createAndSchedule().\n *\n * Supports cancellation (via cancel()) and early execution (via skipDelay()).\n *\n * Note: We implement `PromiseLike` instead of `Promise`, as the `Promise` type\n * in newer versions of TypeScript defines `finally`, which is not available in\n * IE.\n */ class Br {\n    constructor(t, e, n, r, s) {\n        this.asyncQueue = t, this.timerId = e, this.targetTimeMs = n, this.op = r, this.removalCallback = s, \n        this.deferred = new M, this.then = this.deferred.promise.then.bind(this.deferred.promise), \n        // It's normal for the deferred promise to be canceled (due to cancellation)\n        // and so we attach a dummy catch callback to avoid\n        // 'UnhandledPromiseRejectionWarning' log spam.\n        this.deferred.promise.catch((t => {}));\n    }\n    /**\n     * Creates and returns a DelayedOperation that has been scheduled to be\n     * executed on the provided asyncQueue after the provided delayMs.\n     *\n     * @param asyncQueue - The queue to schedule the operation on.\n     * @param id - A Timer ID identifying the type of operation this is.\n     * @param delayMs - The delay (ms) before the operation should be scheduled.\n     * @param op - The operation to run.\n     * @param removalCallback - A callback to be called synchronously once the\n     *   operation is executed or canceled, notifying the AsyncQueue to remove it\n     *   from its delayedOperations list.\n     *   PORTING NOTE: This exists to prevent making removeDelayedOperation() and\n     *   the DelayedOperation class public.\n     */    static createAndSchedule(t, e, n, r, s) {\n        const i = Date.now() + n, o = new Br(t, e, i, r, s);\n        return o.start(n), o;\n    }\n    /**\n     * Starts the timer. This is called immediately after construction by\n     * createAndSchedule().\n     */    start(t) {\n        this.timerHandle = setTimeout((() => this.handleDelayElapsed()), t);\n    }\n    /**\n     * Queues the operation to run immediately (if it hasn't already been run or\n     * canceled).\n     */    skipDelay() {\n        return this.handleDelayElapsed();\n    }\n    /**\n     * Cancels the operation if it hasn't already been executed or canceled. The\n     * promise will be rejected.\n     *\n     * As long as the operation has not yet been run, calling cancel() provides a\n     * guarantee that the operation will not be run.\n     */    cancel(t) {\n        null !== this.timerHandle && (this.clearTimeout(), this.deferred.reject(new L(T, \"Operation cancelled\" + (t ? \": \" + t : \"\"))));\n    }\n    handleDelayElapsed() {\n        this.asyncQueue.enqueueAndForget((() => null !== this.timerHandle ? (this.clearTimeout(), \n        this.op().then((t => this.deferred.resolve(t)))) : Promise.resolve()));\n    }\n    clearTimeout() {\n        null !== this.timerHandle && (this.removalCallback(this), clearTimeout(this.timerHandle), \n        this.timerHandle = null);\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ class zr {\n    constructor() {\n        // The last promise in the queue.\n        this.Nt = Promise.resolve(), \n        // A list of retryable operations. Retryable operations are run in order and\n        // retried with backoff.\n        this.Dt = [], \n        // Is this AsyncQueue being shut down? Once it is set to true, it will not\n        // be changed again.\n        this.$t = !1, \n        // Operations scheduled to be queued in the future. Operations are\n        // automatically removed after they are run or canceled.\n        this.xt = [], \n        // visible for testing\n        this.Ft = null, \n        // Flag set while there's an outstanding AsyncQueue operation, used for\n        // assertion sanity-checks.\n        this.St = !1, \n        // Enabled during shutdown on Safari to prevent future access to IndexedDB.\n        this.qt = !1, \n        // List of TimerIds to fast-forward delays for.\n        this.Ot = [], \n        // Backoff timer used to schedule retries for retryable operations\n        this.It = new tn(this, \"async_queue_retry\" /* AsyncQueueRetry */), \n        // Visibility handler that triggers an immediate retry of all retryable\n        // operations. Meant to speed up recovery when we regain file system access\n        // after page comes into foreground.\n        this.kt = () => {\n            const t = jr();\n            t && m(\"AsyncQueue\", \"Visibility state changed to \" + t.visibilityState), this.It.Y();\n        };\n        const t = jr();\n        t && \"function\" == typeof t.addEventListener && t.addEventListener(\"visibilitychange\", this.kt);\n    }\n    get isShuttingDown() {\n        return this.$t;\n    }\n    /**\n     * Adds a new operation to the queue without waiting for it to complete (i.e.\n     * we ignore the Promise result).\n     */    enqueueAndForget(t) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.enqueue(t);\n    }\n    enqueueAndForgetEvenWhileRestricted(t) {\n        this.Ct(), \n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.Lt(t);\n    }\n    enterRestrictedMode(t) {\n        if (!this.$t) {\n            this.$t = !0, this.qt = t || !1;\n            const e = jr();\n            e && \"function\" == typeof e.removeEventListener && e.removeEventListener(\"visibilitychange\", this.kt);\n        }\n    }\n    enqueue(t) {\n        if (this.Ct(), this.$t) \n        // Return a Promise which never resolves.\n        return new Promise((() => {}));\n        // Create a deferred Promise that we can return to the callee. This\n        // allows us to return a \"hanging Promise\" only to the callee and still\n        // advance the queue even when the operation is not run.\n                const e = new M;\n        return this.Lt((() => this.$t && this.qt ? Promise.resolve() : (t().then(e.resolve, e.reject), \n        e.promise))).then((() => e.promise));\n    }\n    enqueueRetryable(t) {\n        this.enqueueAndForget((() => (this.Dt.push(t), this.Mt())));\n    }\n    /**\n     * Runs the next operation from the retryable queue. If the operation fails,\n     * reschedules with backoff.\n     */    async Mt() {\n        if (0 !== this.Dt.length) {\n            try {\n                await this.Dt[0](), this.Dt.shift(), this.It.reset();\n            } catch (t) {\n                if (!\n                /**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n                /** Verifies whether `e` is an IndexedDbTransactionError. */\n                function(t) {\n                    // Use name equality, as instanceof checks on errors don't work with errors\n                    // that wrap other errors.\n                    return \"IndexedDbTransactionError\" === t.name;\n                }\n                /**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ (t)) throw t;\n // Failure will be handled by AsyncQueue\n                                m(\"AsyncQueue\", \"Operation failed with retryable error: \" + t);\n            }\n            this.Dt.length > 0 && \n            // If there are additional operations, we re-schedule `retryNextOp()`.\n            // This is necessary to run retryable operations that failed during\n            // their initial attempt since we don't know whether they are already\n            // enqueued. If, for example, `op1`, `op2`, `op3` are enqueued and `op1`\n            // needs to  be re-run, we will run `op1`, `op1`, `op2` using the\n            // already enqueued calls to `retryNextOp()`. `op3()` will then run in the\n            // call scheduled here.\n            // Since `backoffAndRun()` cancels an existing backoff and schedules a\n            // new backoff on every call, there is only ever a single additional\n            // operation in the queue.\n            this.It.W((() => this.Mt()));\n        }\n    }\n    Lt(t) {\n        const e = this.Nt.then((() => (this.St = !0, t().catch((t => {\n            this.Ft = t, this.St = !1;\n            const e = \n            /**\n * Chrome includes Error.message in Error.stack. Other browsers do not.\n * This returns expected output of message + stack when available.\n * @param error - Error or FirestoreError\n */\n            function(t) {\n                let e = t.message || \"\";\n                t.stack && (e = t.stack.includes(t.message) ? t.stack : t.message + \"\\n\" + t.stack);\n                return e;\n            }\n            /**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n            // TODO(mrschmidt) Consider using `BaseTransaction` as the base class in the\n            // legacy SDK.\n            /**\n * A reference to a transaction.\n *\n * The `Transaction` object passed to a transaction's `updateFunction` provides\n * the methods to read and write data within the transaction context. See\n * {@link runTransaction}.\n */ (t);\n            // Re-throw the error so that this.tail becomes a rejected Promise and\n            // all further attempts to chain (via .then) will just short-circuit\n            // and return the rejected Promise.\n            throw p(\"INTERNAL UNHANDLED ERROR: \", e), t;\n        })).then((t => (this.St = !1, t))))));\n        return this.Nt = e, e;\n    }\n    enqueueAfterDelay(t, e, n) {\n        this.Ct(), \n        // Fast-forward delays for timerIds that have been overriden.\n        this.Ot.indexOf(t) > -1 && (e = 0);\n        const r = Br.createAndSchedule(this, t, e, n, (t => this.Ut(t)));\n        return this.xt.push(r), r;\n    }\n    Ct() {\n        this.Ft && g();\n    }\n    verifyOperationInProgress() {}\n    /**\n     * Waits until all currently queued tasks are finished executing. Delayed\n     * operations are not run.\n     */    async jt() {\n        // Operations in the queue prior to draining may have enqueued additional\n        // operations. Keep draining the queue until the tail is no longer advanced,\n        // which indicates that no more new operations were enqueued and that all\n        // operations were executed.\n        let t;\n        do {\n            t = this.Nt, await t;\n        } while (t !== this.Nt);\n    }\n    /**\n     * For Tests: Determine if a delayed operation with a particular TimerId\n     * exists.\n     */    Bt(t) {\n        for (const e of this.xt) if (e.timerId === t) return !0;\n        return !1;\n    }\n    /**\n     * For Tests: Runs some or all delayed operations early.\n     *\n     * @param lastTimerId - Delayed operations up to and including this TimerId\n     * will be drained. Pass TimerId.All to run all delayed operations.\n     * @returns a Promise that resolves once all operations have been run.\n     */    zt(t) {\n        // Note that draining may generate more delayed ops, so we do that first.\n        return this.jt().then((() => {\n            // Run ops in the same order they'd run if they ran naturally.\n            this.xt.sort(((t, e) => t.targetTimeMs - e.targetTimeMs));\n            for (const e of this.xt) if (e.skipDelay(), \"all\" /* All */ !== t && e.timerId === t) break;\n            return this.jt();\n        }));\n    }\n    /**\n     * For Tests: Skip all subsequent delays for a timer id.\n     */    Gt(t) {\n        this.Ot.push(t);\n    }\n    /** Called once a DelayedOperation is run or canceled. */    Ut(t) {\n        // NOTE: indexOf / slice are O(n), but delayedOperations is expected to be small.\n        const e = this.xt.indexOf(t);\n        this.xt.splice(e, 1);\n    }\n}\n\nclass Gr {\n    /** @hideconstructor */\n    constructor(t, e) {\n        this._firestore = t, this._transaction = e, this._dataReader = Fn(t);\n    }\n    /**\n     * Reads the document referenced by the provided {@link DocumentReference}.\n     *\n     * @param documentRef - A reference to the document to be read.\n     * @returns A `DocumentSnapshot` with the read data.\n     */    get(t) {\n        const e = kr(t, this._firestore), n = new Ir(this._firestore);\n        return this._transaction.lookup([ e._key ]).then((t => {\n            if (!t || 1 !== t.length) return g();\n            const r = t[0];\n            if (r.isFoundDocument()) return new Zn(this._firestore, n, r.key, r, e.converter);\n            if (r.isNoDocument()) return new Zn(this._firestore, n, e._key, null, e.converter);\n            throw g();\n        }));\n    }\n    set(t, e, n) {\n        const r = kr(t, this._firestore), s = Tr(r.converter, e, n), i = Sn(this._dataReader, \"Transaction.set\", r._key, s, null !== r.converter, n);\n        return this._transaction.set(r._key, i), this;\n    }\n    update(t, e, n, ...r) {\n        const s = kr(t, this._firestore);\n        // For Compat types, we have to \"extract\" the underlying types before\n        // performing validation.\n                let i;\n        return i = \"string\" == typeof (e = getModularInstance(e)) || e instanceof En ? jn(this._dataReader, \"Transaction.update\", s._key, e, n, r) : Un(this._dataReader, \"Transaction.update\", s._key, e), \n        this._transaction.update(s._key, i), this;\n    }\n    /**\n     * Deletes the document referred to by the provided {@link DocumentReference}.\n     *\n     * @param documentRef - A reference to the document to be deleted.\n     * @returns This `Transaction` instance. Used for chaining method calls.\n     */    delete(t) {\n        const e = kr(t, this._firestore);\n        return this._transaction.delete(e._key), this;\n    }\n}\n\n/**\n * Executes the given `updateFunction` and then attempts to commit the changes\n * applied within the transaction. If any document read within the transaction\n * has changed, Cloud Firestore retries the `updateFunction`. If it fails to\n * commit after 5 attempts, the transaction fails.\n *\n * The maximum number of writes allowed in a single transaction is 500.\n *\n * @param firestore - A reference to the Firestore database to run this\n * transaction against.\n * @param updateFunction - The function to execute within the transaction\n * context.\n * @param options - An options object to configure maximum number of attempts to\n * commit.\n * @returns If the transaction completed successfully or was explicitly aborted\n * (the `updateFunction` returned a failed promise), the promise returned by the\n * `updateFunction `is returned here. Otherwise, if the transaction failed, a\n * rejected promise with the corresponding failure error is returned.\n */ function Wr(t, e, n) {\n    const r = un(t = ot(t, an)), s = Object.assign(Object.assign({}, Mr), n);\n    !function(t) {\n        if (t.maxAttempts < 1) throw new L(A, \"Max attempts must be at least 1\");\n    }(s);\n    const i = new M;\n    return new Ur(new zr, r, s, (n => e(new Gr(t, n))), i).run(), i.promise;\n}\n\n/**\n * Firestore Lite\n *\n * @remarks Firestore Lite is a small online-only SDK that allows read\n * and write access to your Firestore database. All operations connect\n * directly to the backend, and `onSnapshot()` APIs are not supported.\n * @packageDocumentation\n */ !function(t) {\n    f = t;\n}(`${SDK_VERSION}_lite`), _registerComponent(new Component(\"firestore/lite\", ((t, {options: e}) => {\n    const n = t.getProvider(\"app\").getImmediate(), r = new an(n, new z(t.getProvider(\"auth-internal\")), new Q(t.getProvider(\"app-check-internal\")));\n    return e && r._setSettings(e), r;\n}), \"PUBLIC\")), \n// RUNTIME_ENV and BUILD_TARGET are replaced by real values during the compilation\nregisterVersion(\"firestore-lite\", \"3.4.14\", \"\"), registerVersion(\"firestore-lite\", \"3.4.14\", \"esm2017\");\n\nexport { In as Bytes, pn as CollectionReference, wn as DocumentReference, Zn as DocumentSnapshot, En as FieldPath, An as FieldValue, an as Firestore, L as FirestoreError, Rn as GeoPoint, mn as Query, sr as QueryConstraint, tr as QueryDocumentSnapshot, er as QuerySnapshot, gt as Timestamp, Gr as Transaction, Or as WriteBatch, Dr as addDoc, Sr as arrayRemove, Fr as arrayUnion, yn as collection, _n as collectionGroup, fn as connectFirestoreEmulator, Nr as deleteDoc, $r as deleteField, gn as doc, Tn as documentId, _r as endAt, yr as endBefore, Ar as getDoc, Rr as getDocs, ln as getFirestore, qr as increment, hn as initializeFirestore, lr as limit, fr as limitToLast, ar as orderBy, ir as query, bn as queryEqual, vn as refEqual, Wr as runTransaction, xr as serverTimestamp, Pr as setDoc, w as setLogLevel, nr as snapshotEqual, mr as startAfter, wr as startAt, dn as terminate, Vr as updateDoc, ur as where, Cr as writeBatch };\n//# sourceMappingURL=index.browser.esm2017.js.map\n","const Modal = () => {\n  const toggleVisible = (element) => {\n    if (element.style.visibility === 'visible') {\n      element.style.visibility = 'hidden';\n    } else {\n      element.style.visibility = 'visible';\n    }\n  }\n\n  const openModal = (element) => element.style.visibility = 'visible';\n  const closeModal = (element) => element.style.visibility = 'hidden';\n\n\n  const createBackground = () => {\n    const background = document.createElement('dov');\n    background.id = 'modal-background';\n    background.style.backgroundColor = 'rgba(0, 0, 0, 0.9)';\n    background.style.position = 'fixed';\n    background.style.top = '0px';\n    background.style.left = '0px';\n    background.style.right = '0px';\n    background.style.bottom = '0px';\n    background.style.display = 'flex';\n    background.style.alignItems = 'center';\n    background.style.justifyContent = 'center';\n    background.style.visibility = 'visible'\n    document.body.appendChild(background);\n    return background;\n  }\n\n  const createModalContainer = (backgroundElement) => {\n    const messageModalElement = document.createElement('div');\n    messageModalElement.id = 'message-modal';\n    messageModalElement.style.width = '1200px';\n    messageModalElement.style.height = '800px';\n    messageModalElement.style.backgroundColor = '#ecf0f1';\n    messageModalElement.style.borderRadius = '10px';\n    backgroundElement.style.zIndex = '1';\n    backgroundElement.appendChild(messageModalElement);\n    return messageModalElement;\n  }\n\n  return {\n    toggleVisible,\n    createBackground,\n    createModalContainer,\n    openModal,\n    closeModal,\n  }\n}\n\nexport default Modal;","import Modal from \"./Modal\";\nimport { sansFont } from './Styles'\nconst EndScreen = (scores, getPlayerName, startGame) => {\n  const { toggleVisible, createBackground, createModalContainer, openModal, closeModal } = Modal();\n\n  let scoreMessageContainer;\n  let score;\n\n  const setScore = (newScore) => {\n    score = newScore;\n    setScoreMessage(score);\n  }\n\n  const close = () => {\n    closeModal(element);\n  }\n\n  const toggle = () => {\n    toggleVisible(element);\n  }\n\n  const setScoreMessage = (score) => {\n    scoreMessageContainer.textContent = `Your time is ${score}.`;\n    console.log(scores);\n  }\n\n\n\n  const createModalContent = (modalElement) => {\n\n    const createButton = () => {\n      const playAgainButton = document.createElement('div');\n      playAgainButton.style.backgroundColor = '#27ae60'\n      playAgainButton.style.color = '#ecf0f1';\n      playAgainButton.style.margin = '0 auto';\n      playAgainButton.style.width = '300px';\n      playAgainButton.style.padding = '50px 0';\n      playAgainButton.style.borderRadius = '80x';\n      playAgainButton.style.marginTop = '50px';\n      playAgainButton.style.fontSize = '24px';\n      playAgainButton.textContent = 'Play Again?';\n      playAgainButton.addEventListener('mouseenter', (e) => {\n        e.target.style.cursor = 'pointer';\n      });\n\n      playAgainButton.addEventListener('click', () => {\n        startGame();\n      })\n      return playAgainButton;\n    }\n\n    const modalContent = document.createElement('div');\n    modalContent.style.fontFamily = sansFont;\n    modalContent.style.textAlign = 'center';\n\n    const heading = document.createElement('h1');\n    heading.textContent = '~You Win~';\n\n    scoreMessageContainer = document.createElement('div');\n    scoreMessageContainer.textContent = 'Your time is 10:00';\n    scoreMessageContainer.style.fontSize = '24px';\n\n    modalElement.append(modalContent);\n    modalContent.appendChild(heading);\n    modalContent.append(scoreMessageContainer);\n    modalContent.append(createButton());\n  }\n\n\n  const element = createBackground();\n  const modalElement = createModalContainer(element);\n  createModalContent(modalElement);\n\n  return {\n    toggle,\n    setScore,\n    open,\n    close,\n  }\n}\n\nexport default EndScreen;","import ScoreItem from \"./ScoreItem\";\nimport { sansFont, white } from \"./Styles\";\nconst ScoreContainer = () => {\n\n  let scores = [];\n\n  const setScores = (scoresArray) => {\n    scores = scoresArray;\n    createScoreElements();\n  }\n\n  const createElement = () => {\n    const rightPane = document.querySelector('#right-pane');\n\n    const scoreContainerElement = document.createElement('div');\n    scoreContainerElement.id = 'score-container';\n    scoreContainerElement.style.fontFamily = sansFont;\n    scoreContainerElement.style.color = white;\n    scoreContainerElement.style.padding = '20px';\n\n    const heading = document.createElement('div');\n    heading.textContent = 'High Scores';\n    heading.style.textAlign = 'center';\n    heading.style.color = white;\n    heading.style.fontFamily = sansFont;\n    heading.style.marginTop = '10px';\n    rightPane.appendChild(heading);\n\n    rightPane.appendChild(scoreContainerElement)\n\n    return scoreContainerElement;\n  }\n\n  const createScoreElements = () => {\n    scores.forEach((score) => {\n      ScoreItem(score, element);\n    });\n  }\n\n  const element = createElement();\n\n  return {\n    setScores,\n  }\n\n}\n\nexport default ScoreContainer;","import { lightGrey } from \"./Styles\";\nconst ScoreItem = (scoreObject, parent) => {\n\n  const createElement = () => {\n    const scoreItemElement = document.createElement('div');\n    scoreItemElement.classList.add('score-item');\n    scoreItemElement.style.borderBottom = `4px solid ${lightGrey}`;\n    scoreItemElement.style.padding = '10px 30px';\n    scoreItemElement.textContent = `${scoreObject.name}:    ${scoreObject.score}`;\n    parent.appendChild(scoreItemElement);\n    return scoreItemElement;\n  }\n\n  createElement();\n}\n\nexport default ScoreItem;","import IspyImage from './IspyImage';\nimport Selector from './Selector';\nimport Answer from './Answer';\nimport GuessingBox from './GuessingBox';\nimport fireStoreConfig from '../firestore.config';\nimport { initializeApp } from 'firebase/app';\nimport { getFirestore, collection, getDocs } from 'firebase/firestore/lite';\nimport EndScreen from './EndScreen';\nimport Timer from './Timer';\nimport ScoreContainer from './ScoreContainer';\nimport { darkGray } from './Styles';\nimport WelcomeScreen from './WelcomeScreen';\n\nconst Game = () => {\n  const answers = [];\n  const scores = [];\n  let playerName;\n  const getPlayerName = () => playerName;\n  const setPlayerName = (newName) => playerName = newName;\n  let startTime = null;\n  let gameContainer;\n  let welcomeScreen;\n  let timer;\n\n  const createGameContainer = () => {\n    const gameContainer = document.createElement('div');\n    gameContainer.id = 'game-container';\n    gameContainer.style.display = 'grid';\n    gameContainer.style.gridTemplateColumns = '4fr 1fr';\n    gameContainer.style.width = '1500px'\n    gameContainer.style.margin = '0 auto';\n\n    const leftPane = document.createElement('div');\n    leftPane.id = 'left-pane';\n    const rightPane = document.createElement('div');\n    rightPane.id = 'right-pane';\n    rightPane.style.backgroundColor = darkGray;\n    gameContainer.appendChild(leftPane);\n    gameContainer.appendChild(rightPane);\n    document.body.appendChild(gameContainer);\n    return gameContainer;\n  }\n\n\n  const stopGame = () => {\n    const time = Date.now() - startTime;\n    const timeInSeconds = (time / 1000).toFixed(2)\n    endScreen.setScore(timeInSeconds);\n    updateScores(timeInSeconds);\n    endScreen.toggle();\n  }\n\n  const updateScores = (timeInSeconds) => {\n    const isPlayerNameAlreadyInScores = () => {\n      let playerNames = scores.map((s) => s.name)\n      return playerNames.includes(getPlayerName());\n    }\n\n    const updateExistingPlayersScore = (playerName, newScore) => {\n      console.log(`update ${playerName}'s score to ${newScore}`);\n    }\n\n    const addNewPlayerScore = (playerName, newScore) => {\n      console.log(`Adding player: ${playerName} with a score of ${newScore}`);\n    }\n\n    if (isPlayerNameAlreadyInScores()) {\n      updateExistingPlayersScore(getPlayerName(), timeInSeconds);\n    } else {\n      addNewPlayerScore(getPlayerName(), timeInSeconds)\n    }\n\n  }\n\n  const startGame = () => {\n    startTime = Date.now();\n    resetAnswers();\n    welcomeScreen.close();\n    endScreen.close();\n    timer.start();\n  }\n\n  const resetAnswers = () => answers.forEach((answer) => answer.reset());\n\n  const initialize = () => {\n    const firebaseConfig = fireStoreConfig;\n    const app = initializeApp(firebaseConfig);\n    const db = getFirestore(app)\n    gameContainer = createGameContainer();\n    welcomeScreen = WelcomeScreen(setPlayerName, startGame);\n\n    // const fetchAnswersFromDatabase = (db) => {\n    //   console.log('getting answers')\n    //   const answersCol = collection(db, 'answers');\n    //   const answerSnapshot = await getDocs(answersCol);\n    //   const answerList = answerSnapshot.docs.map(doc => doc.data());\n    //   console.log(answerList);\n    //   return answerList;\n    // }\n\n    const populateWithLocalTestingAnswers = () => {\n      const answer1 = Answer({\n        name: 'sebastian',\n        coords: [\n          [77, 100],\n          [184, 100],\n          [77, 228],\n          [184, 228]],\n        preview: {\n          coords: [-150, -200],\n          backgroundSize: 1000\n        }\n      });\n\n      const answer2 = Answer({\n        name: \"limbo\",\n        coords: [\n          [705, 488],\n          [800, 488],\n          [705, 645],\n          [800, 645]\n        ],\n        preview: {\n          coords: [-920, -650],\n          backgroundSize: 700\n        }\n      });\n\n      const answer3 = Answer({\n        name: \"alien humanoid\",\n        coords: [\n          [470, 160],\n          [530, 160],\n          [470, 200],\n          [530, 200]\n        ],\n        preview: {\n          coords: [-1075, -350],\n          backgroundSize: 1200\n        }\n      });\n\n      const answer4 = Answer({\n        name: \"fez\",\n        coords: [\n          [400, 420],\n          [460, 420],\n          [400, 480],\n          [460, 480]\n        ],\n        preview: {\n          coords: [-920, -960],\n          backgroundSize: 1200\n        }\n      });\n\n\n      const answer5 = Answer({\n        name: \"isaac\",\n        coords: [\n          [690, 180],\n          [750, 180],\n          [690, 250],\n          [750, 250]\n        ],\n        preview: {\n          coords: [-1580, -420],\n          backgroundSize: 1200\n        }\n      });\n\n      answers.push(answer1);\n      answers.push(answer2);\n      // answers.push(answer3);\n      // answers.push(answer4);\n      // answers.push(answer5);\n\n      const score1 = { name: 'josh', score: 23.32 }\n      const score2 = { name: 'josh2', score: 10.11 }\n      const score3 = { name: 'josh3', score: 50.33 }\n      scores.push(score1);\n      scores.push(score2);\n      scores.push(score3);\n    }\n\n    populateWithLocalTestingAnswers();\n    const ispyImage = IspyImage(answers, Selector, GuessingBox, stopGame);\n    timer = Timer();\n    const scoreContainer = ScoreContainer();\n    scoreContainer.setScores(scores);\n\n  }\n\n  const endScreen = EndScreen(scores, getPlayerName, startGame);\n  endScreen.toggle();\n\n  return {\n    initialize,\n  }\n}\n\nexport default Game;\n\n\n\n\n\n//getAnswers(db);\n\n","import Modal from \"./Modal\";\nimport { sansFont } from './Styles'\n\nconst WelcomeScreen = (setPlayerName, startGame) => {\n  const { toggleVisible, createBackground, createModalContainer, openModal, closeModal } = Modal();\n\n  const toggle = () => {\n    toggleVisible(element);\n  }\n\n  const createModalContent = (modalElement) => {\n\n    const createButton = () => {\n      const playAgainButton = document.createElement('div');\n      playAgainButton.style.backgroundColor = '#27ae60'\n      playAgainButton.style.color = '#ecf0f1';\n      playAgainButton.style.margin = '0 auto';\n      playAgainButton.style.width = '300px';\n      playAgainButton.style.padding = '50px 0';\n      playAgainButton.style.borderRadius = '80x';\n      playAgainButton.style.marginTop = '50px';\n      playAgainButton.style.fontSize = '24px';\n      playAgainButton.textContent = 'Start Game';\n      playAgainButton.addEventListener('mouseenter', (e) => {\n        e.target.style.cursor = 'pointer';\n      });\n      playAgainButton.addEventListener('click', () => {\n        setPlayerName(nameInput.value || 'anonymous');\n        startGame();\n      })\n      return playAgainButton;\n    }\n\n\n    const modalContent = document.createElement('div');\n    modalContent.style.fontFamily = sansFont;\n    modalContent.style.textAlign = 'center';\n    modalContent.style.padding = '50px';\n\n    modalElement.append(modalContent);\n\n\n    const heading = document.createElement('h1');\n    heading.textContent = 'Welcome to the Game';\n    modalContent.appendChild(heading);\n\n    const directions = document.createElement('div');\n    directions.textContent = `\n    Look for the characters listed at the bottom of the picture. When you find them, click on them and choose the correct name.\n    `\n    directions.style.fontSize = '24px';\n    modalContent.appendChild(directions);\n\n    const nameInput = document.createElement('input');\n    nameInput.style.height = '50px';\n    nameInput.style.width = '200px';\n    nameInput.style.marginTop = '50px';\n    nameInput.style.fontSize = '20px';\n    nameInput.style.padding = '0 10px';\n    modalContent.appendChild(nameInput);\n\n    modalContent.append(createButton());\n  }\n\n  const close = () => closeModal(element);\n\n  const element = createBackground();\n  const modalElement = createModalContainer(element);\n  createModalContent(modalElement);\n\n  return {\n    toggle,\n    close,\n  }\n}\n\nexport default WelcomeScreen;","import { sansFont, white } from \"./Styles\";\nconst Timer = () => {\n\n  let currentTime = 0;\n  let isRunning;\n\n  const updateCurrentTimeHTML = () => element.textContent = currentTime;\n\n  const createElement = () => {\n    const heading = document.createElement('div');\n    heading.textContent = 'Timer';\n    heading.style.fontFamily = sansFont;\n    heading.style.textAlign = 'center';\n    heading.style.color = white;\n    heading.style.padding = '10px';\n\n\n    document.querySelector('#right-pane').append(heading);\n\n    const timerElement = document.createElement('div');\n    timerElement.id = 'timer';\n    timerElement.style.backgroundColor = white;\n    timerElement.style.color = 'black';\n    timerElement.style.width = '100%';\n    timerElement.style.padding = '10px';\n    timerElement.style.border = '4px solid black';\n    timerElement.textContent = currentTime;\n    timerElement.style.margin = '0 auto';\n    timerElement.style.textAlign = 'center';\n    timerElement.style.fontFamily = sansFont;\n    document.querySelector('#right-pane').append(timerElement);\n    return timerElement;\n  }\n\n  const start = () => {\n    currentTime = 0;\n    isRunning = true;\n  }\n\n  const stop = () => inRunning = false\n\n  const tick = () => {\n    if (!isRunning) { return }\n    currentTime += 1;\n    updateCurrentTimeHTML(currentTime)\n  }\n\n  setInterval(tick, 100)\n\n\n\n  const element = createElement();\n\n  return {\n    start,\n    stop,\n  }\n\n}\n\nexport default Timer;","import Game from \"./Game\";\n\nconst game = Game();\ngame.initialize();\n"],"names":["globalThis","this","Function","e","window","correctAnswers","SelectorFactoryFunction","GuessingBoxFactoryFunction","stopGame","currentCorrectAnswer","getCurrentCorrectAnswer","imagePath","element","imageElement","document","createElement","style","backgroundSize","backgroundRepeat","backgroundImage","boxSizing","position","classList","add","width","height","id","querySelector","appendChild","createImageElement","goalContainer","ipsyImageImagePath","IMAGE_QUERY_SELECTOR_STRING","getElement","generateElement","ispyImageElement","ispyImageWidth","split","ispyImageHeight","border","display","after","generateGoals","goalArray","forEach","goal","setImage","generateGoal","getBorderSize","selector","guessingBox","answer","generateAnswerSpace","body","addEventListener","target","contains","getAttribute","open","getTop","getLeft","close","cursor","backgroundColor","getHeight","getWidth","top","left","isUpdatingPosition","borderRadius","x","clientX","y","clientY","setUpdatingPosition","newBool","answerObject","name","coords","preview","goalElement","image","ipsyImageObject","hasAnsweredCorrectly","getGoalElement","getCoords","getName","imageToSet","getImage","goalContainerElement","goalElementDiv","goalWidth","goalHeight","backgroundPositionX","backgroundPositionY","backgroundPosition","ipsyImageElement","answerElement","dataset","characterName","setIpsyImageObject","newIpsyImageObject","attemptAnswer","correctAnswer","guessChoice","isAnswerRight","console","log","opacity","getHasAnsweredCorrectly","reset","darkGray","sansFont","white","answerArray","checkForGameEnd","every","boxElement","color","rowGap","visibility","itemElement","guessingBoxElement","guessingElement","textContent","fontFamily","originalBackgroundColor","padding","guess","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","stringToByteArray$1","str","out","p","i","length","c","charCodeAt","base64","byteToCharMap_","charToByteMap_","byteToCharMapWebSafe_","charToByteMapWebSafe_","ENCODED_VALS_BASE","ENCODED_VALS","ENCODED_VALS_WEBSAFE","HAS_NATIVE_SUPPORT","atob","encodeByteArray","input","webSafe","Array","isArray","Error","init_","byteToCharMap","output","byte1","haveByte2","byte2","haveByte3","byte3","outByte1","outByte2","outByte3","outByte4","push","join","encodeString","btoa","decodeString","bytes","pos","c1","String","fromCharCode","c2","u","c3","byteArrayToString","decodeStringToByteArray","charToByteMap","charAt","byte4","base64urlEncodeWithoutPadding","utf8Bytes","base64Encode","replace","Deferred","constructor","reject","resolve","promise","Promise","wrapCallback","callback","error","value","catch","FirebaseError","code","message","customData","super","Object","setPrototypeOf","prototype","captureStackTrace","ErrorFactory","create","service","serviceName","errors","data","fullCode","template","PATTERN","_","key","replaceTemplate","fullMessage","deepEqual","a","b","aKeys","keys","bKeys","k","includes","aProp","bProp","isObject","thing","Component","instanceFactory","type","multipleInstances","serviceProps","instantiationMode","onInstanceCreated","setInstantiationMode","mode","setMultipleInstances","setServiceProps","props","setInstanceCreatedCallback","DEFAULT_ENTRY_NAME","Provider","container","component","instances","Map","instancesDeferred","instancesOptions","onInitCallbacks","get","identifier","normalizedIdentifier","normalizeInstanceIdentifier","has","deferred","set","isInitialized","shouldAutoInitialize","instance","getOrInitializeService","instanceIdentifier","getImmediate","options","_a","optional","getComponent","setComponent","isComponentEager","instanceDeferred","entries","clearInstance","delete","async","services","from","values","all","filter","map","INTERNAL","_delete","isComponentSet","getOptions","initialize","opts","onInit","existingCallbacks","Set","existingInstance","invokeOnInitCallbacks","callbacks","undefined","ComponentContainer","providers","addComponent","provider","getProvider","addOrOverwriteComponent","getProviders","LogLevel","levelStringToEnum","DEBUG","VERBOSE","INFO","WARN","ERROR","SILENT","defaultLogLevel","ConsoleMethod","defaultLogHandler","logType","args","logLevel","now","Date","toISOString","method","Logger","_logLevel","_logHandler","_userLogHandler","val","TypeError","setLogLevel","logHandler","userLogHandler","debug","info","warn","idbProxyableTypes","cursorAdvanceMethods","cursorRequestMap","WeakMap","transactionDoneMap","transactionStoreNamesMap","transformCache","reverseTransformCache","idbProxyTraps","prop","receiver","IDBTransaction","objectStoreNames","objectStore","transformCachableValue","func","IDBDatabase","transaction","IDBCursor","advance","continue","continuePrimaryKey","apply","unwrap","storeNames","tx","call","sort","done","unlisten","removeEventListener","complete","DOMException","cacheDonePromiseForTransaction","object","IDBObjectStore","IDBIndex","some","Proxy","IDBRequest","request","success","result","then","promisifyRequest","newValue","readMethods","writeMethods","cachedMethods","getMethod","targetFuncName","useIndex","isWrite","storeName","store","index","shift","oldTraps","PlatformLoggerServiceImpl","getPlatformInfoString","isVersionServiceProvider","library","version","logString","name$o","version$1","logger","PLATFORM_LOG_STRING","_apps","_components","_addComponent","app","_registerComponent","componentName","ERROR_FACTORY","FirebaseAppImpl","config","_isDeleted","_options","assign","_config","_name","_automaticDataCollectionEnabled","automaticDataCollectionEnabled","_container","checkDestroyed","isDeleted","appName","registerVersion","libraryKeyOrName","variant","libraryMismatch","match","versionMismatch","warning","STORE_NAME","dbPromise","getDbPromise","blocked","upgrade","blocking","terminated","indexedDB","openPromise","event","oldVersion","newVersion","db","openDB","createObjectStore","originalErrorMessage","writeHeartbeatsToIndexedDB","heartbeatObject","put","computeKey","idbGetError","HeartbeatServiceImpl","_heartbeatsCache","_storage","HeartbeatStorageImpl","_heartbeatsCachePromise","read","agent","date","getUTCDateString","lastSentHeartbeatDate","heartbeats","singleDateHeartbeat","hbTimestamp","valueOf","overwrite","heartbeatsToSend","unsentEntries","heartbeatsCache","maxSize","slice","heartbeatEntry","find","hb","dates","countBytes","pop","extractHeartbeatsForHeader","headerString","JSON","stringify","substring","_canUseIndexedDBPromise","runIndexedDBEnvironmentCheck","preExist","DB_CHECK_NAME","self","onsuccess","deleteDatabase","onupgradeneeded","onerror","readHeartbeatsFromIndexedDB","heartbeatsObject","existingHeartbeatsObject","l","t","uid","isAuthenticated","toKey","isEqual","UNAUTHENTICATED","GOOGLE_CREDENTIALS","FIRST_PARTY","MOCK_USER","f","d","g","n","v","A","L","toString","U","user","headers","j","getToken","invalidateToken","start","enqueueRetryable","shutdown","z","auth","accessToken","getUid","G","r","getAuthHeaderValueForFirstParty","W","o","K","Q","appCheck","token","H","database","static","isDefaultDatabase","lt","ft","OK","CANCELLED","UNKNOWN","INVALID_ARGUMENT","DEADLINE_EXCEEDED","NOT_FOUND","ALREADY_EXISTS","PERMISSION_DENIED","RESOURCE_EXHAUSTED","FAILED_PRECONDITION","ABORTED","OUT_OF_RANGE","UNIMPLEMENTED","UNAVAILABLE","DATA_LOSS","At","s","RED","EMPTY","right","size","copy","isEmpty","inorderTraversal","reverseTraversal","min","minKey","maxKey","insert","fixUp","removeMin","isRed","moveRedLeft","remove","rotateRight","moveRedRight","rotateLeft","colorFlip","checkMaxDepth","check","Math","pow","BLACK","Nt","binaryString","Symbol","iterator","next","toBase64","toUint8Array","Uint8Array","approximateByteSize","compareTo","yt","EMPTY_BYTE_STRING","on","cn","host","ssl","credentials","ignoreUndefinedProperties","cacheSizeBytes","experimentalForceLongPolling","experimentalAutoDetectLongPolling","useFetchStreams","an","_authCredentials","_appCheckCredentials","_persistenceKey","_settings","_settingsFrozen","_databaseId","_app","hasOwnProperty","_initialized","_terminated","_terminateTask","_setSettings","client","sessionIndex","iamToken","_getSettings","_freezeSettings","_terminate","toJSON","databaseId","settings","m","terminate","toggleVisible","createBackground","background","bottom","alignItems","justifyContent","createModalContainer","backgroundElement","messageModalElement","zIndex","openModal","closeModal","scores","getPlayerName","startGame","scoreMessageContainer","score","modalElement","modalContent","textAlign","heading","fontSize","append","playAgainButton","margin","marginTop","createButton","createModalContent","toggle","setScore","newScore","setScoreMessage","createScoreElements","scoreObject","parent","scoreItemElement","borderBottom","rightPane","scoreContainerElement","setScores","scoresArray","answers","playerName","setPlayerName","newName","gameContainer","welcomeScreen","timer","startTime","timeInSeconds","toFixed","endScreen","updateScores","updateExistingPlayersScore","addNewPlayerScore","resetAnswers","getApp","heartbeatController","triggerHeartbeat","rawConfig","existingApp","newApp","initializeApp","gridTemplateColumns","leftPane","createGameContainer","directions","nameInput","answer1","answer2","populateWithLocalTestingAnswers","isRunning","currentTime","setInterval","timerElement","stop","inRunning"],"sourceRoot":""}