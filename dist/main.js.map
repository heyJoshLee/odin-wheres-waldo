{"version":3,"file":"main.js","mappings":"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","sources":["webpack://odin-wheres-waldo/./src/GoalContainer.js","webpack://odin-wheres-waldo/./src/Selector.js","webpack://odin-wheres-waldo/./src/Answer.js","webpack://odin-wheres-waldo/./src/index.js","webpack://odin-wheres-waldo/./src/IspyImage.js","webpack://odin-wheres-waldo/./src/GuessingBox.js"],"sourcesContent":["const GoalContainer = (ipsyImageImagePath) => {\n  const BORDER_SIZE = 5;\n  const IMAGE_QUERY_SELECTOR_STRING = '#ispy-image';\n  let element;\n\n  const getElement = () => {\n    if (!element) {\n      element = generateElement();\n    }\n    return element;\n  }\n\n  const getBorderSize = () => BORDER_SIZE;\n\n  const generateElement = () => {\n    const goalContainer = document.createElement('div');\n    const ispyImageElement = document.querySelector(IMAGE_QUERY_SELECTOR_STRING);\n    const ispyImageWidth = ispyImageElement.style.width.split('p')[0];\n    const ispyImageHeight = ispyImageElement.style.height.split('p')[0];\n    goalContainer.id = 'goal-container';\n    goalContainer.style.width = `${ispyImageWidth}px`;\n    goalContainer.style.height = `${ispyImageHeight / 5}px`;\n    goalContainer.style.border = `${BORDER_SIZE}px solid black`;\n    goalContainer.style.boxSizing = 'border-box';\n    goalContainer.style.display = 'flex';\n    ispyImageElement.after(goalContainer);\n    return goalContainer;\n  }\n\n  const generateGoals = (goalArray) => {\n    const ispyImageElement = document.querySelector(IMAGE_QUERY_SELECTOR_STRING);\n    const backgroundImage = ispyImageElement.style.backgroundImage;\n    console.log(backgroundImage);\n    goalArray.forEach((goal) => {\n      goal.setImage(ipsyImageImagePath)\n      goal.generateGoal(getElement());\n    })\n  }\n\n  return {\n    getElement,\n    generateGoals,\n    generateElement,\n    getBorderSize,\n  }\n}\n\nexport default GoalContainer;","import GuessingBox from './GuessingBox';\n\nconst Selector = (querySelector) => {\n\n  const WIDTH = 100;\n  const HEIGHT = 100;\n  const ZOOM = 1;\n\n  let top;\n  let left;\n\n  const getTop = () => top;\n  const getLeft = () => left;\n\n  const setTop = (newPos) => top = newPos;\n  const setLeft = (newPos) => left = newPos;\n\n\n  const BORDER = '4px solid black';\n  const BORDER_RADIUS = '100%';\n  const ISPY_ELEMENT = document.querySelector(querySelector)\n\n  const element = document.createElement('div');\n  element.classList.add('selector');\n  element.style.width = `${WIDTH}px`;\n  element.style.height = `${HEIGHT}px`;\n  element.style.border = BORDER;\n  element.style.borderRadius = BORDER_RADIUS;\n  element.style.position = 'absolute';\n  // element.style.backgroundImage = `url('${ISPY_ELEMENT.src}')`;\n  // element.style.backgroundRepeat = 'no-repeat';\n  // element.style.backgroundSize = `${ISPY_ELEMENT.width * ZOOM}px ${ISPY_ELEMENT.height * ZOOM}px`;\n  // ${ ISPY_ELEMENT.width * ZOOM }px ${ ISPY_ELEMENT.height * ZOOM } px`\n\n  // glass.style.backgroundPosition = \"-\" + ((x * zoom) - w + bw) + \"px -\" + ((y * zoom) - h + bw) + \"px\";\n\n\n  //TODO: Put the selector back in the DOM\n  //document.body.appendChild(element);\n\n  const updateSelectorPosition = (e) => {\n    const x = e.clientX;\n    const y = e.clientY;\n    const offset = 1;\n    left = x - (WIDTH / 2);\n    top = y - (HEIGHT / 2);\n\n    element.style.left = `${left}px`;\n    element.style.top = `${top}px`;\n\n    //console.log(left, top)\n\n  }\n\n\n\n  document.addEventListener('mousemove', updateSelectorPosition)\n\n\n  return {\n    getLeft,\n    getTop,\n  }\n\n}\n\nexport default Selector;","const Answer = (answerObject) => {\n\n  const { name, coords } = answerObject;\n  let image = null;\n\n  const getName = () => name;\n  const getCoords = () => coords;\n\n  const width = () => coords[1][0] - coords[0][0];\n  const height = () => coords[2][1] - coords[0][1];\n\n  const setImage = (imageToSet) => {\n    image = imageToSet;\n  }\n\n  const getImage = () => image;\n\n  const generateGoal = (goalContainerElement) => {\n    const ZOOM = 1000;\n    const goalElement = document.createElement('div');\n    goalElement.classList.add('goal-item')\n    const goalContainerWidth = goalContainerElement.style.width.split('p')[0];\n    const goalContainerHeight = goalContainerElement.style.height.split('p')[0];\n    const goalWidth = goalContainerWidth / 5;\n    const goalHeight = goalContainerHeight - 5;\n    goalElement.style.width = `${goalWidth}px`;\n    goalElement.style.height = `${goalHeight}px`;\n    goalElement.style.border = '1px solid black';\n    goalElement.style.boxSizing = 'border-box';\n    goalElement.style.backgroundSize = `${ZOOM}% ${ZOOM}%`;\n    goalElement.style.backgroundRepeat = 'no-repeat';\n    goalElement.style.backgroundImage = `url('${image}')`;\n    const offSetX = -50;\n    const offSetY = -100\n    const backgroundPositionX = (-getCoords()[0][0] + offSetX);\n    const backgroundPositionY = (-getCoords()[0][1] + offSetY);\n    //console.log(backgroundPositionX);\n    //console.log(backgroundPositionY)\n\n    goalElement.style.backgroundPosition = `${backgroundPositionX}px ${backgroundPositionY}px`;\n    goalContainerElement.appendChild(goalElement);\n  }\n\n  const generateAnswerSpace = (ipsyImageElement) => {\n    const answerElement = document.createElement('div');\n    answerElement.classList.add('answer');\n    answerElement.style.position = 'absolute';\n    answerElement.style.top = '0px';\n    answerElement.style.left = '0px';\n    answerElement.style.width = `${width()}px`;\n    answerElement.style.height = `${height()}px`;\n    answerElement.style.top = `${getCoords()[0][1]}px`;\n    answerElement.style.left = `${getCoords()[0][0]}px`\n    answerElement.style.border = '5px solid red';\n    answerElement.addEventListener('click', setToCorrectAnswer)\n    ipsyImageElement.appendChild(answerElement);\n  }\n\n  const setToCorrectAnswer = () => {\n    console.log(`You are clicking on ${name}`)\n  }\n\n\n\n  return {\n    getName,\n    getCoords,\n    width,\n    height,\n    setImage,\n    getImage,\n    generateGoal,\n    generateAnswerSpace,\n  }\n}\n\nexport default Answer;","import IspyImage from './IspyImage';\nimport Selector from './Selector';\nimport Answer from './Answer';\nimport GuessingBox from './GuessingBox';\n\nconst answers = [];\n\nconst answer1 = Answer({\n  name: 'sebastian',\n  coords: [\n    [77, 100],\n    [184, 100],\n    [77, 228],\n    [184, 228]],\n});\n\nconst answer2 = Answer({\n  name: \"limbo\",\n  coords: [\n    [705, 488],\n    [800, 488],\n    [705, 645],\n    [800, 645]\n  ]\n})\n\nanswers.push(answer1);\nanswers.push(answer2);\n\nconst ispyImage = IspyImage(answers, Selector, GuessingBox);\n\n\nconst selector = Selector('#ispy-image');","import GoalContainer from './GoalContainer';\nconst IspyImage = (correctAnswers, SelectorFactoryFunction, GuessingBoxFactoryFunction) => {\n  const WIDTH = 1200;\n  const HEIGHT = 700;\n  const getWidth = () => WIDTH;\n  const getHeight = () => HEIGHT;\n\n  const imagePathChoices = ['./assets/games.jpeg'];\n  const imagePath = imagePathChoices[0];\n  const getImagePath = () => imagePath;\n\n  const createImageElement = () => {\n    const imageElement = document.createElement('div');\n    imageElement.style.backgroundSize = '100% 100%';\n    imageElement.style.backgroundRepeat = 'no-repeat';\n    imageElement.style.backgroundImage = `url('${imagePath}')`;\n    imageElement.style.boxSizing = 'border-box';\n\n    imageElement.style.width = `${WIDTH}px`;\n    imageElement.style.height = `${HEIGHT}px`;\n    imageElement.id = 'ispy-image';\n\n    document.body.appendChild(imageElement);\n    return imageElement;\n  }\n\n\n\n\n  const element = createImageElement();\n  const goalContainer = GoalContainer(getImagePath());\n  const selector = SelectorFactoryFunction()\n  const guessingBox = GuessingBoxFactoryFunction()\n  goalContainer.generateElement();\n  goalContainer.generateGoals(correctAnswers);\n  correctAnswers.forEach((answer) => {\n    answer.generateAnswerSpace(element);\n  });\n\n  const startAnswering = () => {\n    console.log('hi')\n    console.log(selector.getLeft())\n    guessingBox.open(selector.getTop(), selector.getLeft());\n  }\n\n  console.log(element)\n  element.style.backgroundColor = 'red'\n  element.addEventListener('click', startAnswering);\n\n\n\n\n  return {\n    imagePath,\n    getHeight,\n    getWidth,\n  }\n}\n\nexport default IspyImage;","const GuessingBox = () => {\n\n  let element;\n  const getElement = () => element;\n\n  const open = (top, left) => {\n    console.log(element)\n    const offset = 40;\n    element.style.top = `${top + offset}px`;\n    element.style.left = `${left + offset}px`;\n    element.style.visibility = 'visible';\n  }\n\n  const createElement = () => {\n    const boxElement = document.createElement('div');\n    boxElement.id = 'guessing-box';\n    boxElement.style.backgroundColor = 'red';\n    boxElement.style.width = '200px';\n    boxElement.style.height = '300px';\n    boxElement.style.position = 'fixed';\n    boxElement.style.top = '0px';\n    boxElement.style.left = '0px';\n    boxElement.style.visibility = 'hidden';\n\n    document.body.appendChild(boxElement);\n    return boxElement\n  }\n\n  element = createElement();\n\n\n  return {\n    open,\n  }\n}\n\nexport default GuessingBox;"],"names":["querySelector","top","left","document","element","createElement","classList","add","style","width","height","border","borderRadius","position","addEventListener","e","x","clientX","y","clientY","getLeft","getTop","answerObject","name","coords","image","getCoords","setToCorrectAnswer","console","log","getName","setImage","imageToSet","getImage","generateGoal","goalContainerElement","goalElement","goalWidth","split","goalHeight","boxSizing","backgroundSize","backgroundRepeat","backgroundImage","backgroundPositionX","backgroundPositionY","backgroundPosition","appendChild","generateAnswerSpace","ipsyImageElement","answerElement","answers","answer1","answer2","push","correctAnswers","SelectorFactoryFunction","GuessingBoxFactoryFunction","imagePath","imageElement","id","body","createImageElement","goalContainer","ipsyImageImagePath","IMAGE_QUERY_SELECTOR_STRING","getElement","generateElement","ispyImageElement","ispyImageWidth","ispyImageHeight","display","after","generateGoals","goalArray","forEach","goal","getBorderSize","selector","guessingBox","answer","backgroundColor","open","boxElement","visibility"],"sourceRoot":""}